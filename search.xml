<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用next主题调整blog的样式【持续更新】</title>
    <url>/2023/03/24/b03%20%E4%BD%BF%E7%94%A8next%E4%B8%BB%E9%A2%98%E8%B0%83%E6%95%B4blog%E7%9A%84%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>next主题虽然配置简单，但是界面太素了，其实本身自带的配置文件就可以实现一些不错的功能，以下是我从网络上整理<del>copy</del>的一些设置技巧。工具需要:git bash或者cmd，都需要使用管理员权限打开。</p>
<span id="more"></span>

<h2 id="为blog增加字数统计，预计阅读时间的功能"><a href="#为blog增加字数统计，预计阅读时间的功能" class="headerlink" title="为blog增加字数统计，预计阅读时间的功能"></a>为blog增加字数统计，预计阅读时间的功能</h2><h3 id="安装hexo-word-counter"><a href="#安装hexo-word-counter" class="headerlink" title="安装hexo-word-counter"></a>安装hexo-word-counter</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-word-counter</span></span><br><span class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment">#安装完成后要清除一次，不然会出错</span></span><br></pre></td></tr></table></figure>

<h3 id="在hexo的配置文件中"><a href="#在hexo的配置文件中" class="headerlink" title="在hexo的配置文件中"></a>在hexo的配置文件中</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                       <span class="comment">#平均字节长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>awl – 平均字节长度（Average Word Length）。默认为4</li>
</ol>
<ul>
<li>CN ≈ 2</li>
<li>EN ≈ 5</li>
<li>RU ≈ 6</li>
</ul>
<ol start="2">
<li>wpm – 每分钟阅读字数（Words Per Minute）。默认为275</li>
</ol>
<ul>
<li>-Slow ≈ 200</li>
<li>Normal ≈ 275</li>
<li>Fast ≈ 350</li>
</ul>
<p><strong>如果文章中大多中文，那么设置awl为2，wpm为300比较合适</strong></p>
<h2 id="为blog添加评论区功能"><a href="#为blog添加评论区功能" class="headerlink" title="为blog添加评论区功能"></a>为blog添加评论区功能</h2><p>使用来必力网站</p>
<ol>
<li>首先需要注册账号并登录，有一点点韩文需要使用翻译，登录后选择安装，点击免费版，选择现在安装。</li>
</ol>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324201325383.png" alt="image-20230324201325383"></p>
<ol start="2">
<li><p>根据提示填写网站地址，以及名称，来必力会生成一段代码。复制这段代码的uid至next主题的配置文件。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324201532414.png" alt="image-20230324201532414"></p>
</li>
<li><p>配置文件内修改这一段，将uid改成刚刚复制的uid</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">MTAyMC81ODIzMi8zNDY5NQ==</span> <span class="comment">#修改这里！</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>完成，现在打开网页看看，在每篇博文的底下都会有评论区了</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324201821112.png" alt="image-20230324201821112"></p>
</li>
</ol>
<h2 id="为blog添加live2d宠物"><a href="#为blog添加live2d宠物" class="headerlink" title="为blog添加live2d宠物"></a>为blog添加live2d宠物</h2><ol>
<li><p>在blog根目录下，打开git bash here</p>
</li>
<li><p>输入<code>npm install -save hexo-helper-live2d</code></p>
</li>
<li><p>然后点开<strong>hexo的配置文件</strong>，在最后添加这一段代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-</span> <span class="comment">#&lt;你喜欢的模型名字&gt;</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>可以供选择的模型有：</p>
<p>模型名字就是<code>live2d-widget-model-hijiki</code>最后单词hijiki</p>
<blockquote>
<p>live2d-widget-model-chitose</p>
<p>live2d-widget-model-epsilon2_1</p>
<p>live2d-widget-model-gf</p>
<p>live2d-widget-model-haru&#x2F;01 (use npm install –save live2d-widget-model-haru)</p>
<p>live2d-widget-model-haru&#x2F;02 (use npm install –save live2d-widget-model-haru)</p>
<p>live2d-widget-model-haruto</p>
<p>live2d-widget-model-hibiki</p>
<p>live2d-widget-model-hijiki</p>
<p>live2d-widget-model-izumi</p>
<p>live2d-widget-model-koharu</p>
<p>live2d-widget-model-miku</p>
<p>live2d-widget-model-ni-j</p>
<p>live2d-widget-model-nico</p>
<p>live2d-widget-model-nietzsche</p>
<p>live2d-widget-model-nipsilon</p>
<p>live2d-widget-model-nito</p>
<p>live2d-widget-model-shizuku</p>
<p>live2d-widget-model-tororo</p>
<p>live2d-widget-model-tsumiki</p>
<p>live2d-widget-model-unitychan</p>
<p>live2d-widget-model-wanko</p>
<p>live2d-widget-model-z16<br>————————————————</p>
<p>版权声明：本文为CSDN博主「Z小旋」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p>
<p>原文链接：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p>
</blockquote>
</li>
<li><ul>
<li>在站点目录下建文件夹<code>live2d_models</code>，</li>
<li>-再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字</code>&gt;,如我要选择wanko，就新建一个名叫wanko的文件夹</li>
<li>再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：<code>&lt;你喜欢的模型名字&gt;.model.json</code>,如我要选择wanko，就新建一个<code>wanko.model.json</code>的文件。</li>
</ul>
</li>
<li><p>如果要预览效果，可以去<a href="https://blog.csdn.net/as480133937/article/details/100138838">这个网站</a>查看，里面也有更多详细的教程。</p>
</li>
<li><p>选择好后，还是使用<code>git bash</code>命令，输入<code>npm install --save live2d-widget-model-&lt;你喜欢的模型名字&gt;</code>即可</p>
</li>
<li><p>安装完成，进入博客看看效果吧！</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230325103925803.png" alt="image-20230325103925803"></p>
</li>
</ol>
<h2 id="修改muse主题的颜色"><a href="#修改muse主题的颜色" class="headerlink" title="修改muse主题的颜色"></a>修改muse主题的颜色</h2><p>网络上这部分内容讲的比较少，这部分内容大部分由本人摸索出来，由于我的基础比较薄弱，可能有一些地方没办法用专业术语表达，如果有不对的地方，请指正。</p>
<h3 id="建议使用vscode来查看源码"><a href="#建议使用vscode来查看源码" class="headerlink" title="建议使用vscode来查看源码"></a>建议使用vscode来查看源码</h3><p>vscode是微软出的一款功能强大的编辑器，安装部分这里就不细说，可以前往<a href="https://code.visualstudio.com/">vscode官网下载安装</a>。</p>
<h3 id="next主题的样式位置"><a href="#next主题的样式位置" class="headerlink" title="next主题的样式位置"></a>next主题的样式位置</h3><p>使用vscode将<code>\themes\next\source\css</code>添加至工作区，可以看到该文件夹底下有<code>_common</code>,<code>_schemes</code>,<code>_variables</code>三个文件夹以及三个.styl文件，以下是这些文件的大概用途：</p>
<ol>
<li><code>_common</code>:这个是存放几个主题共用的一些样式，在这里修改了样式，切换主题后也会保留。</li>
<li><code>_schemes</code>这里是四个主题各自私有的一些样式，包括各个主题不共用的结构的样式，在这里修改了样式，只有切换到这个主题才能看得出来。</li>
<li><code>_variables</code>这里面主要存放了一些公用的颜色，以及不同主题针对公共颜色、尺寸的一些微调（这里我也没有太明白，只知道这里主要是调颜色用的）</li>
<li>剩下的三个.styl文件主要是用于复用一些sass写的动画，样式等，如果你不知道什么是sass，那么可以不用理会</li>
</ol>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230325232059556.png" alt="image-20230325232059556"></p>
<h3 id="muse主题添加自己喜欢的颜色"><a href="#muse主题添加自己喜欢的颜色" class="headerlink" title="muse主题添加自己喜欢的颜色"></a>muse主题添加自己喜欢的颜色</h3><p>我们这里打开<code>themes\next\source\css\_variables\base.styl</code>，上一节有提到这里主要是调整公共颜色，那么我们可以去选择一些我们喜欢的颜色添加进去，这里我推荐<a href="https://tool.chinaz.com/tools/pagecolor.aspx">网页颜色选择器 - 站长工具 (chinaz.com)</a>，这个网站提供了一些常用的颜色并有预览效果。对于一个简约风博客够用了。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230325233757196.png" alt="image-20230325233757196"></p>
<p>打开后我们会看到颜色有中文名和代码，例如我想用粉红色（pink），就对应记录下粉红色的代码#FF0CB。</p>
<p>然后我们回到<code>base.styl</code>,可以看到开头就有一大堆的颜色</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">Colors</span></span><br><span class="line"><span class="string">//</span> <span class="string">colors</span> <span class="string">for</span> <span class="string">use</span> <span class="string">across</span> <span class="string">theme.</span></span><br><span class="line"><span class="string">//</span> <span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">$whitesmoke</span>   <span class="string">=</span> <span class="comment">#f5f5f5;</span></span><br><span class="line"><span class="string">$gainsboro</span>    <span class="string">=</span> <span class="comment">#eee;</span></span><br><span class="line"><span class="string">$grey-lighter</span> <span class="string">=</span> <span class="comment">#ddd;</span></span><br><span class="line"><span class="string">$grey-light</span>   <span class="string">=</span> <span class="comment">#ccc;</span></span><br><span class="line"><span class="string">$grey</span>         <span class="string">=</span> <span class="comment">#bbb;</span></span><br><span class="line"><span class="string">$grey-dark</span>    <span class="string">=</span> <span class="comment">#999;</span></span><br><span class="line"><span class="string">$grey-dim</span>     <span class="string">=</span> <span class="comment">#666;</span></span><br><span class="line"><span class="string">$black-light</span>  <span class="string">=</span> <span class="comment">#555;</span></span><br><span class="line"><span class="string">$black-dim</span>    <span class="string">=</span> <span class="comment">#333;</span></span><br><span class="line"><span class="string">$black-deep</span>   <span class="string">=</span> <span class="comment">#222;</span></span><br><span class="line"><span class="string">$red</span>          <span class="string">=</span> <span class="comment">#ff2a2a;</span></span><br><span class="line"><span class="string">$blue-bright</span>  <span class="string">=</span> <span class="comment">#87daff;</span></span><br><span class="line"><span class="string">$blue</span>         <span class="string">=</span> <span class="comment">#0684bd;</span></span><br><span class="line"><span class="string">$blue-deep</span>    <span class="string">=</span> <span class="comment">#262a30;</span></span><br><span class="line"><span class="string">$orange</span>       <span class="string">=</span> <span class="comment">#fc6423;</span></span><br><span class="line"><span class="string">$royolblue</span>    <span class="string">=</span> <span class="comment">#4169E1; //我在这里增加了三个颜色</span></span><br><span class="line"><span class="string">$aliceblue</span>    <span class="string">=</span> <span class="comment">#F0F8FF;</span></span><br><span class="line"><span class="string">$steelblue</span>    <span class="string">=</span> <span class="comment">#4682B4;</span></span><br></pre></td></tr></table></figure>

<p><code>$whitesmoke</code>这里是sass语法里指定一个参数的命令，添加新的颜色就复制粘贴一下在最后面，如上面我的代码一样。</p>
<h3 id="muse主题修改各个位置的颜色"><a href="#muse主题修改各个位置的颜色" class="headerlink" title="muse主题修改各个位置的颜色"></a>muse主题修改各个位置的颜色</h3><p>和上节一样，我们在<code>base.styl</code>下面可以看到有作者写的一些注释，这个时候我们就需要拿出<a href="https://translate.google.com/?hl=zh-CN">Google 翻译</a>，如果您是资深的前端开发工程师，请退出此篇博客。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scaffolding //翻译：整体框架</span></span><br><span class="line"><span class="comment">// Settings for some of the most global styles. //翻译：此处是设置一些最全局的样式</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="comment">// Global text color on &lt;body&gt; //翻译：全局&lt;body&gt;标签里的字体颜色</span></span><br><span class="line"><span class="variable">$text-color</span>                   = <span class="variable">$black-light</span>;</span><br><span class="line"><span class="variable">$text-color-dark</span>              = <span class="variable">$grey-light</span>;<span class="comment">//dark是指夜间模式，有同学想做夜间模式适配的可以研究</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Global link color.</span></span><br><span class="line"><span class="variable">$link-color</span>                   = <span class="variable">$black-light</span>;</span><br><span class="line"><span class="variable">$link-color-dark</span>              = <span class="variable">$grey-light</span>;</span><br><span class="line"><span class="variable">$link-hover-color</span>             = <span class="variable">$royolblue</span>;</span><br><span class="line"><span class="variable">$link-hover-color-dark</span>        = <span class="variable">$gainsboro</span>;</span><br><span class="line"><span class="variable">$link-decoration-color</span>        = <span class="variable">$grey-dark</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$blockquote-color</span>             = <span class="variable">$grey-dim</span>;</span><br><span class="line"><span class="variable">$blockquote-color-dark</span>        = <span class="variable">$grey</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Global border color.</span></span><br><span class="line"><span class="variable">$border-color</span>                 = <span class="variable">$grey-light</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Background color for &lt;body&gt;</span></span><br><span class="line"><span class="comment">//例如这里我想修改bg-color（background-color),我只需要修改相应的定义就可以了</span></span><br><span class="line"><span class="variable">$body-bg-color</span>                = <span class="variable">$aliceblue</span>; <span class="comment">//这里我已经将原本的颜色改成了我之前添加的aliceblue</span></span><br><span class="line"><span class="variable">$body-bg-color-dark</span>           = <span class="selector-id">#282828</span>;</span><br><span class="line"><span class="variable">$content-bg-color</span>             = white; <span class="comment">//也可以和作者一样直接使用颜色名，或者颜色编号来定义，但是不推荐，不利于整体修改。</span></span><br><span class="line"><span class="variable">$content-bg-color-dark</span>        = <span class="variable">$black-dim</span>;</span><br></pre></td></tr></table></figure>



<p>Tips：原本的主题是黑白灰风格，如果我只是简单的想把黑色换成其他颜色，可以直接ctrl+f搜索对应的颜色定义，直接改成你想要的颜色即可</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230326001116137.png" alt="image-20230326001116137"></p>
<p>虽然<code>base.styl</code>提供了很多地方可以修改，但是还有一部分页面的构成部分的颜色不是在这里修改的，如果实在找不到，那么先阅读完下面的章节，我会再介绍一个<strong>笨办法</strong></p>
<h4 id="挑几个经常修改到的样式来举栗子"><a href="#挑几个经常修改到的样式来举栗子" class="headerlink" title="挑几个经常修改到的样式来举栗子"></a>挑几个经常修改到的样式来举栗子</h4><p>我们在修改样式的时候，可以用<code>hexo s</code>命令来本地生成页面动态预览</p>
<ol>
<li><p><code>$body-bg-color</code>这个是修改整个页面的底色，我修改成了aliceblue,效果如下</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230326001731671.png" alt="image-20230326001731671"></p>
</li>
<li><p><code>$btn-default-bg </code>修改的是按钮默认的颜色,我修改成了蓝色</p>
<p><code>$btn-default-hover-color</code>修改的是按钮鼠标悬停时默认的颜色,我修改成了蓝色</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230326002249089.png" alt="image-20230326002249089"></p>
</li>
</ol>
<h3 id="muse主题的侧边栏样式修改"><a href="#muse主题的侧边栏样式修改" class="headerlink" title="muse主题的侧边栏样式修改"></a>muse主题的侧边栏样式修改</h3><p>侧边栏的样式比较特殊，他不是在上一节的文件里修改的，他的文件目录在<code>themes\next\source\css\_common\outline\sidebar</code>里面，打开后可以看到里面有不少.styl文件，这些就是构成侧边栏的“组件”的样式，我们可以用谷歌翻译大致翻译出来对应哪个文件。然后就慢慢尝试即可。</p>
<h4 id="以“修改侧边栏收起展开按钮”举例"><a href="#以“修改侧边栏收起展开按钮”举例" class="headerlink" title="以“修改侧边栏收起展开按钮”举例"></a>以“修改侧边栏收起展开按钮”举例</h4><p>直接打开<code>themes\next\source\css\_common\outline\sidebar\sidebar-toggle.styl</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$royolblue</span>; <span class="comment">//修改他的背景颜色</span></span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">45px</span>; </span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$b2t-position-right</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="variable">$zindex-3</span>;</span><br><span class="line"></span><br><span class="line">  +<span class="built_in">tablet-mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$b2t-position-right-mobile</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="variable">$b2t-opacity-hover</span>;</span><br><span class="line"></span><br><span class="line">    if (!hexo-config(&#x27;sidebar.onmobile&#x27;)) &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar-toggle</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.toggle-line</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$sidebar-highlight</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="推荐按6-3-1的配色配置blog"><a href="#推荐按6-3-1的配色配置blog" class="headerlink" title="推荐按6:3:1的配色配置blog"></a>推荐按6:3:1的配色配置blog</h3><p>最好遵循6:3:1的原则来配置，即主题色占6成，副颜色占3成，剩下1成作为点睛之笔</p>
<p>例如我的blog主题色是aliceblue,副颜色是白色，点睛色是Capri blue，合理的色彩搭配可以更方便自己和别人的阅读，也符合next主题简约大方的内核。</p>
<p>经过修改这些配置文件，我们可以将自己的blog改成自己喜欢的颜色，这里只是基础的依据别人的框架修改，如果想更深度的定制，则需要更多的前端知识，单纯修改背景颜色就只需要看懂background-color这两个单词即可，如果想了解更多css知识，推荐阅读</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS：层叠样式表 | MDN (mozilla.org)</a></p>
<h2 id="为blog文章设置置顶"><a href="#为blog文章设置置顶" class="headerlink" title="为blog文章设置置顶"></a>为blog文章设置置顶</h2><h3 id="卸载原置顶功能的插件，安装新插件"><a href="#卸载原置顶功能的插件，安装新插件" class="headerlink" title="卸载原置顶功能的插件，安装新插件"></a>卸载原置顶功能的插件，安装新插件</h3><p>next主题自带有插件置顶的命令，但是并不好用，所以我们需要先卸载，再重新安装一次别人的插件</p>
<p>同样的，去<strong>hexo根目录下</strong>打开git bash</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line"></span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code> 或者<code>top: 任意数字</code>，比如</p>
<p>如果有多篇文章想置顶，则用<code>top: 任意数字</code>给他们排序，1是最大的。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用next主题调整blog的样式【持续更新】</span><br><span class="line">date: 2023-03-24 20:09:52</span><br><span class="line">categories: [技术]</span><br><span class="line">tags: [博客编写,hexo,next]</span><br><span class="line">top:true</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客编写</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia及axios插件</title>
    <url>/2022/07/10/b46%20Pinia%E3%80%81Axios/</url>
    <content><![CDATA[<h2 id="Pinia、Axios"><a href="#Pinia、Axios" class="headerlink" title="Pinia、Axios"></a>Pinia、Axios<span id="more"></span></h2><h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><h3 id="1-pinia-和-vuex-的对比"><a href="#1-pinia-和-vuex-的对比" class="headerlink" title="1.pinia 和 vuex 的对比"></a>1.pinia 和 vuex 的对比</h3><h4 id="1-1-pinia"><a href="#1-1-pinia" class="headerlink" title="1.1 pinia"></a>1.1 pinia</h4><ul>
<li>pinia 是一个状态管理的库，用于跨组件&#x2F;跨页面共享状态</li>
<li>pinia 能够同时兼容 vue2，vue3；不强制要求使用组合式 API</li>
<li>vue2-&gt;vuex</li>
<li>vue3-&gt;pinia</li>
</ul>
<h4 id="1-2-pinia-和-vuex-的区别"><a href="#1-2-pinia-和-vuex-的区别" class="headerlink" title="1.2 pinia 和 vuex 的区别"></a>1.2 pinia 和 vuex 的区别</h4><ul>
<li>pinia 最初是为了探索下一次 vuex 会是什么样，结合了 vuex5 核心团队讨论的</li>
<li>pinia 取代了 vuex</li>
<li>有更少的仪式感，提供了风格统一的组合式 API<ol>
<li>mutation 不再存在，原先存在是因为 devtools</li>
<li>modules 不再嵌套 ✅</li>
<li>不再有命名空间</li>
<li>更好的 ts 的支持</li>
</ol>
</li>
</ul>
<h3 id="2-pinia-使用"><a href="#2-pinia-使用" class="headerlink" title="2.pinia 使用"></a>2.pinia 使用</h3><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><ul>
<li>pinia 安装: npm install pinia</li>
</ul>
<h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><ul>
<li>vuex 的配置你会的话，pinia 的配置类似</li>
</ul>
<p>.&#x2F;stores&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入创建pinia的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//创建一个pinia</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入pinia</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;./stores&#x27;</span>;</span><br><span class="line"><span class="comment">//use使用</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-Store"><a href="#3-Store" class="headerlink" title="3.Store"></a>3.Store</h3><h4 id="3-1-store-的定义"><a href="#3-1-store-的定义" class="headerlink" title="3.1 store 的定义"></a>3.1 store 的定义</h4><ul>
<li>store 是一个实体，他会存储组件中需要的状态和逻辑，并且每个组件都能读取&#x2F;写入，在你的应用中根据你的需要定义任意个数的 store 来管理状态</li>
<li>三个核心概念：<ul>
<li>state，getters，actions 类似组件的 data，computed，methods；一旦你的 store 被实例化，就可以直接在 store 访问所有你需要的 state，getters，actions。</li>
</ul>
</li>
</ul>
<h4 id="3-2-定义-store"><a href="#3-2-定义-store" class="headerlink" title="3.2 定义 store"></a>3.2 定义 store</h4><p>.&#x2F;stores&#x2F;counter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义store</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//第一个参数是唯一的名称，又叫id</span></span><br><span class="line"><span class="keyword">const</span> useCounter = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounter;</span><br></pre></td></tr></table></figure>

<ul>
<li>store 在被使用之前是不会创建的，你得在组件中通过调用 useXXX 函数来使用 store</li>
</ul>
<h4 id="3-3-使用-store"><a href="#3-3-使用-store" class="headerlink" title="3.3 使用 store"></a>3.3 使用 store</h4><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 在模版和setup中风格统一的 --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; countStore.count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import useCounter from &#x27;./stores/counter&#x27;;</span><br><span class="line">//countStore就是一个store的实例</span><br><span class="line">const countStore = useCounter();</span><br><span class="line">console.log(countStore.count);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：store 获取到以后不要直接解构，会丢失响应式，解决这个问题可以使用 toRefs 但是 pinia 给我们提供了对应的辅助函数 storeToRefs,更推荐使用 storeToRefs，他能明确数据的来源是 store</li>
</ul>
<p>App</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 在模版和setup中风格统一的 --&gt;</span><br><span class="line">    &lt;h2&gt;没解构&#123;&#123; countStore.count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;解构了&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import useCounter from &#x27;./stores/counter&#x27;;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;;</span><br><span class="line">//countStore就是一个store的实例</span><br><span class="line">const countStore = useCounter();</span><br><span class="line">const &#123; count &#125; = storeToRefs(countStore);</span><br><span class="line">// const &#123; count &#125; = countStore;</span><br><span class="line">// const count =1</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-State"><a href="#4-State" class="headerlink" title="4.State"></a>4.State</h3><ul>
<li>操作 state：</li>
</ul>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; name &#125;&#125;--&#123;&#123; age &#125;&#125;--&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;点我修改&lt;/button&gt;</span><br><span class="line">    &lt;!-- &lt;button @click=&quot;changeName&quot;&gt;修改name&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改age&lt;/button&gt; --&gt;</span><br><span class="line">    &lt;button @click=&quot;reset&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import useCounter from &#x27;./stores/counter&#x27;;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;;</span><br><span class="line">const countStore = useCounter();</span><br><span class="line">const &#123; count, name, age &#125; = storeToRefs(countStore);</span><br><span class="line">//直接通过实例修改</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  //一个个的修改太麻烦</span><br><span class="line">  // countStore.count += 1;</span><br><span class="line">  // countStore.name += &#x27;天河阔少&#x27;;</span><br><span class="line">  // countStore.age += 10;</span><br><span class="line">  //提供了一个api，一次修改多个</span><br><span class="line">  countStore.$patch(&#123;</span><br><span class="line">    count: 99,</span><br><span class="line">    name: &#x27;天河阔少&#x27;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">// const changeName = () =&gt; &#123;</span><br><span class="line">//   countStore.name += &#x27;天河阔少&#x27;;</span><br><span class="line">// &#125;;</span><br><span class="line">// const changeAge = () =&gt; &#123;</span><br><span class="line">//   countStore.age += 10;</span><br><span class="line">// &#125;;</span><br><span class="line">//pinia提供的重置api</span><br><span class="line">const reset = () =&gt; &#123;</span><br><span class="line">  countStore.$reset();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-getters"><a href="#5-getters" class="headerlink" title="5.getters"></a>5.getters</h3><p>user.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> useUser = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUser;</span><br></pre></td></tr></table></figure>

<p>counter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义store</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> useUser <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span>;</span><br><span class="line"><span class="comment">//第一个参数是唯一的名称，又叫id</span></span><br><span class="line"><span class="keyword">const</span> useCounter = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">33</span>,</span><br><span class="line">    <span class="attr">friends</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">111</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;沸羊羊&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">112</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;双面龟&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">113</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;黑小虎&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">//翻倍count</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//翻倍并且+1</span></span><br><span class="line">    <span class="comment">//pinia的getters可以很方便的访问到其他getters</span></span><br><span class="line">    <span class="title function_">doubleCountAddOne</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="comment">// return state.count * 2 + 1;</span></span><br><span class="line">      <span class="comment">//this指向当前的store实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//根据id返回friend</span></span><br><span class="line">    <span class="title function_">getFriendById</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="title function_">showMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//使用其他store中的数据</span></span><br><span class="line">      <span class="keyword">const</span> useStore = <span class="title function_">useUser</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;useStore.name&#125;</span>--<span class="subst">$&#123;useStore.age&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounter;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; doubleCount &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; doubleCountAddOne &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; showMsg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import useCounter from &#x27;./stores/counter&#x27;;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;;</span><br><span class="line">const countStore = useCounter();</span><br><span class="line">const &#123; doubleCount, doubleCountAddOne, showMsg &#125; = storeToRefs(countStore);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-Actions"><a href="#6-Actions" class="headerlink" title="6.Actions"></a>6.Actions</h3><ul>
<li>action 相当于组件中的 methods，他非常适合定义业务逻辑，可以在里面进行各种修改的操作，而且 action 本身可以直接异步</li>
<li>计数器：加 减 延迟加 延迟减</li>
</ul>
<p>counter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义store</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useCounter = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">33</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">//定义action</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">      <span class="comment">//和getters一样 actions中的函数的thi  s-&gt;当前的store实例</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> += payload;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">sub</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> -= payload;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addLate</span>(<span class="params">&#123; payload, delay &#125;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span> += payload;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">subLate</span>(<span class="params">&#123; payload, delay &#125;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span> -= payload;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounter;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;piniaAdd(3)&quot;&gt;直接+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sub(3)&quot;&gt;直接-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addLate(&#123; payload: 5, delay: 1000 &#125;)&quot;&gt;延迟+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subLate(&#123; payload: 5, delay: 1000 &#125;)&quot;&gt;延迟-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;++&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import useCounter from &#x27;./stores/counter&#x27;;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;;</span><br><span class="line">const countStore = useCounter();</span><br><span class="line">const &#123; count &#125; = storeToRefs(countStore);</span><br><span class="line">//const &#123;add:add&#125; 前面的add是本来对象里面的，后面的add是我们起的名字，只不过往往都一样就简写</span><br><span class="line">const &#123; add: piniaAdd, sub, addLate, subLate &#125; = countStore;</span><br><span class="line">const add = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;组件本来的方法&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul>
<li>准备工作</li>
<li>axios 官网：<a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></li>
<li>新建一个 db.json 文件，填入如下内容</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alex&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;666&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开终端输入如下命令启动一个后端接口服务</li>
</ul>
<p><code>json-server --w db.json</code></p>
<ul>
<li>终端出现如下界面表示成功，此时可以访问浏览器的 localhost:3000 查看数据</li>
</ul>
<p><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20230706173911206.png" alt="image-20230706173911206"></p>
<p>-axios:ajax i&#x2F;o system 避免每个人对 xml 封装不一致，提供了统一的配置选项</p>
<ul>
<li>简单使用：直接在对应的 script 标签中书写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">// //1.普通使用</span></span><br><span class="line"><span class="comment">// axios.get(&#x27;http://localhost:3000/users&#x27;).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(res);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// //get post  delete patch put</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.async await 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUsers</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//await 直接获取promise的结果</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/users&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">getUsers</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>直接这样使用相当于是用的 axios 默认的实例，默认的实例往往不能满足我们的需要，比如配置基础路径，比如配置超时时间设置，比如请求头中 token(用户认证标识)的设置</p>
</li>
<li><p>配置自己的 axios 实例</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">//实际开发 往往自己创建自己对应的axios实例来使用</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">//根路径</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="comment">//超时时间 1s</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="comment">//请求头的配置</span></span><br><span class="line">  <span class="comment">// x-token的请求头，登录以后放到localStorage/sessionStorage</span></span><br><span class="line">  <span class="comment">// headers: &#123; &#x27;token Beare &#x27;: token &#125;,</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用实例来请求</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>请求和响应的拦截器</li>
<li>请求：在真正发出请求之前我做一些事，比如加上用户认证标识 token 之类的</li>
<li>响应：请求回来了我要做一些处理，</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//请求拦截器的配置(成功的拦截，失败的拦截)</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功的拦截&#x27;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败的拦截&#x27;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//响应拦截器的配置(成功的拦截，失败的拦截)</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应成功的拦截&#x27;</span>, res);</span><br><span class="line">    <span class="comment">//看后端返回的数据解构是怎么样</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应失败的拦截&#x27;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// //使用实例来请求</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>src 下新建一个 services 目录里面新建一个 http.js，填入如下内容</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装了axois，专门用来处理请求</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> http = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//请求拦截器的配置(成功的拦截，失败的拦截)</span></span><br><span class="line">http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//比如要获取登录后缓存起来的token</span></span><br><span class="line">    <span class="keyword">let</span> token = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!!token) &#123;</span><br><span class="line">      <span class="comment">//[]中的名称，看接口文档/问后端</span></span><br><span class="line">      <span class="comment">//常见的token x-token  Authorition</span></span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&#x27;x-token&#x27;</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;请求成功的拦截&#x27;, config);</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;请求失败的拦截&#x27;, err);</span></span><br><span class="line">    <span class="comment">// 给予一定的提示</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//响应拦截器的配置(成功的拦截，失败的拦截)</span></span><br><span class="line">http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;响应成功的拦截&#x27;, res);</span></span><br><span class="line">    <span class="comment">//看后端返回的数据解构是怎么样</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;响应失败的拦截&#x27;, err);</span></span><br><span class="line">    <span class="comment">//想要失败被捕获，手动来一个Promise.reject</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">group</span>(</span><br><span class="line">          <span class="string">`%c【代码<span class="subst">$&#123;resp.status&#125;</span>: <span class="subst">$&#123;resp.data.msg&#125;</span>】`</span>,</span><br><span class="line">          <span class="string">&#x27;color:blue;font-size:15px;&#x27;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">let</span> inputdata = resp.<span class="property">config</span>.<span class="property">data</span></span><br><span class="line">          ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(resp.<span class="property">config</span>.<span class="property">data</span>)</span><br><span class="line">          : <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">let</span> inputparams = resp.<span class="property">config</span>.<span class="property">params</span> ? resp.<span class="property">config</span>.<span class="property">params</span> : <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">`%cPREVIEW:\n`</span>,</span><br><span class="line">          <span class="string">&#x27;color:green;font-weight:bold;font-size:18px&#x27;</span>,</span><br><span class="line">          <span class="string">`Data:`</span>,</span><br><span class="line">          inputdata,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          <span class="string">`Params:`</span>,</span><br><span class="line">          inputparams,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          &#123; <span class="title class_">Method</span>: resp.<span class="property">config</span>.<span class="property">method</span> &#125;,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          &#123; <span class="title class_">Url</span>: resp.<span class="property">config</span>.<span class="property">url</span> &#125;,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          &#123; <span class="title class_">Envir</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> &#125;,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          &#123; <span class="title class_">Type</span>: resp.<span class="property">config</span>.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] &#125;,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          &#123; <span class="attr">msg</span>: resp.<span class="property">data</span>.<span class="property">msg</span> &#125;,</span><br><span class="line">          <span class="string">`\n`</span>,</span><br><span class="line">          &#123; <span class="attr">status</span>: resp.<span class="property">status</span> &#125;,</span><br><span class="line">          <span class="string">`\n`</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">      &#125;)(error.<span class="property">response</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// //使用实例来请求</span></span><br><span class="line"><span class="comment">// http.get(&#x27;/users&#x27;).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(res);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http;</span><br></pre></td></tr></table></figure>

<ul>
<li>api 也应该集中起来管理，所以我们在 services 下面新建一个 api.js 管理请求地址</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置请求的api</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;http://localhost:3000&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> api = &#123;</span><br><span class="line">  <span class="comment">//登录</span></span><br><span class="line">  <span class="attr">login</span>: baseURL + <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">  <span class="comment">//获取所有商品</span></span><br><span class="line">  <span class="attr">list</span>: baseURL + <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">  <span class="comment">//获取所有用户</span></span><br><span class="line">  <span class="attr">users</span>: baseURL + <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">  <span class="comment">// //添加用户</span></span><br><span class="line">  <span class="comment">// users: baseURL + &#x27;/users&#x27;,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是这样使用，每次请求我需要引入两次还要自己组合，所以我们希望将来直接调用一个函数就能请求完成</li>
</ul>
<p>request.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装好的请求函数，方便组件/pinia/vuex直接调用</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span>;</span><br><span class="line"><span class="comment">//获取所有的用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUserApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: api.<span class="property">users</span>,</span><br><span class="line">    <span class="comment">// params</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get请求第二种传递参数方式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getParamsApi</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: api.<span class="property">users</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据id查找某一个用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUserByIdApi</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;api.users&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增一个用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addUserApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: api.<span class="property">users</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除一个用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delUserApi</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;api.users&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改一个用户 patch</span></span><br><span class="line"><span class="comment">//  /users/1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">editUserApi</span>(<span class="params">id, data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;api.users&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;getUsers&quot;&gt;查看所有用户&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addUser&quot;&gt;新增一个用户&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;getUserById(1)&quot;&gt;根据id查找&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;delUser(2)&quot;&gt;删除id为2的用户&lt;/button&gt;</span><br><span class="line">    &lt;button</span><br><span class="line">      @click=&quot;</span><br><span class="line">        editUser(1, &#123;</span><br><span class="line">          name: &#x27;jesscia&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &quot;</span><br><span class="line">    &gt;</span><br><span class="line">      修改id为1的用户</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  getUserApi,</span><br><span class="line">  addUserApi,</span><br><span class="line">  getUserByIdApi,</span><br><span class="line">  delUserApi,</span><br><span class="line">  editUserApi,</span><br><span class="line">&#125; from &#x27;@/services/request&#x27;;</span><br><span class="line">//修改id为1的用户</span><br><span class="line">const editUser = async (id, data) =&gt; &#123;</span><br><span class="line">  let res = await editUserApi(id, data);</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;;</span><br><span class="line">//根据id删除一个用户</span><br><span class="line">const delUser = async (id) =&gt; &#123;</span><br><span class="line">  let res = await delUserApi(id);</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;;</span><br><span class="line">//根据id查找某一个用户</span><br><span class="line">const getUserById = async (id) =&gt; &#123;</span><br><span class="line">  let res = await getUserByIdApi(id);</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;;</span><br><span class="line">//新增一个用户</span><br><span class="line">const addUser = async () =&gt; &#123;</span><br><span class="line">  let res = await addUserApi(&#123;</span><br><span class="line">    username: &#x27;天河阔少&#x27;,</span><br><span class="line">    password: &#x27;444444&#x27;,</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;;</span><br><span class="line">//获取所有用户</span><br><span class="line">const getUsers = async () =&gt; &#123;</span><br><span class="line">  let res = await getUserApi();</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>s</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router使用</title>
    <url>/2022/07/10/b47%20vue-router/</url>
    <content><![CDATA[<h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><span id="more"></span>

<h3 id="1-认识路由"><a href="#1-认识路由" class="headerlink" title="1.认识路由"></a>1.认识路由</h3><h4 id="1-1-路由"><a href="#1-1-路由" class="headerlink" title="1.1 路由"></a>1.1 路由</h4><ul>
<li>路由其实网络工程的一个词语，在架构一个网络的时候重要的两个东西就是路由器和交换机，路由器最主要的工作维护一个映射表，映射表决定数据的流向。</li>
<li>所谓的路由就是一个映射表</li>
<li>前端路由就是一个组件，后端路由就是一个函数</li>
</ul>
<h4 id="1-2-web-的路由发展"><a href="#1-2-web-的路由发展" class="headerlink" title="1.2 web 的路由发展"></a>1.2 web 的路由发展</h4><ul>
<li>后端路由</li>
</ul>
<p><img src="https://img-1317399399.cos.ap-guangzhou.myqcloud.com//imgimage-20230707171829184.png" alt="image-20230707171829184"></p>
<ul>
<li>前后端分离<ul>
<li>前端负责渲染&#x2F;展示，后端负责提供接口。</li>
<li>前端重交互，后端重逻辑</li>
</ul>
</li>
<li>单页富应用（spa）</li>
<li>只是在前后端分离的基础上加了一层前端路由，交给前端开发来维护映射表。核心：改变 url，页面不会整体重新加载。</li>
</ul>
<p><img src="https://img-1317399399.cos.ap-guangzhou.myqcloud.com//imgimage-20230707171810469.png" alt="image-20230707171810469"></p>
<h4 id="1-3-URL-的-hash-和-HTML5-的-history"><a href="#1-3-URL-的-hash-和-HTML5-的-history" class="headerlink" title="1.3 URL 的 hash 和 HTML5 的 history"></a>1.3 URL 的 hash 和 HTML5 的 history</h4><h5 id="1-3-1-hash"><a href="#1-3-1-hash" class="headerlink" title="1.3.1 hash"></a>1.3.1 hash</h5><ul>
<li>url 的 hash 就是锚点(井号#)，本质上改变 window 的 location.href 的属性。</li>
</ul>
<p>hash 的原理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;router-view&quot;</span>&gt;</span>路由展示区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> routerViewEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.router-view&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听你页面的hash的变化--hashchange</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span> (location.<span class="property">hash</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;#/home&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">        routerViewEl.<span class="property">innerHTML</span> = <span class="string">&#x27;home&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;#/about&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">        routerViewEl.<span class="property">innerHTML</span> = <span class="string">&#x27;about&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">        routerViewEl.<span class="property">innerHTML</span> = <span class="string">&#x27;default&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>好处：兼容性强，ie 都可以用</li>
<li>缺点：有点丑多了一个#，显得不太像一个真实的路径</li>
</ul>
<h5 id="1-3-2-history"><a href="#1-3-2-history" class="headerlink" title="1.3.2 history"></a>1.3.2 history</h5><ul>
<li>是 html5 新增的，go，forward，back，reaplceState 替换原有路径，pushState 压入新的路径，popState 回退</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;router-view&quot;</span>&gt;</span>路由展示区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> routerViewEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.router-view&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取所有的a标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> aEls = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">const</span> aEl <span class="keyword">of</span> aEls) &#123;</span></span><br><span class="line"><span class="language-javascript">    aEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> href = aEl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, href);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">historyChange</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">historyChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//映射表在这里维护 路径的名称</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span> (location.<span class="property">pathname</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;/home&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">        routerViewEl.<span class="property">innerHTML</span> = <span class="string">&#x27;home&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;/about&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">        routerViewEl.<span class="property">innerHTML</span> = <span class="string">&#x27;about&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Vue-Router-基本使用"><a href="#2-Vue-Router-基本使用" class="headerlink" title="2.Vue-Router 基本使用"></a>2.Vue-Router 基本使用</h3><h4 id="2-1-认识"><a href="#2-1-认识" class="headerlink" title="2.1 认识"></a>2.1 认识</h4><ul>
<li>三大框架，都有自己的路由的实现</li>
<li>Angular-ngRouter</li>
<li>React-ReactRouter</li>
<li>Vue VueRouter 能够与我们的 vue 深度集成，让 Vue 构建 SPA 变得非常的容易</li>
<li>vue-router 基于路由和组件的<ul>
<li>路由用户设定访问的路径，router 将路径和组件映射起来</li>
</ul>
</li>
</ul>
<h4 id="2-2-使用步骤"><a href="#2-2-使用步骤" class="headerlink" title="2.2 使用步骤"></a>2.2 使用步骤</h4><ul>
<li>安装：npm install vue-router</li>
<li>使用:<ul>
<li>第一步:创建需要映射的组件(页面组件&#x2F;路由组件)</li>
<li>第二步:通过 createRouter 创建路由对象(router)，并且传入 routes 和 history 模式<ul>
<li>routes 映射表，配置 path 和组件的映射关系</li>
<li>istory 用于指定路由的模式是 hash 还是 history</li>
</ul>
</li>
<li>第三步：使用 app 注册路由对象（use 方法</li>
<li>第四步：使用路由，通过<router-link>跳转 <router-view>展示</li>
</ul>
</li>
</ul>
<h4 id="2-3-默认路径"><a href="#2-3-默认路径" class="headerlink" title="2.3 默认路径"></a>2.3 默认路径</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//默认根路径 /匹配到首页</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">// 重定向 将根路径 / 匹配到/home</span></span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="2-4-router-link-的属性"><a href="#2-4-router-link-的属性" class="headerlink" title="2.4 router-link 的属性"></a>2.4 router-link 的属性</h4><ul>
<li>to:可以是字符串，也可以是对象，实际开发一般字符串</li>
<li>replace：相当于调用 router.replace 而不是 router.push，所以会没有历史记录</li>
<li>router-link-active:默认激活的路由的类名，可以写一些样式</li>
<li>active-class&#x3D;”类名”：不想用默认的那么长的类名的时候，自己指定激活的类名</li>
</ul>
<h3 id="3-路由懒加载"><a href="#3-路由懒加载" class="headerlink" title="3.路由懒加载"></a>3.路由懒加载</h3><ul>
<li>因为 component 可以传入一个组件，也可以接受一个函数，该函数需要返回一个 promise 才可以；import()函数返回一个 promise</li>
</ul>
<h3 id="4-路由的其他属性"><a href="#4-路由的其他属性" class="headerlink" title="4.路由的其他属性"></a>4.路由的其他属性</h3><ul>
<li>name 属性<ul>
<li>记录路由的独一无二的名字，在后面的编程式路由导航中用到</li>
</ul>
</li>
<li>meta 属性<ul>
<li>自定义数据，结合业务需要使用，鉴权：meta+导航守卫</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">     <span class="comment">//path就是路径，component就是你要展示的路由组件</span></span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">     <span class="attr">meta</span>: &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">       <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//实际开发的路由懒加载的写法</span></span><br><span class="line">     <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Home.vue&#x27;</span>),</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="5-动态路由和嵌套路由"><a href="#5-动态路由和嵌套路由" class="headerlink" title="5.动态路由和嵌套路由"></a>5.动态路由和嵌套路由</h3><h4 id="5-1-动态路由"><a href="#5-1-动态路由" class="headerlink" title="5.1 动态路由"></a>5.1 动态路由</h4><ul>
<li>路径参数的传递和使用</li>
<li>传递</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">     <span class="comment">//路径参数  xxx.id</span></span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">     <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/User.vue&#x27;</span>),</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>获取</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;用户页面&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 模版中使用 --&gt;</span><br><span class="line">    &lt;h2&gt;用户的id:&#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;根据用的id去请求对应的用户的信息，这个时候路由跳转的时候就得携带参数&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//如果你在optionsAPI里面想要获取</span><br><span class="line">//this.$route.params.xxx</span><br><span class="line">//setup中使用，我们需要利用官方提供的hook</span><br><span class="line">import &#123; useRoute, onBeforeRouteUpdate &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const route = useRoute();</span><br><span class="line">// console.log(route.params.id);</span><br><span class="line"></span><br><span class="line">//了解  生命周期==钩子</span><br><span class="line">onBeforeRouteUpdate((to, from) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;from&#x27;, from.params.id);</span><br><span class="line">  console.log(&#x27;to&#x27;, to.params.id);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-NotFound"><a href="#5-2-NotFound" class="headerlink" title="5.2 NotFound"></a>5.2 NotFound</h4><ul>
<li>对于没有匹配到的路由，我们往往会匹配到一个固定的页面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// abc aaa zzzz</span></span><br><span class="line">  <span class="comment">//*有区别， 区别在于是否解析/</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/NotFound.vue&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>NotFound.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">      您访问的路径</span><br><span class="line">      &lt;span&gt;&#123;&#123; $route.params.pathMatch &#125;&#125;&lt;/span&gt;</span><br><span class="line">      有错误</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">span &#123;</span><br><span class="line">  font-size: 50px;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-嵌套路由"><a href="#5-3-嵌套路由" class="headerlink" title="5.3 嵌套路由"></a>5.3 嵌套路由</h4><ul>
<li>上面写过的 Home，About，User 都属于第一层的路由，实际上路由情况往往更复杂，某些页面会有对应的子页面，这个时候我们就需要使用嵌套路由</li>
<li>在 children 中配置，具体规则写法和 routes 的数组一致，注意子路由填写 path 时不要加&#x2F;即可</li>
</ul>
<h3 id="6-编程式路由导航"><a href="#6-编程式路由导航" class="headerlink" title="6.编程式路由导航"></a>6.编程式路由导航</h3><ul>
<li>用 js 来控制路由跳转</li>
</ul>
<h4 id="6-1-代码控制页面跳转"><a href="#6-1-代码控制页面跳转" class="headerlink" title="6.1 代码控制页面跳转"></a>6.1 代码控制页面跳转</h4><ul>
<li>在 option 中使用 this.$router.push</li>
<li>在 setup 我们要先调用 vue-router 提供的 useRouter 的 hook，获取到路由器的实例然后操作</li>
</ul>
<h4 id="6-2-路由传参"><a href="#6-2-路由传参" class="headerlink" title="6.2 路由传参"></a>6.2 路由传参</h4><ol>
<li>动态路由的&#x2F;:id</li>
<li>query 方式</li>
</ol>
<ul>
<li>在 push 或者其他跳转页面的操作中添加你要的参数</li>
</ul>
<h4 id="6-3-其他操作路由的方法"><a href="#6-3-其他操作路由的方法" class="headerlink" title="6.3 其他操作路由的方法"></a>6.3 其他操作路由的方法</h4><ul>
<li>replace：模版中配置，router-link 上添加一个 replace 属性即可；编程式路由导航：router.replace({})传递参数写法和 push 一样</li>
<li>go：<ul>
<li>router.go(1) 前进一个页面</li>
<li>router.go(-1)后退一个页面</li>
<li>history.back()相当于 go（-1）</li>
<li>history.forward()相当于 go(1)</li>
</ul>
</li>
</ul>
<h3 id="7-动态管理路由"><a href="#7-动态管理路由" class="headerlink" title="7.动态管理路由"></a>7.动态管理路由</h3><h4 id="7-1-动态添加路由"><a href="#7-1-动态添加路由" class="headerlink" title="7.1 动态添加路由"></a>7.1 动态添加路由</h4><p><img src="https://img-1317399399.cos.ap-guangzhou.myqcloud.com//imgimage-20230707171735718.png" alt="image-20230707171735718"></p>
<ul>
<li>addRoute 函数来动态添加路由</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isAdmin = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (isAdmin) &#123;</span><br><span class="line">  <span class="comment">//添加对应的路由进去</span></span><br><span class="line">  <span class="comment">//一级路由</span></span><br><span class="line">  router.<span class="title function_">addRoute</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Admin.vue&#x27;</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//添加homevip作为home的子路由</span></span><br><span class="line">  router.<span class="title function_">addRoute</span>(<span class="string">&#x27;home&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;vip&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/HomeVip.vue&#x27;</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-路由导航守卫"><a href="#8-路由导航守卫" class="headerlink" title="8.路由导航守卫"></a>8.路由导航守卫</h3><h4 id="8-1-基本使用"><a href="#8-1-基本使用" class="headerlink" title="8.1 基本使用"></a>8.1 基本使用</h4><ul>
<li><p>vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫路由</p>
</li>
<li><p>全局前置守卫 beforeEach 是在进入对应的页面之前触发</p>
</li>
<li><p>它有两个参数:</p>
<ul>
<li>to 即将进入的路由</li>
<li>from 即将离开的那个路由</li>
</ul>
</li>
<li><p>它有返回值:</p>
<ul>
<li>false：取消导航</li>
<li>返回对应的路由地址常见的是返回到登录页 “&#x2F;login” {path:”&#x2F;login”}</li>
<li>第三个参数:next(不推荐使用)<ul>
<li>意义不明确，而且会调用多次</li>
</ul>
</li>
</ul>
</li>
<li><p>登录的案例:有一个订单页面 Order，有一个 Login 登录页面</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//配合meta使用</span></span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requireAuth</span> &amp;&amp; !token) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// //不管你去到那个页面你都得跳到登录</span></span><br><span class="line">  <span class="comment">// //useRoute  route</span></span><br><span class="line">  <span class="comment">// // console.log(to);</span></span><br><span class="line">  <span class="comment">// //如果访问的页面不是登录页</span></span><br><span class="line">  <span class="comment">// if (to.path !== &#x27;/login&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//   //都跳到登录页</span></span><br><span class="line">  <span class="comment">//   return &#x27;/login&#x27;;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// //进入到某些页面才去登录页 order</span></span><br><span class="line">  <span class="comment">// const token = localStorage.getItem(&#x27;token&#x27;);</span></span><br><span class="line">  <span class="comment">// if (to.path === &#x27;/order&#x27; &amp;&amp; !token) &#123;</span></span><br><span class="line">  <span class="comment">//   return &#x27;/login&#x27;;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>其他的守卫：</li>
<li>全局：<ul>
<li>router.beforeEach 全局前置守卫</li>
<li>router.beforeResolve 全局解析守卫</li>
<li>router.afterEach 全局后置守卫</li>
</ul>
</li>
<li>组件内的：<ul>
<li>beforeRouterEnter 进入前</li>
<li>beforeRouteUpdate 更新前</li>
<li>beforeRouteLeave 离开前</li>
</ul>
</li>
<li>路由的独享守卫<ul>
<li>直接在映射表里书写</li>
<li>beforeEnter</li>
</ul>
</li>
</ul>
<h4 id="8-2-路由的解析流程"><a href="#8-2-路由的解析流程" class="headerlink" title="8.2 路由的解析流程"></a>8.2 路由的解析流程</h4><ul>
<li>home-&gt;about</li>
</ul>
<ol>
<li>beforeRouteLeave 离开 home 之前</li>
<li>调用 beforeEach</li>
<li>进入到对应的路由</li>
<li>如果有重用的组件就会调用 beforeRouteUpdate user&#x2F;123-&gt;user&#x2F;321</li>
<li>在映射表里面调用对应 beforeEnter</li>
<li>解析异步的路由组件()&#x3D;&gt;import(‘about 的路径’)</li>
<li>beforeRouteEnter 进入 about 之前</li>
<li>调用全局的 beforeResolve 在跳转之前</li>
<li>进行导航跳转</li>
<li>afterEach</li>
<li>触发 dom 更新</li>
<li>调用 next 的回调</li>
</ol>
<h4 id="8-3-前端产品分类"><a href="#8-3-前端产品分类" class="headerlink" title="8.3 前端产品分类"></a>8.3 前端产品分类</h4><p><img src="https://img-1317399399.cos.ap-guangzhou.myqcloud.com//imgimage-20230707171711300.png" alt="image-20230707171711300"></p>
<h4 id="8-4-vite"><a href="#8-4-vite" class="headerlink" title="8.4 vite"></a>8.4 vite</h4><ul>
<li>目前我们配置了 vuex&#x2F;pinia axios vue-router，真实开发</li>
<li>自己配一个有 pinia+vue-router 的预设</li>
<li>创建项目的时候选择你需要的库，他会自动帮我们配置好</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用腾讯云cos实现前端性能监控以及配合picgo实现图床功能</title>
    <url>/2022/06/28/b02%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91cos%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%BB%A5%E5%8F%8A%E9%85%8D%E5%90%88picgo%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>这篇文章花费0元，复现时间约2小时（应该）<span id="more"></span></p>
<h2 id="配置储存桶及上传网站"><a href="#配置储存桶及上传网站" class="headerlink" title="配置储存桶及上传网站"></a>配置储存桶及上传网站</h2><h3 id="第一步：注册"><a href="#第一步：注册" class="headerlink" title="第一步：注册"></a>第一步：注册</h3><p>首先登录腾讯云网站，然后用微信登录，登录后可能需要实名制，按提示实名制登录。</p>
<h3 id="第二步：打开控制台"><a href="#第二步：打开控制台" class="headerlink" title="第二步：打开控制台"></a>第二步：打开控制台</h3><ol>
<li>按图提示打开控制台，打开控制台后搜索“对象存储”，点进搜索出来的“控制台入口-对象存储”进入对象存储控制台。</li>
</ol>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/20230324152150.png"></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/20230324152840.png"></p>
<ol start="2">
<li>点击储存桶列表，点击新建储存桶</li>
</ol>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/20230324153611.png"><br>3. “访问权限”建议采用公有读私有写，其余都是默认，然后如上面的图片所示，你就会拥有一个储存桶<br><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/20230324153738.png"></p>
<ol start="4">
<li>留意一下储存桶名称以及所属地域，后续有用。</li>
</ol>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324155557186.png" alt="image-20230324155557186"></p>
<h3 id="第三步：配置储存桶"><a href="#第三步：配置储存桶" class="headerlink" title="第三步：配置储存桶"></a>第三步：配置储存桶</h3><p>上面的步骤后，我们就拥有了一个储存桶，点击配置管理，进入储存桶管理界面，<strong>左边的导航栏</strong>可以看到”文件列表””基础配置“两栏</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324160140954.png" alt="image-20230324160140954"></p>
<h4 id="打开文件列表，上传文件"><a href="#打开文件列表，上传文件" class="headerlink" title="打开文件列表，上传文件"></a>打开文件列表，上传文件</h4><p>我们的项目文件通常会包括css,sass,img,以及各个html页面。在这里一次性打包上去</p>
<p><em><strong>注意</strong></em>：</p>
<ul>
<li>上传文件后内部文件夹的关系，例如将项目打包成一个大文件夹上传，html文件中引用css使用了.&#x2F;  表示平级，上传后会导致引用的路径出错（外包文件夹导致相对路径有变）</li>
<li>解决方法：统一项目编写时文件引用的路径，如果使用了平级路径，则不要外包文件夹</li>
<li>思考上传后的相对路径！！</li>
</ul>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324160815918.png" alt="image-20230324160815918"></p>
<h4 id="配置静态网站"><a href="#配置静态网站" class="headerlink" title="配置静态网站"></a>配置静态网站</h4><p>点击基础配置-静态网站，默认“当前状态”是关闭的，我们把它打开</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324161918091.png" alt="image-20230324161918091"></p>
<p>打开后就有如下界面：</p>
<ul>
<li>红色框框里的链接代表你的储存桶的域名，可以在任何设备通过这个链接访问你的储存桶</li>
<li>蓝色框框里的需要你填一个索引文档的路径，这里是填你<em><strong>上一步上传的文件</strong></em>里的首页，建议采用你想<em><strong>展示的首页</strong></em>的相对路径填入，这样通过链接访问你的储存桶就会第一时间打开这个<em><strong>展示的首页</strong></em></li>
<li>一定要注意<em><strong>相对路径</strong></em>！！</li>
<li>配置成功后复制红色框框里的链接到浏览器，成功的话就会显示你的主页。其他人也可以通过你的这个链接来访问你的主页。</li>
<li>如果设置后提示404或者dns错误，或者是index没有样式，多半是上面提到的<em><strong>引入路径</strong></em>的问题。仔细检查。</li>
</ul>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324162218939.png" alt="image-20230324162218939"></p>
<p>这时候你的储存桶就已经配置完毕了，并且成功配置了一个域名给你的网站。</p>
<h2 id="使用前端性能监控页面性能"><a href="#使用前端性能监控页面性能" class="headerlink" title="使用前端性能监控页面性能"></a>使用前端性能监控页面性能</h2><h3 id="打开前端性能监控控制台及购买"><a href="#打开前端性能监控控制台及购买" class="headerlink" title="打开前端性能监控控制台及购买"></a>打开前端性能监控控制台及购买</h3><p>同上，在控制台页面搜索“前端性能监控”，并进入</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324163523307.png" alt="image-20230324163523307"></p>
<p>然后在数据总览页面点击应用接入</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324163804692.png" alt="image-20230324163804692"></p>
<p>按提示输入各种信息，红框处建议填*略过检查。首次应用接入需要点击蓝色框框的链接去创建一个业务系统。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324163942616.png" alt="image-20230324163942616"></p>
<p>创建业务系统，如果人在国内就选择广州，提示是34元&#x2F;百万条，但是新用户<em><strong>点击购买后有50万条&#x2F;月</strong></em>的优惠，持续六个月，四舍五入等于白嫖。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324164140591.png" alt="image-20230324164140591"></p>
<p>领取或购买后就可以回到刚刚的页面，选择刚刚创建的业务系统</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324164421897.png" alt="image-20230324164421897"></p>
<p>然后点击接入！接入后会有一段js代码，复制他，粘贴到你希望监控性能的网站的header里。第一步我们上传了网站并绑定了腾讯云的子域名，我就复制到这个index里面，</p>
<ul>
<li>复制完了之后要<em><strong>重新上传</strong></em></li>
<li>重新上传可以只传有修改的文件，同名称的会自动覆盖。</li>
</ul>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324164700237.png" alt="image-20230324164700237"></p>
<p>重新上传后再回到性能监控的主页，就会发现多了一个监视窗口。这个时候我们通过储存桶里的链接访问几次网站，稍等一会就会有数据了。点击图表按钮，则会到更详细的监控页面</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324165114674.png" alt="image-20230324165114674"></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324165317646.png" alt="image-20230324165317646"></p>
<p>但是要注意访问流量的消耗，留意之前我们免费领取的流量，如果访问的人数超出了流量，则会产生费用。</p>
<h2 id="picgo图床功能"><a href="#picgo图床功能" class="headerlink" title="picgo图床功能"></a>picgo图床功能</h2><h3 id="picgo功能及配置"><a href="#picgo功能及配置" class="headerlink" title="picgo功能及配置"></a>picgo功能及配置</h3><p>picgo可以很方便的配合typora输出笔记，他可以将图片转化为在线链接插入到md文档中，本篇blog也是采用这种方式编写。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324165819377.png" alt="image-20230324165819377"></p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E8%85%BE%E8%AE%AF%E4%BA%91cos">配置手册 | PicGo</a></p>
<p>具体可以看官方文档配置picgo</p>
<h4 id="typora配合设置"><a href="#typora配合设置" class="headerlink" title="typora配合设置"></a>typora配合设置</h4><ol>
<li><p>打开文件-偏好设置</p>
</li>
<li><p>选择图片选项，按图配置，pico路径可以直接选择桌面的快捷方式<img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230324170023355.png" alt="image-20230324170023355"></p>
</li>
<li><p>配置完成后，验证图片上传选项测试，会有成功提示</p>
</li>
<li><p>配合<a href="https://www.snipaste.com/">snipaste截图工具</a>来截图，复制后直接粘贴到typora上，就会直接转化为在线图床链接了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>腾讯云</tag>
        <tag>图床应用</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex状态管理工具</title>
    <url>/2022/06/27/b45%20Vuex/</url>
    <content><![CDATA[<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex<span id="more"></span></h2><h3 id="1-状态管理"><a href="#1-状态管理" class="headerlink" title="1.状态管理"></a>1.状态管理</h3><h4 id="1-1-什么是状态管理"><a href="#1-1-什么是状态管理" class="headerlink" title="1.1 什么是状态管理"></a>1.1 什么是状态管理</h4><ul>
<li>在开发中，我们的应用程序需要处理各种数据，这些数据需要保存在我们程序中的某一个位置，对于这些数据的管理就叫做状态管理</li>
<li>当我们遇到多组件共享状态时，单向数据流的特点很容易被破坏，多个视图依赖于同一个状态；来自不同视图的行为会修改同一个状态。之前是通过 props&#x2F;emits&#x2F; mitt 库 provide&#x2F;inject 来共享状态，但是对于复杂的状态管理来说往往是一个噩梦，比如兄弟组件如何共享？</li>
</ul>
<h4 id="1-2-vuex-的状态管理"><a href="#1-2-vuex-的状态管理" class="headerlink" title="1.2 vuex 的状态管理"></a>1.2 vuex 的状态管理</h4><ul>
<li>集中式管理，组件内部的状态抽离出来，以一个全局的单例来管理。仪式感比较强，他会通过一系列强制的规则来约束你，使得状态维护起来更加的容易。</li>
</ul>
<p><img src="https://img-1317399399.cos.ap-guangzhou.myqcloud.com//imgimage-20230706154235428.png" alt="image-20230706154235428"></p>
<ul>
<li>State Getters Mutation Action Module</li>
</ul>
<h3 id="2-Vuex-的基本使用"><a href="#2-Vuex-的基本使用" class="headerlink" title="2.Vuex 的基本使用"></a>2.Vuex 的基本使用</h3><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><ul>
<li>安装：npm install vuex</li>
<li>vue2 得安装 3.x 版本 npm install <a href="mailto:&#118;&#x75;&#101;&#120;&#x40;&#x33;&#x2e;&#x78;">&#118;&#x75;&#101;&#120;&#x40;&#x33;&#x2e;&#x78;</a></li>
<li>vue3 得安装 4.x 版本</li>
</ul>
<h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><ul>
<li>数据是放在仓库(store)里的</li>
<li>每一个 vuex 的核心就是 store：store 本质上就是一个容器，里面保存着状态以及操作状态的方法</li>
<li>vuex 和全局对象的区别？<ul>
<li>第一：响应式，vuex 的存储是响应式的，组件从 store 读取 state 的时候，如果 state 发生了变化，那么对应组件中的 view 也会变化</li>
<li>第二：你不能直接 store.xxx&#x3D;”123”来修改状态，只能通过 mutation 来修改。</li>
</ul>
</li>
<li>src 目录下新建一个 store 文件夹，里面新建一个 index.js 写入如下内容<br>.&#x2F;store&#x2F;index.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从vuex中引入创建仓库的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="comment">//状态</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入你创建的仓库</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="comment">//使用仓库</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h4><p>optionAPI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 模版中使用 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; $store.state.count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count() &#123;</span><br><span class="line">      return this.$store.state.count;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>setup</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;demo-option /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;这是vue3组合式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 模版中使用 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; store.state.count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 使用toRefs解构 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import DemoOption from &#x27;./components/DemoOption.vue&#x27;;</span><br><span class="line">//引入hook</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">//调用上面的函数</span><br><span class="line">const store = useStore();</span><br><span class="line">const &#123; count &#125; = toRefs(store.state);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-核心-State"><a href="#3-核心-State" class="headerlink" title="3.核心 State"></a>3.核心 State</h3><ul>
<li>state 就是我们存放多个组件都需要用到的数据的地方，有点像 data</li>
</ul>
<h4 id="3-1-组件获取状态"><a href="#3-1-组件获取状态" class="headerlink" title="3.1 组件获取状态"></a>3.1 组件获取状态</h4><ul>
<li>默认我们获取状态都需先获取到 store 然后获取 store 里面的 state 再获取 state 的属性，比较冗余</li>
</ul>
<h4 id="3-2-mapState-的使用"><a href="#3-2-mapState-的使用" class="headerlink" title="3.2 mapState 的使用"></a>3.2 mapState 的使用</h4><ul>
<li>vuex 提供给我们一个辅助函数方便我们取出并展示其中的数据 mapState 辅助函数</li>
</ul>
<p>option</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; count &#125;&#125;--&#123;&#123; name &#125;&#125;--&#123;&#123; level &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //第一种数组语法</span><br><span class="line">    // ...mapState([&#x27;count&#x27;, &#x27;name&#x27;, &#x27;level&#x27;]),</span><br><span class="line">    //第二种对象的语法</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      name: (state) =&gt; state.name,</span><br><span class="line">      count: (state) =&gt; state.count,</span><br><span class="line">      level: (state) =&gt; state.level,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是在 setup 中使用，得自己一个个处理$store 的问题，如果不想手动一个个处理，可以封装一个 hook</li>
</ul>
<p>useState.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动处理mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore, mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">mapper</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line">  <span class="keyword">const</span> tempState = <span class="title function_">mapState</span>(mapper);</span><br><span class="line">  <span class="comment">//处理$store</span></span><br><span class="line">  <span class="keyword">const</span> newState = &#123;&#125;;</span><br><span class="line">  <span class="comment">//遍历拿到对象的所有的key</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(tempState).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    newState[key] = <span class="title function_">computed</span>(tempState[key].<span class="title function_">bind</span>(&#123; <span class="attr">$store</span>: store &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;demo-option /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;这是vue3组合式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; count &#125;&#125;--&#123;&#123; name &#125;&#125;--&#123;&#123; level &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import DemoOption from &#x27;./components/DemoOption.vue&#x27;;</span><br><span class="line">import useState from &#x27;./hooks/useState&#x27;;</span><br><span class="line">const &#123; count, name, level &#125; = useState([&#x27;name&#x27;, &#x27;count&#x27;, &#x27;level&#x27;]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-核心-Getters"><a href="#4-核心-Getters" class="headerlink" title="4.核心 Getters"></a>4.核心 Getters</h3><ul>
<li>getters 类似 computed，某些状态我们可能不是直接使用，而是需要经过一点复杂的逻辑处理后使用</li>
</ul>
<h4 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h4><ul>
<li>修改仓库中 的数据</li>
</ul>
<p>store&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从vuex中引入创建仓库的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="comment">//状态</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">level</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">    <span class="attr">books</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;vuejs&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">100</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">200</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">300</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//类似计算属性</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">//计算书的总价,默认有一个参数叫做state</span></span><br><span class="line">    <span class="title function_">totalPrice</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">books</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<p>options 中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in books&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;--&#123;&#123; item.price &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123; $store.getters.totalPrice &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    books() &#123;</span><br><span class="line">      return this.$store.state.books;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>setup 中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;demo-option /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in books&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;--&#123;&#123; item.price &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123; $store.getters.totalPrice &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import DemoOption from &#x27;./components/DemoOption.vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">const store = useStore();</span><br><span class="line">const &#123; books &#125; = toRefs(store.state);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-getters-传递参数"><a href="#4-2-getters-传递参数" class="headerlink" title="4.2 getters 传递参数"></a>4.2 getters 传递参数</h4><ul>
<li>和计算属性类似</li>
<li>修改 getters 使得能够传递参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">//我是一个黑商，我会把每本书的单价翻倍</span></span><br><span class="line">    <span class="title function_">totalPrice</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">money</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">books</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item.<span class="property">price</span> * money, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// totalPrice(state) &#123;</span></span><br><span class="line">    <span class="comment">//   return state.books.reduce((prev, item) =&gt; prev + item.price, 0);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;总价:&#123;&#123; $store.getters.totalPrice(1) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;黑商总价:&#123;&#123; $store.getters.totalPrice(3) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>练习：根据书名找书</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据书名找到整本书的对象返回给我</span></span><br><span class="line">   <span class="title function_">findByName</span>(<span class="params">state</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">books</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele.<span class="property">name</span> === name);</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="4-3-mapGetters-辅助函数"><a href="#4-3-mapGetters-辅助函数" class="headerlink" title="4.3 mapGetters 辅助函数"></a>4.3 mapGetters 辅助函数</h4><p>option 中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in books&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;--&#123;&#123; item.price &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123; totalPrice(1) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;黑商总价:&#123;&#123; totalPrice(3) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;找书:&#123;&#123; findByName(&#x27;react&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#x27;totalPrice&#x27;, &#x27;findByName&#x27;]),</span><br><span class="line">    books() &#123;</span><br><span class="line">      return this.$store.state.books;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>setup 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;demo-option /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123; totalPrice(1) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;黑商总价:&#123;&#123; totalPrice(3) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- &lt;p&gt;找书:&#123;&#123; findByName(&#x27;react&#x27;) &#125;&#125;&lt;/p&gt; --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import DemoOption from &#x27;./components/DemoOption.vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; toRefs, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">const store = useStore();</span><br><span class="line">//使用bind 手动处理/自己写一个hook</span><br><span class="line">//state是自己写的$store处理，getters又不用</span><br><span class="line">//可以直接使用toRefs解构</span><br><span class="line">// const &#123; totalPrice, findByName &#125; = toRefs(store.getters);</span><br><span class="line">//只想要totalPirce</span><br><span class="line">const totalPrice = computed(() =&gt; store.getters.totalPrice);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-Mutations"><a href="#5-Mutations" class="headerlink" title="5.Mutations"></a>5.Mutations</h3><ul>
<li>为了保证数据的变化是可控的，我们只能使用 mutation 来修改数据<br>计数器</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">//第一个参数是state</span></span><br><span class="line">  <span class="comment">//payload是我们将来调用的时候传入的参数</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> += payload;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">sub</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> -= payload;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>optionAPI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;addHandle&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subHandle&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //不能直接调用mutation而是类似自定义事件的用法</span><br><span class="line">    addHandle() &#123;</span><br><span class="line">      this.$store.commit(&#x27;add&#x27;, 5);</span><br><span class="line">    &#125;,</span><br><span class="line">    subHandle() &#123;</span><br><span class="line">      this.$store.commit(&#x27;sub&#x27;, 5);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>setup</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;demo-option /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;addHandle&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subHandle&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import DemoOption from &#x27;./components/DemoOption.vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; toRefs, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">const store = useStore();</span><br><span class="line">const &#123; count &#125; = toRefs(store.state);</span><br><span class="line">const addHandle = () =&gt; &#123;</span><br><span class="line">  store.commit(&#x27;add&#x27;, 5);</span><br><span class="line">&#125;;</span><br><span class="line">const subHandle = () =&gt; &#123;</span><br><span class="line">  store.commit(&#x27;sub&#x27;, 5);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapMutation 辅助函数</li>
<li>因为 setup 中 commit 的时候已经相对比较简短了，所以不需要 mapMutation</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;add(5)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sub(5)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //state/getters用辅助函数映射以后解构到计算属性</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //mapMutation返回的对象应该解构到methods中</span><br><span class="line">    ...mapMutations([&#x27;add&#x27;, &#x27;sub&#x27;]),</span><br><span class="line">    // addHandle()&#123;</span><br><span class="line">    //   this.add(5)</span><br><span class="line">    // &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>mutation 有一个重要原则：不要执行异步</li>
</ul>
<h3 id="6-核心-Actions"><a href="#6-核心-Actions" class="headerlink" title="6.核心 Actions"></a>6.核心 Actions</h3><ul>
<li>专门用来处理异步，action 不要修改数据，数据的修改只能交给 mutation，在组件中调用 action 叫做分发 dispatch</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">   <span class="comment">// //如果遇到封装好的请求函数</span></span><br><span class="line">   <span class="comment">// async getRes(context) &#123;</span></span><br><span class="line">   <span class="comment">//   let result = await request(&#x27;url&#x27;);</span></span><br><span class="line">   <span class="comment">//   // context.res= result</span></span><br><span class="line">   <span class="comment">//   context.commit(&#x27;xxx&#x27;,result)</span></span><br><span class="line">   <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一个参数context能够获取到state，mutation，getters</span></span><br><span class="line">   <span class="comment">//payload将来dispatch的时候传入的参数</span></span><br><span class="line">   <span class="title function_">addAction</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">     &#125;, payload);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">subAction</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       context.<span class="title function_">commit</span>(<span class="string">&#x27;sub&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">     &#125;, payload);</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>optionAPI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;addHandle&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subHandle&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //state/getters用辅助函数映射以后解构到计算属性</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addHandle() &#123;</span><br><span class="line">      this.$store.dispatch(&#x27;addAction&#x27;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    subHandle() &#123;</span><br><span class="line">      this.$store.dispatch(&#x27;subAction&#x27;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>setup</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;demo-option /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;addHandle&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subHandle&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import DemoOption from &#x27;./components/DemoOption.vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; toRefs, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">const store = useStore();</span><br><span class="line">const &#123; count &#125; = toRefs(store.state);</span><br><span class="line">const addHandle = () =&gt; &#123;</span><br><span class="line">  store.dispatch(&#x27;addAction&#x27;, 1000);</span><br><span class="line">&#125;;</span><br><span class="line">const subHandle = () =&gt; &#123;</span><br><span class="line">  store.dispatch(&#x27;subAction&#x27;, 1000);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapAction 的辅助函数方便快速解构出 action</li>
</ul>
<p>optionAPI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是vue2选项式api的vuex&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;addAction(1000)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subAction(1000)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState, mapActions &#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // optionAPI中使用</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //state/getters用辅助函数映射以后解构到计算属性</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([&#x27;addAction&#x27;, &#x27;subAction&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>写一个计数器，能加能减，能延迟加，延迟减,并且有一个 getters 是把 count 翻倍</li>
<li>看群文件“计数器 vuex 版本”–有个作业封装 mapAction 的 hook</li>
</ul>
<p>useAction.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useAction</span>(<span class="params">moduleName, mapper</span>) &#123;</span><br><span class="line">  <span class="comment">//获取vuex</span></span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line">  <span class="keyword">const</span> actions = <span class="title function_">mapActions</span>(moduleName, mapper);</span><br><span class="line">  <span class="keyword">const</span> newActions = &#123;&#125;;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(mutations).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    newActions[key] = actions[key].<span class="title function_">bind</span>(&#123; <span class="attr">$store</span>: store &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newActions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-Modules"><a href="#7-Modules" class="headerlink" title="7.Modules"></a>7.Modules</h3><ul>
<li>vuex 提供了模块化，每个模块有自己的 state，mutation，action，getters…而且互不冲突</li>
<li>namespaced:true 开启命名空间，这样哪怕不同的模块有同样名字的 state</li>
<li>第二个作业：vuex 模块化版本购物车 setup 的</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组合式api</title>
    <url>/2022/06/26/b44%20Composition%20API/</url>
    <content><![CDATA[<h1 id="07-03-Composition-API"><a href="#07-03-Composition-API" class="headerlink" title="07-03 Composition API"></a><strong>07-03 Composition API</strong><span id="more"></span></h1><h2 id="1-Options-API和Composition-API"><a href="#1-Options-API和Composition-API" class="headerlink" title="1. Options API和Composition API"></a>1. <strong>Options API和Composition API</strong></h2><h3 id="1-1-Options-API的弊端"><a href="#1-1-Options-API的弊端" class="headerlink" title="1.1 Options API的弊端"></a><strong>1.1 Options API的弊端</strong></h3><p>实现某一个功能的时候，同一个功能的代码逻辑被<strong>拆分</strong>开了，而且当项目&#x2F;组件变得比较大时，我们对应的选项中的代码会变的非常的多，对于使用这些组件的人来说，往往是比较难阅读的。composition API解决的问题，Vue Compostion API 有人称为VCA</p>
<h3 id="1-2-体验composition-API"><a href="#1-2-体验composition-API" class="headerlink" title="1.2 体验composition API"></a><strong>1.2 体验composition API</strong></h3><p>在vue中组合式api他的使用其实就是一个setup的函数而已，他也是一个选项；只不过这个选项相对强大一点。可以用来替代之前的大部分其他选项。</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; count &#125;&#125;h2&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;+button&gt;</span><br><span class="line">    &lt;button @click=&quot;sub&quot;&gt;-button&gt;</span><br><span class="line">  div&gt;</span><br><span class="line">template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import useCount from &#x27;./hooks/useCount&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //使用组合式api</span><br><span class="line">    //并不是所有的变量都需要交给vue来做响应式</span><br><span class="line">    //vue3 组合式api 让开发者决定那些需要响应式 而不是像options 一样 只要写到data中就就会去做响应式</span><br><span class="line">    //数据来源更加明确的写法</span><br><span class="line">    const &#123;count,add,sub&#125;=useCount()</span><br><span class="line">    return &#123;</span><br><span class="line">    //计数器的逻辑</span><br><span class="line">      ...useCount(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;style&gt;</span><br></pre></td></tr></table></figure>





<p>hooks&#x2F;count.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现计数器逻辑</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default function useCount() &#123;</span><br><span class="line">  const count = ref(0);</span><br><span class="line">  const add = () =&gt; &#123;</span><br><span class="line">    count.value++;</span><br><span class="line">  &#125;;</span><br><span class="line">  const sub = () =&gt; &#123;</span><br><span class="line">    count.value--;</span><br><span class="line">  &#125;;</span><br><span class="line">  return &#123;</span><br><span class="line">    count,</span><br><span class="line">    add,</span><br><span class="line">    sub,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>一句话总结组合式api：函数式编程的体现，就是在setup函数里面写代码</p>
<h2 id="2-setup"><a href="#2-setup" class="headerlink" title="2. setup"></a>2. <strong>setup</strong></h2><p>setup中禁用this</p>
<h3 id="2-1-setup函数的参数"><a href="#2-1-setup函数的参数" class="headerlink" title="2.1 setup函数的参数"></a><strong>2.1 setup函数的参数</strong></h3><p>第一个参数 props</p>
<p>父传子，子接收用的</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;home :msg=&quot;msg&quot; /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改msg&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const msg = ref(&#x27;alex&#x27;);</span><br><span class="line">    const change = () =&gt; &#123;</span><br><span class="line">      msg.value = &#x27;天河阔少&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123; msg, change &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>Home</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home组件&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    //setup中禁用this，我们都会有替代方案</span><br><span class="line">    // console.log(props.msg);</span><br><span class="line">    //不能解构props 会丢失响应式</span><br><span class="line">    const &#123; msg &#125; = props;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二个参数 context</p>
<p>​	他有三个属性</p>
<p>​	attrs：所有的非props的属性</p>
<p>​	slots：父组件插槽传递</p>
<p>​	emit：因为我们不能使用this，通过这种替代方案给你emit</p>
<h3 id="2-2-setup-返回值"><a href="#2-2-setup-返回值" class="headerlink" title="2.2 setup 返回值"></a><strong>2.2 setup 返回值</strong></h3><p>setup的返回值可以在模版中使用，我们可以通过setup的返回值来替代data选项，返回的一个函数替代了methods选项</p>
<p>额外的：在vue2也有复用代码的手段，mixins混入</p>
<p>mixins的缺点</p>
<ol>
<li>变量来源不明确，不利于阅读，代码维护负担大</li>
</ol>
<p>组件里面可能有多个mixins，并且会使用mixins中的变量&#x2F;函数，这些变量&#x2F;函数到底来自那个mixins，还是说是自己的？</p>
<ol start="2">
<li><p>多个mixins的生命周期会混到一起，但是同名的属性&#x2F;方法名无法融合的，可能会导致冲突</p>
</li>
<li><p>mixins和组件之间可能会出现多对多的情况，复杂度比较高。</p>
</li>
</ol>
<h2 id="3-定义数据"><a href="#3-定义数据" class="headerlink" title="3. 定义数据"></a>3. <strong>定义数据</strong></h2><h3 id="3-1-reactive"><a href="#3-1-reactive" class="headerlink" title="3.1 reactive"></a><strong>3.1 reactive</strong></h3><p>为什么用reactive以后，我们的数据就变成响应式，因为一旦使用了reactive处理以后，你的数据再次使用的时候就会收集依赖，当数据发生改变的时候就会进行对应的响应式操作，实际上我们之前写的data在vue内部是遍历以后交给reactive来处理的。</p>
<p>如果用reactive定义简单数据类型的响应式，会报一个警告</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; acount.username &#125;&#125;--&#123;&#123; acount.password &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;msg += &#x27;alex&#x27;&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改account&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//如果想使用reactive得引入</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //定义普通的数据，可以正常使用</span><br><span class="line">    //缺点：没有响应式</span><br><span class="line">    let msg = &#x27;hello world&#x27;;</span><br><span class="line">    //定义响应式的数据</span><br><span class="line">    //reactive:定义复杂类型类型的数据</span><br><span class="line">    const acount = reactive(&#123;</span><br><span class="line">      username: &#x27;alex&#x27;,</span><br><span class="line">      password: &#x27;123456&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const change = () =&gt; &#123;</span><br><span class="line">      acount.username = &#x27;天河阔少&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      acount,</span><br><span class="line">      change,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2-ref"><a href="#3-2-ref" class="headerlink" title="3.2 ref"></a><strong>3.2 ref</strong></h3><p>reactive API要求我们必须传入对象&#x2F;数组类型的数据，如果传入一个基本类型会报警告而且不生效。如果我们要定义基本类型的响应式变量就得使用 ref，ref内部会返回一个不可变的响应式对象，该对象作为一个响应式的引用维护着他内部的值。ref在模版中使用会自动解包，但是在setup中修改时需要使用.value</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 在模版中使用ref时，vue会自动解包,自动取出其中的value --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sub&quot;&gt;-1&lt;/button&gt;</span><br><span class="line">    &lt;h2&gt;info:&#123;&#123; info.count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 修改 --&gt;</span><br><span class="line">    &lt;button @click=&quot;info.count++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;info.count.value++&quot;&gt;能够+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //ref:定义简单类型的数据(也可以定义复杂类型)</span><br><span class="line">    //count就是响应式的</span><br><span class="line">    const count = ref(0);</span><br><span class="line">    console.log(count);</span><br><span class="line">    const add = () =&gt; &#123;</span><br><span class="line">      //在setup中使用，得自己加上.value</span><br><span class="line">      count.value++;</span><br><span class="line">    &#125;;</span><br><span class="line">    const sub = () =&gt; &#123;</span><br><span class="line">      count.value--;</span><br><span class="line">    &#125;;</span><br><span class="line">    //ref是浅层解包(了解，真实开发不会这样去写)</span><br><span class="line">    const info = &#123;</span><br><span class="line">      // count:count,</span><br><span class="line">      count,</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      add,</span><br><span class="line">      sub,</span><br><span class="line">      info,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>ref和reactive的选择，个人经验：ref用的多</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; info &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeInfo&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;form action=&quot;&quot;&gt;</span><br><span class="line">      账号：&lt;input type=&quot;text&quot; v-model=&quot;account.username&quot; /&gt; 密码</span><br><span class="line">      &lt;input type=&quot;password&quot; v-model=&quot;account.password&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //强调:ref也可以定义复杂数据类型</span><br><span class="line">    const info = ref(&#123; name: &#x27;alex&#x27; &#125;);</span><br><span class="line">    // info.value = &#123;&#125;;</span><br><span class="line">    function changeInfo() &#123;</span><br><span class="line">      info.value.name = &#x27;天河阔少&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    //1. reactive的应用场景</span><br><span class="line">    //1.1 本地数据</span><br><span class="line">    //1.2 表单 多个数据之间有关系/联系(聚合的数据，组织在一起会有特定的作用)</span><br><span class="line">    // const list = reactive([&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;]);</span><br><span class="line">    const account = reactive(&#123;</span><br><span class="line">      username: &#x27;alex&#x27;,</span><br><span class="line">      password: &#x27;123&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    // const username = ref(&#x27;alex&#x27;);</span><br><span class="line">    // const password = ref(&#x27;123&#x27;);</span><br><span class="line">    //其他情况 统一用ref</span><br><span class="line">    //请求</span><br><span class="line">    // const musics = reactive([]);</span><br><span class="line">    const musics = ref([]);</span><br><span class="line">    const serverMusic = [&#x27;红日&#x27;, &#x27;海阔天空&#x27;, &#x27;护花使者&#x27;];</span><br><span class="line">    //如果reactive我要把数组赋值给他 遍历塞push进去</span><br><span class="line">    //ref就很方便</span><br><span class="line">    musics.value = serverMusic;</span><br><span class="line">    return &#123; info, changeInfo, account &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-3-readonly"><a href="#3-3-readonly" class="headerlink" title="3.3 readonly"></a><strong>3.3 readonly</strong></h3><p>为了严格保持单项数据流而生，如果你写的时候已经遵循了单项数据流，那么也可以不用这个函数，返回原始对象的只读代理，本质上readonly返回对象的setter被劫持</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;自己的info:&#123;&#123; info &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;home :info=&quot;info&quot; :roInfo=&quot;roInfo&quot; @changeInfo=&quot;changeInfo&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, readonly &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const info = reactive(&#123;</span><br><span class="line">      name: &#x27;alex&#x27;,</span><br><span class="line">      age: 18,</span><br><span class="line">      height: 1.88,</span><br><span class="line">    &#125;);</span><br><span class="line">    //合规的单项的数据流</span><br><span class="line">    const changeInfo = (payload) =&gt; &#123;</span><br><span class="line">      info.name = payload;</span><br><span class="line">    &#125;;</span><br><span class="line">    const roInfo = readonly(info);</span><br><span class="line">    return &#123; info, changeInfo, roInfo &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;home的info:&#123;&#123; info &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 能实现修改，但是禁止这样不符合单项数据流 --&gt;</span><br><span class="line">    &lt;button @click=&quot;info.name = &#x27;jack&#x27;&quot;&gt;违规修改props&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeInfo&quot;&gt;合法修改props&lt;/button&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;只读的info:&#123;&#123; roInfo &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;roInfo.name = &#x27;tom&#x27;&quot;&gt;修改只读&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    info: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    roInfo: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    const changeInfo = () =&gt; &#123;</span><br><span class="line">      // console.log(this);</span><br><span class="line">      context.emit(&#x27;changeInfo&#x27;, &#x27;jack&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123; changeInfo &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-4-toRefs、toRef"><a href="#3-4-toRefs、toRef" class="headerlink" title="3.4 toRefs、toRef"></a><strong>3.4 toRefs、toRef</strong></h3><p>解决 解构时响应式丢失</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;home :info=&quot;info&quot; /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; name &#125;&#125;--&#123;&#123; age &#125;&#125;--&#123;&#123; gaodu &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;age++&quot;&gt;修改age&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;gaodu = 1.99&quot;&gt;修改height&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line">import &#123; reactive, toRefs, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const info = reactive(&#123;</span><br><span class="line">      name: &#x27;alex&#x27;,</span><br><span class="line">      age: 18,</span><br><span class="line">      height: 1.88,</span><br><span class="line">    &#125;);</span><br><span class="line">    // const &#123; name, age, height &#125; = info;</span><br><span class="line">    //name,age都变成响应式</span><br><span class="line">    const &#123; name, age &#125; = toRefs(info);</span><br><span class="line">    //单独某个属性变成响应式</span><br><span class="line">    const gaodu = toRef(info, &#x27;height&#x27;);</span><br><span class="line">    return &#123;</span><br><span class="line">      info,</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">      gaodu,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; name &#125;&#125;--&#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    info: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    //解构props并展示，而且不要丢失响应式</span><br><span class="line">    // const &#123; name, age &#125; = props.info;</span><br><span class="line">    const &#123; name, age &#125; = toRefs(props.info);</span><br><span class="line">    return &#123; name, age &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-5-其他API"><a href="#3-5-其他API" class="headerlink" title="3.5 其他API"></a><strong>3.5 其他API</strong></h3><p>unref</p>
<p>​	如果参数是一个ref就返回value，如果不是就返回参数本身</p>
<p>isRef</p>
<p>​	判断是否是一个ref对象</p>
<p>shallowRef</p>
<p>​	创建一个浅层的ref对象</p>
<p>triggerRef</p>
<p>​	手动触发shallowRef的副作用</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;edit&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; shallowRef, triggerRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const msg = shallowRef(&#123; name: &#x27;alex&#x27; &#125;);</span><br><span class="line">    const edit = () =&gt; &#123;</span><br><span class="line">      msg.value.name = &#x27;天河阔少&#x27;;</span><br><span class="line">      // msg.value = &#123;</span><br><span class="line">      //   name: &#x27;天河阔少&#x27;,</span><br><span class="line">      // &#125;;</span><br><span class="line">      triggerRef(msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123; msg, edit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体使用场景：<a href="https://juejin.cn/post/7194516447932973112#heading-14">https://juejin.cn/post/7194516447932973112#heading-14</a></p>
<h2 id="4-setup中禁用this"><a href="#4-setup中禁用this" class="headerlink" title="4. setup中禁用this"></a>4. <strong>setup中禁用this</strong></h2><p>在setup中避免使用this，因为会得到undefined。所有之前的this.xxx我们都有替代方案，但是关于this不能使用的本质原因，有很多争议</p>
<p>常见的错误结论 ：setup是在beforeCreate和created之前调用的，所以在这个时候组件实例还没有被创建出来，因此不能是用this</p>
<p>vue源码的处理过程</p>
<ol>
<li><p>调用<strong>createComponentInstance</strong>创建组件实例</p>
</li>
<li><p>调用<strong>setupComponent</strong>函数初始化组件内部的操作，初始化data，methods…</p>
</li>
<li><p>调用<strong>setupStatefulComponent</strong>初始化有状态的组件</p>
</li>
<li><p>通过<strong>setupStatefulComponent取出</strong>setup函数，交给<strong>callWithErrorHanding</strong>执行</p>
</li>
</ol>
<p>真正的原因并不是组件没有创建出来，而是在执行整个带有setup语法的组件的时候没有执行类似vue2的通过bind绑定组件实例的过程。</p>
<h2 id="5-setup中的computed"><a href="#5-setup中的computed" class="headerlink" title="5. setup中的computed"></a>5. <strong>setup中的computed</strong></h2><p>方式一：简写</p>
<p>接收一个getter函数，并且值为getter函数的返回值</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; fullName &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; scoreLevel &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, ref, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //定义数据</span><br><span class="line">    const names = reactive(&#123;</span><br><span class="line">      firstName: &#x27;alex&#x27;,</span><br><span class="line">      lastName: &#x27;小肥君&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const fullName = computed(() =&gt; &#123;</span><br><span class="line">      return names.firstName + &#x27; &#x27; + names.lastName;</span><br><span class="line">    &#125;);</span><br><span class="line">    //定义分数</span><br><span class="line">    const score = ref(90);</span><br><span class="line">    //定义分数的计算属性 根据分数判断是否及格</span><br><span class="line">    const scoreLevel = computed(() =&gt; (score.value &gt;= 60 ? &#x27;及格&#x27; : &#x27;不及格&#x27;));</span><br><span class="line">    return &#123; fullName, scoreLevel &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式二：完整写法</p>
<p>具有setter和getter的对象</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; fullName &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;setFullName&quot;&gt;设置name&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, ref, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //定义数据</span><br><span class="line">    const names = reactive(&#123;</span><br><span class="line">      firstName: &#x27;alex&#x27;,</span><br><span class="line">      lastName: &#x27;小肥君&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    //computed函数返回的是一个ref</span><br><span class="line">    // const fullName = computed(() =&gt; &#123;</span><br><span class="line">    //   return names.firstName + &#x27; &#x27; + names.lastName;</span><br><span class="line">    // &#125;);</span><br><span class="line">    const fullName = computed(&#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return names.firstName + &#x27; &#x27; + names.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      //真正的修改</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        const tempNames = newValue.split(&#x27; &#x27;);</span><br><span class="line">        names.firstName = tempNames[0];</span><br><span class="line">        names.lastName = tempNames[1];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const setFullName = () =&gt; &#123;</span><br><span class="line">      //直接修改fullName是不行的 computed返回的是一个只读的ref</span><br><span class="line">      fullName.value = &#x27;天河阔少 aaaaaaaalex&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123; fullName, setFullName &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-setup中获取元素-x2F-组件-实例"><a href="#6-setup中获取元素-x2F-组件-实例" class="headerlink" title="6. setup中获取元素&#x2F;组件 实例"></a>6. <strong>setup中获取元素&#x2F;组件 实例</strong></h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 ref=&quot;titleRef&quot;&gt;我是标题 哈哈哈&lt;/h2&gt;</span><br><span class="line">    &lt;button ref=&quot;btnRef&quot;&gt;我是按钮 嘿嘿嘿&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showRes&quot;&gt;点我打印&lt;/button&gt;</span><br><span class="line">    &lt;home ref=&quot;home&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const titleRef = ref(null);</span><br><span class="line">    const btnRef = ref(null);</span><br><span class="line">    const home = ref(null);</span><br><span class="line">    const showRes = () =&gt; &#123;</span><br><span class="line">      console.log(titleRef.value);</span><br><span class="line">      console.log(btnRef.value);</span><br><span class="line">      console.log(home.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123; titleRef, btnRef, showRes, home &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const title = ref(&#x27;我是home&#x27;);</span><br><span class="line">    return &#123; title &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-setup中生命周期变化"><a href="#7-setup中生命周期变化" class="headerlink" title="7. setup中生命周期变化"></a>7. <strong>setup中生命周期变化</strong></h2><table>
<thead>
<tr>
<th><strong>选项式API</strong></th>
<th><strong>setup</strong></th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>-</td>
</tr>
<tr>
<td>created</td>
<td>-</td>
</tr>
<tr>
<td>beforeMount</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>mounted</td>
<td>onMounted</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>onBeforeUpdate</td>
</tr>
<tr>
<td>updated</td>
<td>onUpdated</td>
</tr>
<tr>
<td>beforeUnmount</td>
<td>onBeforeUnmount</td>
</tr>
<tr>
<td>unmounted</td>
<td>onUnmounted</td>
</tr>
<tr>
<td>activated</td>
<td>activated</td>
</tr>
<tr>
<td>deactivated</td>
<td>deactivated</td>
</tr>
</tbody></table>
<p>因为setup是围绕beforeCreate和created运行的，所以不再需要这两个生命周期，换句话说原来在这两个生命周期中执行的操作都直接在setup中书写即可</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;我挂载了&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    const title = ref(&#x27;我是home&#x27;);</span><br><span class="line">    return &#123; title &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-Provide-x2F-Inject"><a href="#8-Provide-x2F-Inject" class="headerlink" title="8. Provide&#x2F;Inject"></a>8. <strong>Provide&#x2F;Inject</strong></h2><p>provide有两个参数</p>
<p>​	name：提供的属性名称</p>
<p>​	value：提供的属性值</p>
<p>inject有两个参数</p>
<p>​	要inject的属性的名称</p>
<p>​	默认值</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;app的name:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改name&lt;/button&gt;</span><br><span class="line">    &lt;home /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, provide &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let age = 18;</span><br><span class="line">    const name = ref(&#x27;alex&#x27;);</span><br><span class="line">    provide(&#x27;name&#x27;, name);</span><br><span class="line">    provide(&#x27;age&#x27;, age);</span><br><span class="line">    const change = () =&gt; &#123;</span><br><span class="line">      name.value = &#x27;天河阔少&#x27;;</span><br><span class="line">      age = 19;</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123;</span><br><span class="line">      name,</span><br><span class="line">      change,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;home的name:&#123;&#123; name &#125;&#125;--&#123;&#123; age &#125;&#125;--&#123;&#123; height &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const name = inject(&#x27;name&#x27;);</span><br><span class="line">    const age = inject(&#x27;age&#x27;);</span><br><span class="line">    //设置默认值</span><br><span class="line">    const height = inject(&#x27;height&#x27;, 1.88);</span><br><span class="line">    return &#123; name, age, height &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="9-setup中的侦听器"><a href="#9-setup中的侦听器" class="headerlink" title="9. setup中的侦听器"></a>9. <strong>setup中的侦听器</strong></h2><p>watch:手动指定侦听的数据源</p>
<p>watchEffect:自动的收集响应式的数据依赖</p>
<h3 id="9-1-watch"><a href="#9-1-watch" class="headerlink" title="9.1 watch"></a><strong>9.1 watch</strong></h3><p>基础使用</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;msg = &#x27;天河阔少&#x27;&quot;&gt;修改msg&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const msg = ref(&#x27;hello world&#x27;);</span><br><span class="line">    //侦听数据msg的变化</span><br><span class="line">    watch(msg, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">      console.log(newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>侦听复杂对象</p>
<p>ref定义的需要深层监听，reactive定义的不需要</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; info &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;editInfo&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; obj &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;editObj&quot;&gt;修改obj&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, watch, reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const info = ref(&#123;</span><br><span class="line">      name: &#x27;alex&#x27;,</span><br><span class="line">      age: 18,</span><br><span class="line">      friend: &#123;</span><br><span class="line">        name: &#x27;jack&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const editInfo = () =&gt; &#123;</span><br><span class="line">      info.value.friend.name = &#x27;666&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    watch(</span><br><span class="line">      info,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        console.log(&#x27;监听的数据变化了～～～&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        deep: true,</span><br><span class="line">        // immediate:true</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    const obj = reactive(&#123;</span><br><span class="line">      name: &#x27;alex&#x27;,</span><br><span class="line">      age: 18,</span><br><span class="line">      friend: &#123;</span><br><span class="line">        name: &#x27;jack&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const editObj = () =&gt; &#123;</span><br><span class="line">      obj.friend.name = &#x27;666&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    watch(</span><br><span class="line">      obj,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        console.log(&#x27;obj变化了我要做一些事&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">      // &#123;</span><br><span class="line">      //   deep: true,</span><br><span class="line">      // &#125;</span><br><span class="line">    );</span><br><span class="line">    return &#123;</span><br><span class="line">      info,</span><br><span class="line">      editInfo,</span><br><span class="line">      obj,</span><br><span class="line">      editObj,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-2-watchEffect"><a href="#9-2-watchEffect" class="headerlink" title="9.2 watchEffect"></a><strong>9.2 watchEffect</strong></h3><p>不仅能够自动监听响应式的依赖变化，而且能够在你需要的时候停止监听</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; count &#125;&#125;--&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;++&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;name += &#x27;hahaha&#x27;&quot;&gt;修改name&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, watch, watchEffect &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const count = ref(0);</span><br><span class="line">    const name = ref(&#x27;alex&#x27;);</span><br><span class="line">    //使用watch监听</span><br><span class="line">    // watch(count,()=&gt;&#123;&#125;,&#123;&#125;)</span><br><span class="line">    //使用watchEffect监听</span><br><span class="line">    //watchEffect的回调，默认会直接执行一次</span><br><span class="line">    //执行的过程中会自动收集依赖(那些响应式数据变化)</span><br><span class="line">    const stopWatch = watchEffect(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;变化了～～～～&#x27;, count.value, name.value);</span><br><span class="line">      //满足某些条件时不再监听</span><br><span class="line">      if (count.value &gt;= 10) &#123;</span><br><span class="line">        stopWatch();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-setupHooks练习"><a href="#10-setupHooks练习" class="headerlink" title="10. setupHooks练习"></a>10. <strong>setupHooks练习</strong></h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sub&quot;&gt;-1&lt;/button&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sortClick&quot;&gt;首页-排行榜&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;hotClick&quot;&gt;首页-歌单推荐&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;scroll&quot;&gt;</span><br><span class="line">      &lt;h2&gt;x:&#123;&#123; scrollPosition.x &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;y:&#123;&#123; scrollPosition.y &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import useCount from &#x27;./hooks/useCount&#x27;;</span><br><span class="line">import useTitle from &#x27;./hooks/useTitle&#x27;;</span><br><span class="line">import useScrollPosition from &#x27;./hooks/useScrollPosition&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //计数器的逻辑</span><br><span class="line">    const &#123; count, add, sub &#125; = useCount();</span><br><span class="line">    //title的逻辑</span><br><span class="line">    const &#123; title &#125; = useTitle(&#x27;首页&#x27;);</span><br><span class="line">    const sortClick = () =&gt; &#123;</span><br><span class="line">      title.value = &#x27;排行榜&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    const hotClick = () =&gt; &#123;</span><br><span class="line">      title.value = &#x27;热门歌单&#x27;;</span><br><span class="line">    &#125;;</span><br><span class="line">    //滚动条的逻辑</span><br><span class="line">    const &#123; scrollPosition &#125; = useScrollPosition();</span><br><span class="line">    // console.log(scrollPosition);</span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      add,</span><br><span class="line">      sub,</span><br><span class="line">      title,</span><br><span class="line">      sortClick,</span><br><span class="line">      hotClick,</span><br><span class="line">      scrollPosition,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // //如果只有一个hooks而且逻辑比较简单</span><br><span class="line">    // return &#123;</span><br><span class="line">    //   ...useCount(),</span><br><span class="line">    // &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.app &#123;</span><br><span class="line">  width: 800px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="10-1-useCount练习"><a href="#10-1-useCount练习" class="headerlink" title="10.1 useCount练习"></a><strong>10.1 useCount练习</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现计数器逻辑</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">sub</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">value</span>--;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    add,</span><br><span class="line">    sub,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-2-useTitle练习"><a href="#10-2-useTitle练习" class="headerlink" title="10.2 useTitle练习"></a><strong>10.2 useTitle练习</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useTitle</span>(<span class="params">titleValue = <span class="string">&#x27;首页&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="title function_">ref</span>(titleValue);</span><br><span class="line">  <span class="comment">//监听title的变化并且设置title</span></span><br><span class="line">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = title.<span class="property">value</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-3-useScrollPosition练习"><a href="#10-3-useScrollPosition练习" class="headerlink" title="10.3 useScrollPosition练习"></a><strong>10.3 useScrollPosition练习</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useScrollPosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//用reactive记录位置</span></span><br><span class="line">  <span class="keyword">const</span> scrollPosition = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//监听页面滚动</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    scrollPosition.<span class="property">x</span> = <span class="variable language_">window</span>.<span class="property">scrollX</span>;</span><br><span class="line">    scrollPosition.<span class="property">y</span> = <span class="variable language_">window</span>.<span class="property">scrollY</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    scrollPosition,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="11-语法糖"><a href="#11-语法糖" class="headerlink" title="11. 语法糖"></a>11. <strong><script setup>语法糖</strong></h2><p><strong>基础用法</strong></p>
<p>是SFC中使用组合式api编译时的语法糖。当同时使用sfc与组合式api时推荐该写法</p>
<p>使用这个语法 只需要在script标签上加一个setup，里面的所有代码会被自动编译成setup函数内的代码</p>
<p><strong>顶层的绑定会被暴露给模版</strong></p>
<p>任何在 setup> 中声明的顶层的绑定（变量，函数声明，以及import的内容）都能直接在模版中使用，导入的组件都不需要再注册</p>
<p><strong>父子组件通信defineProps()和defineEmits()</strong></p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sub&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;home :count=&quot;count&quot; @changeCount=&quot;changeCount&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const count = ref(0);</span><br><span class="line">const add = () =&gt; &#123;</span><br><span class="line">  count.value++;</span><br><span class="line">&#125;;</span><br><span class="line">const sub = () =&gt; &#123;</span><br><span class="line">  count.value--;</span><br><span class="line">&#125;;</span><br><span class="line">const changeCount = (payload) =&gt; &#123;</span><br><span class="line">  count.value = payload;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;h2&gt;hahahahah&lt;/h2&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;changeCount&quot;&gt;changeCount&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  count: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    default: 0,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">//自定义事件</span><br><span class="line">const emits = defineEmits([&#x27;changeCount&#x27;]);</span><br><span class="line">const changeCount = () =&gt; &#123;</span><br><span class="line">  emits(&#x27;changeCount&#x27;, 100);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.home &#123;</span><br><span class="line">  background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>作业：全选反选，有能力的写购物车，抽成hooks</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;001&#x27;,</span><br><span class="line">    hobby: &#x27;篮球&#x27;,</span><br><span class="line">    check: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;002&#x27;,</span><br><span class="line">    hobby: &#x27;棒球&#x27;,</span><br><span class="line">    check: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;003&#x27;,</span><br><span class="line">    hobby: &#x27;羽毛球&#x27;,</span><br><span class="line">    check: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;004&#x27;,</span><br><span class="line">    hobby: &#x27;乒乓球&#x27;,</span><br><span class="line">    check: false,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>





<p>vuex->pinia->vueRouter->axios->其他特性补充</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的组件化的其他知识</title>
    <url>/2022/06/24/b43%20VUE%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="组件其他知识"><a href="#组件其他知识" class="headerlink" title="组件其他知识"></a>组件其他知识<span id="more"></span></h1><h2 id="1-组件的生命周期"><a href="#1-组件的生命周期" class="headerlink" title="1. 组件的生命周期**"></a>1. 组件的生命周期**</h2><h3 id="1-1-认识生命周期"><a href="#1-1-认识生命周期" class="headerlink" title="1.1 认识生命周期"></a><strong>1.1 认识生命周期</strong></h3><p>生命周期：每个组件都可能会经历<strong>创建，挂载，更新，卸载</strong>等一系列的过程，在这些过程的某个阶段我们可能想要添加一些属于自己的代码逻辑，比如组件创建完成后请求服务器数据，比如挂载完成后监听事件总线。都要用到生命周期函数才行。</p>
<p>生命周期函数：是一些钩子函数，在特定的时间会被Vue源码内部自动调用，通过生命周期函数我们可以知道目前组件处于什么阶段，那么就可以在对应的阶段编写自己的代码。</p>
<h3 id="1-2-生命周期的流程"><a href="#1-2-生命周期的流程" class="headerlink" title="1.2 生命周期的流程"></a><strong>1.2 生命周期的流程</strong></h3><p><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt="组件生命周期图示"></p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;home v-if=&quot;isShow&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏home&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      isShow: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  //1.组件创建前</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&#x27;beforeCreated&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //2.组件创建完毕</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#x27;created---&#x27;);</span><br><span class="line">    console.log(&#x27;发送网络请求，监听watch数据，监听bus&#x27;);</span><br><span class="line">    console.log(&#x27;created---&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //3.组件的template准备好了</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&#x27;beforeMount&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //4. 组件挂载 虚拟DOM-&gt;真实DOM</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;mounted&#x27;);</span><br><span class="line">    console.log(&#x27;获取DOM,操作DOM&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //5.数据发生改变 准备更新</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&#x27;beforeUpdate&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //6. 更新</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&#x27;updated&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;home v-if=&quot;isShow&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏home&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      isShow: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  //1.组件创建前</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&#x27;beforeCreated&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //2.组件创建完毕</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#x27;created---&#x27;);</span><br><span class="line">    console.log(&#x27;发送网络请求，监听watch数据，监听bus&#x27;);</span><br><span class="line">    console.log(&#x27;created---&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //3.组件的template准备好了</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&#x27;beforeMount&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //4. 组件挂载 虚拟DOM-&gt;真实DOM</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;mounted&#x27;);</span><br><span class="line">    console.log(&#x27;获取DOM,操作DOM&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //5.数据发生改变 准备更新</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&#x27;beforeUpdate&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  //6. 更新</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&#x27;updated&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="2-ref-parent-root"><a href="#2-ref-parent-root" class="headerlink" title="2. $ref,$parent,$root"></a>2. $ref,$parent,$root</h2><p> 注意vue3中没有了$children</p>
<p> ref获取真实Dom&#x2F;组件实例用的</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title&quot; class=&quot;title&quot; :style=&quot;&#123; color: titleColor &#125;&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button ref=&quot;btn&quot; @click=&quot;editTitle&quot;&gt;修改title&lt;/button&gt;</span><br><span class="line">    &lt;home ref=&quot;home&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;hello 小肥君&#x27;,</span><br><span class="line">      titleColor: &#x27;black&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    editTitle() &#123;</span><br><span class="line">      //1. 不要主动获取dom，修改dom</span><br><span class="line">      //而是用vue提供的一些语法来操作模版</span><br><span class="line">      // this.msg = &#x27;天河阔少～～～&#x27;;</span><br><span class="line">      // this.titleColor = &#x27;red&#x27;;</span><br><span class="line">      //2. 某些情况下不得不获取dom就得给你想获取的元素加上ref=&quot;名称&quot;</span><br><span class="line">      // console.log(this.$refs.title, this.$refs.btn);</span><br><span class="line">      // console.log(this.$refs.home);</span><br><span class="line">      //3.获取到组件的实例之后我们还能做一些事</span><br><span class="line">      // console.log(this.$refs.home.$el);</span><br><span class="line">      //4.$parent $root</span><br><span class="line">      //this当前的组件实例app</span><br><span class="line">      //获取当前实例的父组件</span><br><span class="line">      console.log(this.$parent);</span><br><span class="line">      //获取根组件</span><br><span class="line">      console.log(this.$root);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;66666&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;home:&#x27;, this.$parent);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="3-动态组件"><a href="#3-动态组件" class="headerlink" title="3. 动态组件"></a>3. 动态组件</h2><h3 id="3-1-v-if显示不同组件"><a href="#3-1-v-if显示不同组件" class="headerlink" title="3.1 v-if显示不同组件"></a><strong>3.1 v-if显示不同组件</strong></h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">      &lt;template v-for=&quot;(item, index) in tabs&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          :class=&quot;&#123; active: currentIndex === index &#125;&quot;</span><br><span class="line">          @click=&quot;itemClick(index)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;views&quot;&gt;</span><br><span class="line">      &lt;!-- v-if来决定显示那个组件 --&gt;</span><br><span class="line">      &lt;template v-if=&quot;currentIndex === 0&quot;&gt;</span><br><span class="line">        &lt;home /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-else-if=&quot;currentIndex === 1&quot;&gt;</span><br><span class="line">        &lt;about /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-else-if=&quot;currentIndex === 2&quot;&gt;</span><br><span class="line">        &lt;categroy /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line">import About from &#x27;./views/About.vue&#x27;;</span><br><span class="line">import Categroy from &#x27;./views/Categroy.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabs: [&#x27;home&#x27;, &#x27;about&#x27;, &#x27;categroy&#x27;],</span><br><span class="line">      currentIndex: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick(idx) &#123;</span><br><span class="line">      this.currentIndex = idx;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    About,</span><br><span class="line">    Categroy,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2-动态组件"><a href="#3-2-动态组件" class="headerlink" title="3.2 动态组件"></a><strong>3.2 动态组件</strong></h3><p>动态组件就是使用 component组件，通过一个特殊的属性 <strong>is</strong> 来实现。</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">      &lt;template v-for=&quot;item in tabs&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          :class=&quot;&#123; active: currentTab === item &#125;&quot;</span><br><span class="line">          @click=&quot;itemClick(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;views&quot;&gt;</span><br><span class="line">      &lt;!-- 做法二：动态组件 --&gt;</span><br><span class="line">      &lt;!-- is接收的内容来自于两个地方，1.全局注册的组件 2.局部注册的组件 --&gt;</span><br><span class="line">      &lt;!--你的is要的就是 home about categroy 中的某一个--&gt;</span><br><span class="line">      &lt;!-- &lt;component :is=&quot;tabs[currentIndex]&quot;&gt; &lt;/component&gt; --&gt;</span><br><span class="line">      &lt;!-- &lt;component :is=&quot;currentTab&quot;&gt; &lt;/component&gt; --&gt;</span><br><span class="line">      &lt;component :is=&quot;currentTab&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line">import About from &#x27;./views/About.vue&#x27;;</span><br><span class="line">import Categroy from &#x27;./views/Categroy.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabs: [&#x27;home&#x27;, &#x27;about&#x27;, &#x27;categroy&#x27;],</span><br><span class="line">      // currentIndex: 0,</span><br><span class="line">      //决定当前显示哪一个组件</span><br><span class="line">      currentTab: &#x27;home&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick(tab) &#123;</span><br><span class="line">      this.currentTab = tab;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    About,</span><br><span class="line">    Categroy,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>动态组件传递数据和监听事件</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">      &lt;template v-for=&quot;item in tabs&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          :class=&quot;&#123; active: currentTab === item &#125;&quot;</span><br><span class="line">          @click=&quot;itemClick(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;views&quot;&gt;</span><br><span class="line">      &lt;!-- 和其他组件一样，能传数据，能监听事件,只不过传数据的时候相当于是给home about category都传了 --&gt;</span><br><span class="line">      &lt;component</span><br><span class="line">        :is=&quot;currentTab&quot;</span><br><span class="line">        name=&quot;alex&quot;</span><br><span class="line">        :age=&quot;18&quot;</span><br><span class="line">        @homeClick=&quot;homeClick&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line">import About from &#x27;./views/About.vue&#x27;;</span><br><span class="line">import Categroy from &#x27;./views/Categroy.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabs: [&#x27;home&#x27;, &#x27;about&#x27;, &#x27;categroy&#x27;],</span><br><span class="line">      // currentIndex: 0,</span><br><span class="line">      //决定当前显示哪一个组件</span><br><span class="line">      currentTab: &#x27;home&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick(payload) &#123;</span><br><span class="line">      console.log(payload);</span><br><span class="line">    &#125;,</span><br><span class="line">    itemClick(tab) &#123;</span><br><span class="line">      this.currentTab = tab;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    About,</span><br><span class="line">    Categroy,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;homeClick&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; name &#125;&#125;--&#123;&#123; age &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;name&#x27;, &#x27;age&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick() &#123;</span><br><span class="line">      this.$emit(&#x27;homeClick&#x27;, &#x27;我是home的参数&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-keep-alive"><a href="#4-keep-alive" class="headerlink" title="4. keep-alive"></a>4. keep-alive</h2><h3 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a><strong>4.1 基本使用</strong></h3><p>App.vue中变化的部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;about&quot;&gt;</span><br><span class="line">      &lt;component :is=&quot;currentTab&quot; /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>About.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;About&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;当前的计数：&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当我们点击about的按钮然后再切换的时候，整个about组件的状态不会保留，使用keep-alive会保留组件的状态，可以满足某些场景的需求，也能从一定程度上避免恶劣用户短时间大量操作dom。</p>
<p>keep-alive中填的是在options中填写的name</p>
<p>keep-alive：</p>
<p>​	默认缓存所有组件</p>
<p>​	include 缓存匹配的组件</p>
<p>​	exclude 不缓存匹配的组件</p>
<p>​	max 设置最大缓存组件数量，一旦达到这个数量，那么缓存的组件中最尽没有被访问过的就不再缓存</p>
<h3 id="4-2-缓存组件的生命周期"><a href="#4-2-缓存组件的生命周期" class="headerlink" title="4.2 缓存组件的生命周期"></a><strong>4.2 缓存组件的生命周期</strong></h3><p>对于缓存的组件，再次进入的时候，created和mounted不会再次触发，但是有时候我们又得知道何时进入了缓存的组件，何时从缓存的组件中离开了</p>
<p>activated 进入</p>
<p>deactivated 离开</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">      &lt;template v-for=&quot;item in tabs&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          :class=&quot;&#123; active: currentTab === item &#125;&quot;</span><br><span class="line">          @click=&quot;itemClick(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;views&quot;&gt;</span><br><span class="line">      &lt;!-- 缓存组件 --&gt;</span><br><span class="line">      &lt;keep-alive include=&quot;about&quot;&gt;</span><br><span class="line">        &lt;component :is=&quot;currentTab&quot; /&gt;</span><br><span class="line">      &lt;/keep-alive&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line">import About from &#x27;./views/About.vue&#x27;;</span><br><span class="line">import Categroy from &#x27;./views/Categroy.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabs: [&#x27;home&#x27;, &#x27;about&#x27;, &#x27;categroy&#x27;],</span><br><span class="line">      // currentIndex: 0,</span><br><span class="line">      //决定当前显示哪一个组件</span><br><span class="line">      currentTab: &#x27;home&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick(tab) &#123;</span><br><span class="line">      this.currentTab = tab;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    About,</span><br><span class="line">    Categroy,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>About</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;About&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;当前的计数：&#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;about&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    console.log(&#x27;进入了about&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  deactivated() &#123;</span><br><span class="line">    console.log(&#x27;离开了about&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#x27;创建完毕&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="5-异步组件"><a href="#5-异步组件" class="headerlink" title="5. 异步组件"></a>5. 异步组件</h2><h3 id="5-1-webpack的代码分包"><a href="#5-1-webpack的代码分包" class="headerlink" title="5.1 webpack的代码分包"></a><strong>5.1 webpack的代码分包</strong></h3><p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629195538701.png" alt="image-20230629195538701"></p>
<p>我们的math.js是直接引入的，组件化的过程中是直接通过模块化的依赖打包进<a href="http://app.xxxxxxx.js/">app.xxxxxxx.js</a></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629195549942.png" alt="image-20230629195549942"></p>
<p>所以我们对于一些不需要立即展示的组件会拆分为一个个的chunk，这些chunk不会在首屏就下载而是等用户进入到对应的页面再下载对应的js来运行。</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./utils/math&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; add &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// import math from &#x27;./utils/math&#x27;;</span></span><br><span class="line"><span class="comment">// webpack分包</span></span><br><span class="line"><span class="comment">// math.add(1, 2);</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="5-2-Vue实现异步组件"><a href="#5-2-Vue实现异步组件" class="headerlink" title="5.2 Vue实现异步组件"></a><strong>5.2 Vue实现异步组件</strong></h3><p>如果项目过大(路由懒加载)我们希望对于某些组件采用异步加载的形式(目的是为了分包),vue提供的一个函数</p>
<p>defineAsyncComponent:工厂函数 需要返回一个promise对象</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">      &lt;template v-for=&quot;item in tabs&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          :class=&quot;&#123; active: currentTab === item &#125;&quot;</span><br><span class="line">          @click=&quot;itemClick(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;views&quot;&gt;</span><br><span class="line">      &lt;component :is=&quot;currentTab&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line">// 使用异步组件</span><br><span class="line">// import About from &#x27;./views/About.vue&#x27;;</span><br><span class="line">const asyncAbout = defineAsyncComponent(() =&gt; import(&#x27;./views/About.vue&#x27;));</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    About: asyncAbout,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabs: [&#x27;home&#x27;, &#x27;about&#x27;],</span><br><span class="line">      // currentIndex: 0,</span><br><span class="line">      //决定当前显示哪一个组件</span><br><span class="line">      currentTab: &#x27;home&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick(tab) &#123;</span><br><span class="line">      this.currentTab = tab;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629195634824.png" alt="image-20230629195634824"></p>
<p>异步组件配合<strong>suspense</strong>实现<strong>骨架屏</strong></p>
<h2 id="6-组件的v-model"><a href="#6-组件的v-model" class="headerlink" title="6. 组件的v-model"></a>6. 组件的v-model</h2><h3 id="6-1-v-model在组件上做了什么"><a href="#6-1-v-model在组件上做了什么" class="headerlink" title="6.1 v-model在组件上做了什么"></a><strong>6.1 v-model在组件上做了什么</strong></h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 1.表单元素的v-model --&gt;</span><br><span class="line">    &lt;!-- 做了两件事 </span><br><span class="line">      1.动态绑定一个值</span><br><span class="line">      :value=&quot;msg&quot;  </span><br><span class="line">      2.监听事件</span><br><span class="line">      @input=&quot;msg=$event.target.value&quot;--&gt;</span><br><span class="line">    &lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; /&gt; --&gt;</span><br><span class="line">    &lt;!-- &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">    &lt;!-- 2.如果在组件上使用v-model也是做了两件事 --&gt;</span><br><span class="line">    &lt;h1&gt;父组件展示&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;home v-model=&quot;msg&quot; /&gt;</span><br><span class="line">    &lt;!-- 相当于如下的操作，只不过是属性的名称和事件不一样了--&gt;</span><br><span class="line">    &lt;!-- &lt;home :modelValue=&quot;msg&quot; @update:modelValue=&quot;msg = $event&quot; /&gt; --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;哈哈哈哈&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;inputChange&quot; /&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; modelValue &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;update:modelValue&#x27;],</span><br><span class="line">  name: &#x27;home&#x27;,</span><br><span class="line">  props: [&#x27;modelValue&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inputChange(event) &#123;</span><br><span class="line">      this.$emit(&#x27;update:modelValue&#x27;, event.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="6-2-v-model绑定多个属性"><a href="#6-2-v-model绑定多个属性" class="headerlink" title="6.2 v-model绑定多个属性"></a><strong>6.2 v-model绑定多个属性</strong></h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件展示--&#123;&#123; alex &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;!-- v-model绑定多个属性而且希望有自己的名字 --&gt;</span><br><span class="line">    &lt;home v-model=&quot;msg&quot; v-model:alex=&quot;alex&quot; /&gt;</span><br><span class="line">    &lt;home v-model:alex=&quot;alex&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./views/Home.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;哈哈哈哈&#x27;,</span><br><span class="line">      alex: &#x27;天河阔少&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;inputChange&quot; /&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; modelValue &#125;&#125;&lt;/h3&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; :value=&quot;alex&quot; @input=&quot;inputChange2&quot; /&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; alex &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;update:modelValue&#x27;, &#x27;update:alex&#x27;],</span><br><span class="line">  name: &#x27;home&#x27;,</span><br><span class="line">  props: [&#x27;modelValue&#x27;, &#x27;alex&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inputChange(event) &#123;</span><br><span class="line">      this.$emit(&#x27;update:modelValue&#x27;, event.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">    inputChange2(event) &#123;</span><br><span class="line">      this.$emit(&#x27;update:alex&#x27;, event.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-混入Mixin"><a href="#7-混入Mixin" class="headerlink" title="7. 混入Mixin"></a>7. 混入Mixin</h2><p>组件之间难免会有相同的代码逻辑，这个时候我们希望对相同的代码逻辑进行抽取。</p>
<p>my-mixin.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import myMixin from &#x27;@/mixin/my-mixin.js&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;home&#x27;,</span><br><span class="line">  //是mixins而不是mixin</span><br><span class="line">  mixins: [myMixin],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>全局混入，修改main.js</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> myMixin <span class="keyword">from</span> <span class="string">&#x27;./mixin/my-mixin&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">//全局混入</span></span><br><span class="line">app.<span class="title function_">mixin</span>(myMixin);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mixin的合并规则</p>
<ol>
<li>data的冲突</li>
</ol>
<p>以组件自身为主</p>
<ol start="2">
<li>生命周期的冲突</li>
</ol>
<p>mixin和组件自身的都会调用，而且mixin先调用。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629200232264.png" alt="image-20230629200232264"></p>
<p>因为在模版中先使用的是home所以home在上面</p>
<ol start="3">
<li>methods的冲突</li>
</ol>
<p>以组件自身为准</p>
<p>实例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是混入&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;sayHello&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;home&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;home的msg&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#x27;我是自身的&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">      console.log(456);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的组件化通信(二)</title>
    <url>/2022/06/21/b42%20VUE%E7%BB%84%E4%BB%B6%E5%8C%96%E9%80%9A%E4%BF%A1(%E4%BA%8C)/</url>
    <content><![CDATA[<h1 id="6-28-slot和非父子组件通信"><a href="#6-28-slot和非父子组件通信" class="headerlink" title="6-28 slot和非父子组件通信"></a>6-28 slot和非父子组件通信<span id="more"></span></h1><h2 id="1-插槽的基本使用"><a href="#1-插槽的基本使用" class="headerlink" title="1. 插槽的基本使用"></a>1. 插槽的基本使用</h2><h3 id="1-1-认识插槽"><a href="#1-1-认识插槽" class="headerlink" title="1.1 认识插槽"></a><strong>1.1 认识插槽</strong></h3><p>让使用者可以决定某一块区域到底存放什么内容和元素</p>
<h3 id="1-2-如何使用插槽slot"><a href="#1-2-如何使用插槽slot" class="headerlink" title="1.2 如何使用插槽slot"></a><strong>1.2 如何使用插槽slot</strong></h3><p> 如果需要让组件更加的灵活，可以展示不同的内容和元素就得使用插槽，使用插槽的核心是<strong>抽取共性，预留不同</strong>，我们会将共同的元素，内容依然在组件内封装，将不同的结构使用slot占位，让外部决定到底显示什么</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 组件在使用的时候是可以写成单标签的 </span><br><span class="line">    但是一旦使用了插槽就得写成双标签--&gt;</span><br><span class="line">    &lt;show-message title=&quot;123&quot;&gt;</span><br><span class="line">      &lt;h1&gt;我是插入的h1&lt;/h1&gt;</span><br><span class="line">    &lt;/show-message&gt;</span><br><span class="line">    &lt;show-message title=&quot;图片&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./assets/logo.png&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;/show-message&gt;</span><br><span class="line">    &lt;show-message title=&quot;按钮&quot;&gt;</span><br><span class="line">      &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/show-message&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowMessage from &#x27;./components/ShowMessage.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowMessage,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ShowMessage.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;msg&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 使用slot占位，在父组件中让使用者决定要放入什么结构和内容 --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;我是默认的标题&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.msg &#123;</span><br><span class="line">  border: solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-插槽的默认内容"><a href="#1-3-插槽的默认内容" class="headerlink" title="1.3 插槽的默认内容"></a><strong>1.3 插槽的默认内容</strong></h3><p>有些时候我们使用插槽时，没有插入对应的内容，需要显示一个默认的内容。</p>
<p>插槽的默认内容直接写在的内部即可</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;show-message title=&quot;123&quot;&gt; &lt;/show-message&gt;</span><br><span class="line">    &lt;show-message title=&quot;图片&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./assets/logo.png&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;/show-message&gt;</span><br><span class="line">    &lt;show-message title=&quot;按钮&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowMessage from &#x27;./components/ShowMessage.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowMessage,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>ShowMessage.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;msg&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">      &lt;!-- 使用的时候不传递结构，默认展示为p --&gt;</span><br><span class="line">      &lt;p&gt;我是默认的内容&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;我是默认的标题&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.msg &#123;</span><br><span class="line">  border: solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="1-4-多个插槽的时候"><a href="#1-4-多个插槽的时候" class="headerlink" title="1.4 多个插槽的时候"></a><strong>1.4 多个插槽的时候</strong></h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav-bar&gt;</span><br><span class="line">      &lt;button&gt;左边返回&lt;/button&gt;</span><br><span class="line">      &lt;p&gt;中间标题&lt;/p&gt;</span><br><span class="line">      &lt;i&gt;右边的icon&lt;/i&gt;</span><br><span class="line">    &lt;/nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBar from &#x27;./components/NavBar.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NavBar.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;nav-bar&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.nav-bar &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  height: 40px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>多个插槽时，默认把我们传递的结构当作一个整体，在每个插槽使用。</p>
<h2 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h2><h3 id="2-1-具名插槽的基本使用"><a href="#2-1-具名插槽的基本使用" class="headerlink" title="2.1 具名插槽的基本使用"></a><strong>2.1 具名插槽的基本使用</strong></h3><p>给插槽起个名字，使用slot元素的特殊的attribute，<strong>name</strong></p>
<p>不写name的slot默认会有一个default （默认插槽）</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav-bar&gt;</span><br><span class="line">      &lt;!-- 指定结构插入到那个插槽 v-slot:name --&gt;</span><br><span class="line">      &lt;template v-slot:center&gt;</span><br><span class="line">        &lt;p&gt;中间标题&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:right&gt;</span><br><span class="line">        &lt;i&gt;右边的icon&lt;/i&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:left&gt;</span><br><span class="line">        &lt;button&gt;左边返回&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBar from &#x27;./components/NavBar.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>NavBar.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;nav-bar&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;!-- 给插槽起个名字，使用的时候方便插入我想要的结构到具体的某一个插槽 --&gt;</span><br><span class="line">      &lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.nav-bar &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  height: 40px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-2-动态插槽名"><a href="#2-2-动态插槽名" class="headerlink" title="2.2 动态插槽名"></a><strong>2.2 动态插槽名</strong></h3><p>2.1中我们写的插槽的名字都是固定死的，可以通过**v-slot:[ dynamicSlotName]**来动态绑定名称</p>
<p>App.vue</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630121730140.png" alt="image-20230630121730140"></p>
<h3 id="2-3-具名插槽使用的缩写"><a href="#2-3-具名插槽使用的缩写" class="headerlink" title="2.3 具名插槽使用的缩写"></a><strong>2.3 具名插槽使用的缩写</strong></h3><p>v-on缩写@,v-bind缩写:,v-slot:缩写#</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav-bar&gt;</span><br><span class="line">      &lt;template v-slot:[position]&gt;</span><br><span class="line">        &lt;button&gt;左边返回&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- 具名插槽的缩写 --&gt;</span><br><span class="line">      &lt;template #center&gt;</span><br><span class="line">        &lt;p&gt;中间标题&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:right&gt;</span><br><span class="line">        &lt;i&gt;右边的icon&lt;/i&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBar from &#x27;./components/NavBar.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      position: &#x27;left&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h2><h3 id="3-1-渲染作用域"><a href="#3-1-渲染作用域" class="headerlink" title="3.1 渲染作用域"></a><strong>3.1 渲染作用域</strong></h3><p>父级模版里面的所有内容都是在父级作用域中编译的</p>
<p>子模版里面的所有内容都是在子级作用域中编译的</p>
<p>案例：在NavBar中可以访问自己作用域的title，但是在App中的h2无法访问，因为他是跨作用域的</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630121837053.png" alt="image-20230630121837053"></p>
<p>但是，我们往往又希望插槽可以访问到子组件中的内容，这个时候就得用到作用域插槽</p>
<h3 id="3-2-作用域插槽"><a href="#3-2-作用域插槽" class="headerlink" title="3.2 作用域插槽"></a><strong>3.2 作用域插槽</strong></h3><p>作用域插槽就是为了解决3.1的问题，让插槽可以访问子组件中的内容</p>
<ol>
<li><p>在App.vue中定义好数据</p>
</li>
<li><p>传递给子组件</p>
</li>
<li><p>在子组件中使用数据</p>
</li>
<li><p>定义插槽的props</p>
</li>
<li><p>通过v-slot:default的方式获取到插槽的props</p>
</li>
<li><p>使用插槽的props拿到子组件中的内容</p>
</li>
</ol>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630121910467.png" alt="image-20230630121910467"></p>
<p>插槽能够访问到子组件中的内容，本质是把slot当作一个组件传递<strong>props</strong></p>
<h3 id="3-3-独占默认插槽的缩写"><a href="#3-3-独占默认插槽的缩写" class="headerlink" title="3.3 独占默认插槽的缩写"></a><strong>3.3 独占默认插槽的缩写</strong></h3><p>如果我们的插槽是默认插槽default，那么<strong>v-slot:default&#x3D;”xxxxx”<strong>可以简写为</strong>v-slot&#x3D;”xxxxx”</strong></p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav-bar&gt;</span><br><span class="line">      &lt;!-- 解构不要忘记 --&gt;</span><br><span class="line">      &lt;!-- &lt;template v-slot:default=&quot;&#123; title &#125;&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt; --&gt;</span><br><span class="line">      &lt;!-- 独占默认插槽可以简写 --&gt;</span><br><span class="line">      &lt;template v-slot=&quot;&#123; title &#125;&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBar from &#x27;./components/NavBar.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NavBar.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :title=&quot;title&quot;&gt; &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;哈哈哈哈&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>而且，如果我们的插槽只有默认插槽，组件标签可以直接当作插槽的模版（template）来使用</p>
<p>意思就是你的v-slot可以直接写在组件标签上</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav-bar v-slot=&quot;&#123; title &#125;&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBar from &#x27;./components/NavBar.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NavBar.vue没变化</p>
<h3 id="3-4-默认插槽和具名插槽混用"><a href="#3-4-默认插槽和具名插槽混用" class="headerlink" title="3.4 默认插槽和具名插槽混用"></a><strong>3.4 默认插槽和具名插槽混用</strong></h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav-bar&gt;</span><br><span class="line">      &lt;!-- 只要有多个插槽，始终写成template形式 --&gt;</span><br><span class="line">      &lt;template v-slot=&quot;&#123; title &#125;&quot;&gt;</span><br><span class="line">        &lt;h2&gt;我是默认插槽的内容--&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #jack=&quot;&#123; title &#125;&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBar from &#x27;./components/NavBar.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NavBar.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :title=&quot;title&quot;&gt; &lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;jack&quot; :title=&quot;title&quot;&gt; &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;哈哈哈哈&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-非父子组件通信"><a href="#4-非父子组件通信" class="headerlink" title="4. 非父子组件通信"></a>4. 非父子组件通信</h2><p>在实际开发中父子组件之间的通信往往选择props和emits,除了父子之外我们还有一些其他的关系组件需要通信，比如爷孙，比如兄弟,甚至还有关系不太好描述的组件.</p>
<p>两种：全局事件总线bus,<strong>provide&#x2F;inject</strong></p>
<h3 id="4-1-全局事件总线"><a href="#4-1-全局事件总线" class="headerlink" title="4.1 全局事件总线"></a><strong>4.1 全局事件总线</strong></h3><p>在Vue2中是自带的，但是Vue3没有了移除了$on,$off,$once…方法，如果我们希望继续使用事件总线，要通过第三方的库。</p>
<p>mitt</p>
<ol>
<li><p>安装 npm install mitt -S</p>
</li>
<li><p>配置 在src&#x2F;utils&#x2F;bus.js中写入如下内容</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事件总线</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> bus = <span class="title function_">mitt</span>();</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> bus;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开始使用，就可以在任意关系的.vue文件之间传递数据</li>
</ol>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;school-com&gt;&lt;/school-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入bus</span><br><span class="line">import bus from &#x27;@/utils/bus&#x27;;</span><br><span class="line">import SchoolCom from &#x27;./components/SchoolCom.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [&#x27;alex&#x27;, &#x27;jesscia&#x27;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  //组件被创建完毕</span><br><span class="line">  //监听eventbus事件但是不能发送</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  //虚拟DOM-&gt;真实DOM</span><br><span class="line">  //可以发送eventbus事件</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    bus.emit(&#x27;list&#x27;, this.list);</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SchoolCom,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>StudentCom.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">    &lt;h1&gt;1233122&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in arr&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#x27;@/utils/bus&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    bus.on(&#x27;list&#x27;, (data) =&gt; &#123;</span><br><span class="line">      console.log(data);</span><br><span class="line">      this.arr = data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.student &#123;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>虽然我们是爷爷和孙子通信但是这种bus的通信方式，任意关系的组件均可</p>
<p>发送数据 bus.emit(‘事件名称’,数据)</p>
<p>接收数据bus.on(‘事件名称’,(数据)&#x3D;&gt;{…})</p>
<p>接收所有的数据 bus.on(‘*’,(type,data)&#x3D;&gt;{type具体的某一个事件，data该事件的数据})</p>
<p>停止监听事件 bus.off(‘事件名称’)</p>
<h3 id="4-2-Provide和Inject"><a href="#4-2-Provide和Inject" class="headerlink" title="4.2 Provide和Inject"></a><strong>4.2 Provide和Inject</strong></h3><p>Provide和inject用于父辈组件向后代组件传递数据</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;editArr&quot;&gt;点我修改arr&lt;/button&gt;</span><br><span class="line">    &lt;app-father&gt;&lt;/app-father&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import AppFather from &#x27;./components/AppFather.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    editArr() &#123;</span><br><span class="line">      this.arr.push(4);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  //你要想用data中的数据this相关的，就得写成函数形式</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;alex&#x27;,</span><br><span class="line">      age: 18,</span><br><span class="line">      arr: this.arr,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  // //provide 提供给后代组件</span><br><span class="line">  // provide: &#123;</span><br><span class="line">  //   name: &#x27;alex&#x27;,</span><br><span class="line">  //   age: 18,</span><br><span class="line">  //   //this未定义 this指向谁？</span><br><span class="line">  //   //指向script根标签的this undefined</span><br><span class="line">  //   arr: this,</span><br><span class="line">  // &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [1, 2, 3],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    AppFather,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AppSon.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123; name &#125;&#125;---&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; arr &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //用inject来接收</span><br><span class="line">  inject: [&#x27;name&#x27;, &#x27;age&#x27;, &#x27;arr&#x27;],</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //undefined</span><br><span class="line">    console.log(this.arr);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>解决透传的时候响应式失效的问题,用vue3的computed</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;editArr&quot;&gt;点我修改arr&lt;/button&gt;</span><br><span class="line">    &lt;app-father&gt;&lt;/app-father&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//用到vue3提供的函数来解决</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AppFather from &#x27;./components/AppFather.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    editArr() &#123;</span><br><span class="line">      this.arr.push(4);</span><br><span class="line">      console.log(this.arr);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;alex&#x27;,</span><br><span class="line">      age: 18,</span><br><span class="line">      //用computed解决响应式丢失</span><br><span class="line">      length: computed(() =&gt; this.arr.length),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [1, 2, 3],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    AppFather,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AppSon.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123; name &#125;&#125;---&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //用inject来接收</span><br><span class="line">  inject: [&#x27;name&#x27;, &#x27;age&#x27;, &#x27;length&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的组件化通信(一)</title>
    <url>/2022/06/20/b41%20VUE%E7%BB%84%E4%BB%B6%E5%8C%96%E9%80%9A%E4%BF%A1(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="组件化通信"><a href="#组件化通信" class="headerlink" title="组件化通信"></a>组件化通信<span id="more"></span></h1><h2 id="1-Vue组件的嵌套关系"><a href="#1-Vue组件的嵌套关系" class="headerlink" title="1. Vue组件的嵌套关系"></a>1. Vue组件的嵌套关系</h2><h3 id="1-1-认识组件的嵌套"><a href="#1-1-认识组件的嵌套" class="headerlink" title="1.1 认识组件的嵌套"></a><strong>1.1 认识组件的嵌套</strong></h3><p>把如下结构拆分成组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;top bannerdiv&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;nav&quot;&gt;div&gt;</span><br><span class="line">    div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;banner&quot;&gt;bannerdiv&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;商品列表1li&gt;</span><br><span class="line">        &lt;li&gt;商品列表2li&gt;</span><br><span class="line">        &lt;li&gt;商品列表3li&gt;</span><br><span class="line">        &lt;li&gt;商品列表4li&gt;</span><br><span class="line">      ul&gt;</span><br><span class="line">    div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;div&gt;物流配送div&gt;</span><br><span class="line">      &lt;div&gt;版权声明div&gt;</span><br><span class="line">      &lt;div&gt;免责声明div&gt;</span><br><span class="line">      &lt;div&gt;注册地址：XXXXXdiv&gt;</span><br><span class="line">    div&gt;</span><br><span class="line">  div&gt;</span><br><span class="line">template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">style&gt;</span><br></pre></td></tr></table></figure>





<p><img src="https://docimg5.docs.qq.com/image/AgAABlP525xQIwSredZF145EaC9T8V_i.png?w=442&h=233" alt="img"></p>
<p>拆分成如上结构以后，我们只需要去对应的组件，编写对应的逻辑即可。</p>
<h3 id="1-2-组件的通信"><a href="#1-2-组件的通信" class="headerlink" title="1.2 组件的通信"></a><strong>1.2 组件的通信</strong></h3><p>实际开发的时候，我们会经常遇到需要组件直接进行<strong>通信</strong>，即相互传递某些数据</p>
<p>在Vue中不管是面试还是实际开发，组件间的通信都非常的重要。</p>
<h2 id="2-父子组件通信"><a href="#2-父子组件通信" class="headerlink" title="2. 父子组件通信**"></a>2. 父子组件通信**</h2><h3 id="2-1-父子组件通信的方式"><a href="#2-1-父子组件通信的方式" class="headerlink" title="2.1 父子组件通信的方式"></a><strong>2.1 父子组件通信的方式</strong></h3><p>父组件传递给子组件：通过<strong>props</strong>属性</p>
<p>子组件传递给父组件：通过**$emit**触发事件</p>
<h3 id="2-2-父组件传递给子组件"><a href="#2-2-父组件传递给子组件" class="headerlink" title="2.2 父组件传递给子组件"></a><strong>2.2 父组件传递给子组件</strong></h3><p>props：props就是组件上自定义的attribute，父组件给这些attributes赋值，子组件通过对应的attribute的名称来使用。</p>
<p>props有两种常见的写法</p>
<ol>
<li><p>字符串数组:数组中的字符串就是attribute的名称</p>
</li>
<li><p>对象</p>
</li>
</ol>
<h4 id="2-2-1-props的数组用法"><a href="#2-2-1-props的数组用法" class="headerlink" title="2.2.1 props的数组用法"></a><strong>2.2.1 props的数组用法</strong></h4><p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名:&#123;&#123; name &#125;&#125;h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄:&#123;&#123; age &#125;&#125;h2&gt;</span><br><span class="line">    &lt;h2&gt;身高:&#123;&#123; height &#125;&#125;h2&gt;</span><br><span class="line">  div&gt;</span><br><span class="line">template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //props 接收父组件传递过来的数据</span><br><span class="line">  props: [&#x27;name&#x27;, &#x27;age&#x27;, &#x27;height&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;</span><br><span class="line">    &lt;show-info name=&quot;alex&quot; :age=<span class="string">&quot;18&quot;</span> :height=<span class="string">&quot;1.8&quot;</span>&gt;&lt;/show-info&gt;</span><br><span class="line">    &lt;show-info name=<span class="string">&quot;kern&quot;</span> :age=<span class="string">&quot;88&quot;</span> :height=<span class="string">&quot;1.6&quot;</span>&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from <span class="string">&#x27;./components/ShowInfo.vue&#x27;</span>;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;xxxxxxxxxx &lt;template&gt;  &lt;<span class="selector-tag">div</span> id=&quot;app&quot;&gt;    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;    &lt;show-info name=&quot;alex&quot; :age=<span class="string">&quot;18&quot;</span> :height=<span class="string">&quot;1.8&quot;</span>&gt;&lt;/show-info&gt;    &lt;show-info name=<span class="string">&quot;kern&quot;</span> :age=<span class="string">&quot;88&quot;</span> :height=<span class="string">&quot;1.6&quot;</span>&gt;&lt;/show-info&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ShowInfo from <span class="string">&#x27;./components/ShowInfo.vue&#x27;</span>;export default &#123;  name: <span class="string">&#x27;App&#x27;</span>,  components: &#123;    ShowInfo,  &#125;,&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;* &#123;  <span class="attribute">margin</span>: <span class="number">10px</span>;&#125;&lt;/style&gt;* &#123;  <span class="attribute">margin</span>: <span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要传递的数据非常多，而且这些数据有一定的共性，我们往往会选择全部放到一个对象里面来prop下去。</p>
<p>App.vue</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;</span><br><span class="line">    &lt;show-info :person=<span class="string">&quot;person&quot;</span>&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from <span class="string">&#x27;./components/ShowInfo.vue&#x27;</span>;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="built_in">data</span>() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      person: &#123;</span><br><span class="line">        name: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        height: <span class="number">1.8</span>,</span><br><span class="line">        hobby: <span class="string">&#x27;唱&#x27;</span>,</span><br><span class="line">        weight: <span class="string">&#x27;140斤&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>ShowInfo.vue</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;</span><br><span class="line">    &lt;show-info :person=<span class="string">&quot;person&quot;</span>&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from <span class="string">&#x27;./components/ShowInfo.vue&#x27;</span>;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="built_in">data</span>() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      person: &#123;</span><br><span class="line">        name: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        height: <span class="number">1.8</span>,</span><br><span class="line">        hobby: <span class="string">&#x27;唱&#x27;</span>,</span><br><span class="line">        weight: <span class="string">&#x27;140斤&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-props对象写法"><a href="#2-2-2-props对象写法" class="headerlink" title="2.2.2 props对象写法"></a><strong>2.2.2 props对象写法</strong></h4><p>数组用法中我们只能传递attribute的名称，而且不能对其添加任意的限制，对象写法可以让我们的props更加的完善。</p>
<p>比如 限定传入的数据类型 type</p>
<p>比如 限定是否必传 required</p>
<p>比如 是否有默认值 default</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;</span><br><span class="line">    &lt;show-info :person=&quot;person&quot;&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from &#x27;./components/ShowInfo.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      person: &#123;</span><br><span class="line">        name: &#x27;alex&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        height: 1.8,</span><br><span class="line">        hobby: &#x27;唱&#x27;,</span><br><span class="line">        weight: &#x27;140斤&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>ShowInfo.vue</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;templa&lt;template&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;</span><br><span class="line">    &lt;show-info :person=<span class="string">&quot;person&quot;</span>&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from <span class="string">&#x27;./components/ShowInfo.vue&#x27;</span>;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="built_in">data</span>() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      person: &#123;</span><br><span class="line">        name: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        height: <span class="number">1.8</span>,</span><br><span class="line">        hobby: <span class="string">&#x27;唱&#x27;</span>,</span><br><span class="line">        weight: <span class="string">&#x27;140斤&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">te&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;姓名:&#123;&#123; name &#125;&#125;&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;年龄:&#123;&#123; age &#125;&#125;&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;身高:&#123;&#123; <span class="attribute">height</span> &#125;&#125;&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">      &#123;&#123; friend &#125;&#125;</span><br><span class="line">    &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //props的对象写法，更加完善</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attribute">height</span>: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    friend: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      //这样写是不对的，对象类型的prop写default的时候必须使用函数</span><br><span class="line">      // default: &#123;</span><br><span class="line">      //   name: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">      // &#125;,</span><br><span class="line">      default: () =&gt; &#123;</span><br><span class="line">        return &#123; name: <span class="string">&#x27;jack&#x27;</span> &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>细节一：type类型都可以写那些</p>
<p><strong>String Number Boolean Array Object</strong> Date Function Symbol </p>
<p>细节二：传递对象类型的时候默认值,如果设置默认值必须写成函数。if组件存在多个实例，如果不使用函数的话，因为数组和对象都是引用类型，所以可能会导致在某一个实例中修改了数据，其他的实例都会被影响，他的本质原因和之前讲的data为什么必须是一个函数一样。</p>
<p>App.vue</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- name前面不加：因为我们没有alex这个变量 --&gt;</span><br><span class="line">    &lt;show-info :person=<span class="string">&quot;person&quot;</span>&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from <span class="string">&#x27;./components/ShowInfo.vue&#x27;</span>;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="built_in">data</span>() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      person: &#123;</span><br><span class="line">        name: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        height: <span class="number">1.8</span>,</span><br><span class="line">        hobby: <span class="string">&#x27;唱&#x27;</span>,</span><br><span class="line">        weight: <span class="string">&#x27;140斤&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄:&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;身高:&#123;&#123; height &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &#123;&#123; friend &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //props的对象写法，更加完善</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    height: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 2,</span><br><span class="line">    &#125;,</span><br><span class="line">    friend: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      //这样写是不对的，对象类型的prop写default的时候必须使用函数</span><br><span class="line">      // default: &#123;</span><br><span class="line">      //   name: &#x27;jack&#x27;,</span><br><span class="line">      // &#125;,</span><br><span class="line">      default: () =&gt; &#123;</span><br><span class="line">        return &#123; name: &#x27;jack&#x27; &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>细节三：prop的命名方式</p>
<p>在html中attribute名称<strong>大小写不敏感</strong>，浏览器会把所有的大写转成小写</p>
<p>当你在DOM的模版中使用小驼峰写prop的时候需要使用等价的短横线命名</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;show-info :show-msg=&quot;msg&quot;&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ShowInfo from &#x27;./components/ShowInfo.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;123&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShowInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h1&gt;展示商品信息&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; showMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;showMsg&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>命名</p>
<p><strong>组件命名：注册的时候大驼峰，使用的时候短横线全小写</strong></p>
<p><strong>props: 传递的时候短横线(大小写不敏感),使用的时候小驼峰</strong></p>
<h4 id="2-2-3-非prop的attribute"><a href="#2-2-3-非prop的attribute" class="headerlink" title="2.2.3 非prop的attribute"></a><strong>2.2.3 非prop的attribute</strong></h4><p>定义：传递给组件的属性，没有在组件中使用对应的props定义，比如class,id,style</p>
<p>Attribute继承</p>
<p>​	当组件有单个根节点时，非prop的attribute会自动添加到组件的根节点的Attribute上</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629192722486.png" alt="image-20230629192722486"></p>
<p>如果我们不希望组件继承这个attribute，可以在组件中设置 inheritAttrs:false。</p>
<p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h1&gt;展示商品信息&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; showMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 我们可以通过$attrs来访问所有的非prop的attributes --&gt;</span><br><span class="line">    &lt;p v-bind=&quot;$attrs&quot;&gt;我接受到所有的attr&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //设置以后  最外层的div不会有active类名</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;showMsg&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h1&gt;展示商品信息&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; showMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 我们可以通过$attrs来访问所有的非prop的attributes --&gt;</span><br><span class="line">    &lt;p v-bind=&quot;$attrs&quot;&gt;我接受到所有的attr&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //设置以后  最外层的div不会有active类名</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;showMsg&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>多个根节点attribute</p>
<p>​	会警告，我们必须手动绑定对应的属性</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h1&gt;展示商品信息&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; showMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 我们可以通过$attrs来访问所有的非prop的attributes --&gt;</span><br><span class="line">    &lt;p v-bind=&quot;$attrs&quot;&gt;我接受到所有的attr&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //设置以后  最外层的div不会有active类名</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;showMsg&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;h1&gt;展示商品信息&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; showMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 我们可以通过$attrs来访问所有的非prop的attributes --&gt;</span><br><span class="line">    &lt;p v-bind=&quot;$attrs&quot;&gt;我接受到所有的attr&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //设置以后  最外层的div不会有active类名</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;showMsg&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="2-3-子组件传递给父组件"><a href="#2-3-子组件传递给父组件" class="headerlink" title="2.3 子组件传递给父组件"></a><strong>2.3 子组件传递给父组件</strong></h3><ol>
<li><p>在子组件中定义好触发事件的名称</p>
</li>
<li><p>在父组件中以v-on的形式监听第一步的事件名，并且写好对应的回调</p>
</li>
<li><p>在子组件中触发事件的时候，父组件根据监听的回调进行对应的处理</p>
</li>
</ol>
<h4 id="2-3-1-基本使用"><a href="#2-3-1-基本使用" class="headerlink" title="2.3.1 基本使用"></a><strong>2.3.1 基本使用</strong></h4><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前计数&#123;&#123; counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 2.v-on监听add事件 --&gt;</span><br><span class="line">    &lt;add-counter @add=&quot;addBtn&quot;&gt;&lt;/add-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import AddCounter from &#x27;./components/AddCounter.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addBtn() &#123;</span><br><span class="line">      //3.当子组件中的按钮被点击这个函数会执行</span><br><span class="line">      this.counter++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    AddCounter,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>AddCounter.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;btnClick&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick() &#123;</span><br><span class="line">      //1.定义好事件的名称通过$emit</span><br><span class="line">      //定义好一个add事件给父组件监听</span><br><span class="line">      this.$emit(&#x27;add&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="2-3-2-emit传参"><a href="#2-3-2-emit传参" class="headerlink" title="2.3.2 emit传参"></a><strong>2.3.2 emit传参</strong></h4><p>AddCounter.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;btnClick(1)&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;btnClick(5)&quot;&gt;+5&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;btnClick(100)&quot;&gt;+100&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //为了开发者工具考虑在option中声明emit</span><br><span class="line">  //1.数组语法</span><br><span class="line">  // emits: [&#x27;add&#x27;],</span><br><span class="line">  //2. 对象语法</span><br><span class="line">  //添加校验</span><br><span class="line">  emits: &#123;</span><br><span class="line">    //如果校验失败会弹出警告</span><br><span class="line">    add: function (count) &#123;</span><br><span class="line">      if (count &lt;= 5) &#123;</span><br><span class="line">        return true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        console.log(123, &#x27;校验失败&#x27;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick(num) &#123;</span><br><span class="line">      //1. 定义事件</span><br><span class="line">      //第一个参数自定义事件的名称</span><br><span class="line">      //第二个参数是你要传递的参数</span><br><span class="line">      this.$emit(&#x27;add&#x27;, num);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前计数&#123;&#123; counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 2.v-on监听add事件 --&gt;</span><br><span class="line">    &lt;add-counter @add=&quot;addBtn&quot;&gt;&lt;/add-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import AddCounter from &#x27;./components/AddCounter.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //接收参数</span><br><span class="line">    addBtn(count) &#123;</span><br><span class="line">      //count接收参数</span><br><span class="line">      //3.当子组件中的按钮被点击这个函数会执行</span><br><span class="line">      this.counter += count;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    AddCounter,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自己写一下减法的，创建一个SubCounter.vue</p>
<h2 id="3-练习"><a href="#3-练习" class="headerlink" title="3. 练习"></a>3. 练习</h2><h3 id="3-1-tab切换"><a href="#3-1-tab切换" class="headerlink" title="3.1 tab切换"></a><strong>3.1 tab切换</strong></h3><p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629193012805.png" alt="image-20230629193012805"></p>
<p>TabControl.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;tab-control&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-for=&quot;(item, index) in titles&quot;</span><br><span class="line">      :key=&quot;&#123; item &#125;&quot;</span><br><span class="line">      class=&quot;item&quot;</span><br><span class="line">      :class=&quot;&#123; active: index === currentIndex &#125;&quot;</span><br><span class="line">      @click=&quot;itemClick(index)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentIndex: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  //props接收</span><br><span class="line">  props: [&#x27;titles&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick(index) &#123;</span><br><span class="line">      // console.log(123);</span><br><span class="line">      this.currentIndex = index;</span><br><span class="line">      this.$emit(&#x27;itemChange&#x27;, index);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.tab-control &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  height: 40px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  .item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">  .item.active &#123;</span><br><span class="line">    color: orange;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">    border-bottom: 1px solid orange;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>app.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;tab-control</span><br><span class="line">      :titles=&quot;[&#x27;phone&#x27;, &#x27;pc&#x27;, &#x27;others&#x27;]&quot;</span><br><span class="line">      @itemChange=&quot;itemChange&quot;</span><br><span class="line">    &gt;&lt;/tab-control&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; pageContents[index] &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import TabControl from &#x27;./components/TabControl.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      pageContents: [</span><br><span class="line">        &#x27;手机页面这里有很多99包邮的手机&#x27;,</span><br><span class="line">        &#x27;电脑:imac大折扣0元购&#x27;,</span><br><span class="line">        &#x27;周边:双飞燕键鼠套装1.9包邮&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      index: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemChange(index) &#123;</span><br><span class="line">      // console.log(index);</span><br><span class="line">      this.index = index;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    TabControl,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2-购物车🛒"><a href="#3-2-购物车🛒" class="headerlink" title="3.2 购物车🛒"></a><strong>3.2 购物车🛒</strong></h3><p>data.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">list</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">625153951363</span>,</span><br><span class="line">      <span class="comment">//商品数量</span></span><br><span class="line">      <span class="attr">number</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="comment">//已购数量</span></span><br><span class="line">      <span class="attr">buy_num</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">select</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;2020西太湖国际音乐节&#x27;</span>,</span><br><span class="line">      <span class="attr">showTime</span>: <span class="string">&#x27;2020.09.19-09.20&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="string">&#x27;100&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;常州&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;常州西太湖中国花卉博览景区北门&#x27;</span>,</span><br><span class="line">      <span class="attr">pic</span>: <span class="string">&#x27;https://img.alicdn.com/bao/uploaded/https://img.alicdn.com/imgextra/i3/2251059038/O1CN01zJEpaN2GdSG1Xvo8y_!!2251059038.jpg&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">624506842658</span>,</span><br><span class="line">      <span class="attr">number</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">buy_num</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">select</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;2020舟山东海音乐节&#x27;</span>,</span><br><span class="line">      <span class="attr">showTime</span>: <span class="string">&#x27;2020.09.04-09.06&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="string">&#x27;200&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;舟山&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;舟山市朱家尖南沙景区沙滩&#x27;</span>,</span><br><span class="line">      <span class="attr">pic</span>: <span class="string">&#x27;https://img.alicdn.com/bao/uploaded/i4/2251059038/O1CN01L70FVl2GdSG2wpwyE_!!0-item_pic.jpg&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">623216520608</span>,</span><br><span class="line">      <span class="attr">number</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">buy_num</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">select</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;中国•磐安 2020氧气山水音乐节&#x27;</span>,</span><br><span class="line">      <span class="attr">showTime</span>: <span class="string">&#x27;2020.08.22 周六 16:30&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="string">&#x27;300&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;金华&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;金华磐安花溪风景区&#x27;</span>,</span><br><span class="line">      <span class="attr">pic</span>: <span class="string">&#x27;https://img.alicdn.com/bao/uploaded/https://img.alicdn.com/imgextra/i3/2251059038/O1CN01ECp69h2GdSFpoUPAm_!!2251059038.jpg&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">624345993344</span>,</span><br><span class="line">      <span class="attr">number</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">buy_num</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">select</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;2020“一生中最爱”七夕演唱会&#x27;</span>,</span><br><span class="line">      <span class="attr">showTime</span>: <span class="string">&#x27;2020.08.25 周二 19:30&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="string">&#x27;400&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;糖果TANGO-雍和宫店三层&#x27;</span>,</span><br><span class="line">      <span class="attr">pic</span>: <span class="string">&#x27;https://img.alicdn.com/bao/uploaded/i3/2251059038/O1CN01WGNYBE2GdSFqXJgII_!!0-item_pic.jpg&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">624170605605</span>,</span><br><span class="line">      <span class="attr">number</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">buy_num</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">select</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;东海五渔节之敢潮音乐节&#x27;</span>,</span><br><span class="line">      <span class="attr">showTime</span>: <span class="string">&#x27;2020.08.22 周六 18:00&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="string">&#x27;500&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;舟山&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;舟山嵊泗五龙乡听海广场(原黄沙村船厂)&#x27;</span>,</span><br><span class="line">      <span class="attr">pic</span>: <span class="string">&#x27;https://img.alicdn.com/bao/uploaded/https://img.alicdn.com/imgextra/i1/2251059038/O1CN01eV5pR32GdSFxJUb0v_!!2251059038.jpg&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt; 全选&lt;/div&gt;</span><br><span class="line">      &lt;ul class=&quot;center&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;div class=&quot;select&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;pic&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;name&quot;&gt;asdhgfasghdfg&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;price&quot;&gt;￥ &lt;span&gt;100.00&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;number&quot;&gt;</span><br><span class="line">            &lt;button&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; value=&quot;1&quot; /&gt;</span><br><span class="line">            &lt;button&gt;+&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;subtotal&quot;&gt;￥ &lt;span&gt;100.00&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;del&quot;&gt;</span><br><span class="line">            &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">        &lt;p&gt;总购买数量: 3&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;button class=&quot;pay&quot;&gt;去结算&lt;/button&gt;</span><br><span class="line">          &lt;button class=&quot;clear&quot;&gt;清空购物车&lt;/button&gt;</span><br><span class="line">          &lt;button class=&quot;clear_select&quot;&gt;删除所有已选中&lt;/button&gt;</span><br><span class="line">          &lt;button class=&quot;list&quot;&gt;返回列表页&lt;/button&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;总价格 : ￥ &lt;span&gt;100.00&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import mock from &#x27;./data&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: mock.list,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">button,</span><br><span class="line">input &#123;</span><br><span class="line">  outline: none;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line">img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  padding: 10px 0;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">.content .top,</span><br><span class="line">.content .bottom &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .top &gt; input &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  margin: 0 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &#123;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &gt; p button &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  padding: 3px 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &gt; p &gt; button.pay &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">.content .bottom &gt; p &gt; button.clear &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.content .bottom &gt; p &gt; button.clear_select &#123;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.content .bottom &gt; p &gt; button.list &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &gt; p &gt; span &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border: 1px solid #333;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &gt; li &gt; div &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &gt; li &gt; div &gt; span &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &gt; li &gt; div:first-child &gt; input &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &gt; div &gt; button &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &gt; div &gt; .del &gt; button &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &gt; div.number &gt; input &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.select,</span><br><span class="line">.pic,</span><br><span class="line">.del &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.name,</span><br><span class="line">.price,</span><br><span class="line">.subtotal &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.number &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的组件化开发思想</title>
    <url>/2022/06/18/b40%20VUE%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a><strong>组件化开发</strong><span id="more"></span></h1><h2 id="1-组件化开发的思想"><a href="#1-组件化开发的思想" class="headerlink" title="1.组件化开发的思想**"></a>1.组件化开发的思想**</h2><h3 id="1-1-认识组件化开发"><a href="#1-1-认识组件化开发" class="headerlink" title="1.1 认识组件化开发"></a><strong>1.1 认识组件化开发</strong></h3><p>组件化开发也是类似的把大问题转成很多个方便解决的小问题，比如如果将所有的逻辑全部放在一起，处理起来变得非常复杂，而且不利于后续的维护和扩展。但是如果我们把页面拆成一个个小的功能块，每个功能块完成自己独立的部分，整个页面的管理就变得非常容易。</p>
<p>学习组件化开发最重要的是他的思想，每个框架，平台具体的实现不同，但是思想都是一样的。</p>
<p>组件最大的好处是方便<strong>复用</strong>。</p>
<h3 id="1-2-Vue的组件化开发"><a href="#1-2-Vue的组件化开发" class="headerlink" title="1.2 Vue的组件化开发"></a><strong>1.2 Vue的组件化开发</strong></h3><p>组件化是Vue的核心思想，也是课程的重点内容</p>
<p>​	前面我们的createApp函数传入了一个配置对象App，这个对象本质上就是一个组件，而且也是整个应用程序的根(Root)组件</p>
<p>组件化开发，简单来说就是两步</p>
<ol>
<li><p>注册组件</p>
</li>
<li><p>使用组件</p>
</li>
</ol>
<h3 id="1-3-Vue的SFC"><a href="#1-3-Vue的SFC" class="headerlink" title="1.3 Vue的SFC"></a><strong>1.3 Vue的SFC</strong></h3><p>真实开发中，我们会通过一个后缀名为.vue的单文件组件(Single File Component)来解决，并且通过统一的开发结构；vue-cli&#x2F;vite&#x2F;webpack&#x2F;rollup。</p>
<p>使用sfc的.vue文件来开发</p>
<ol>
<li><p>使用VueCLi来创建项目</p>
</li>
<li><p>自己用webpack或者vite来处理</p>
</li>
</ol>
<h2 id="2-VueCLI"><a href="#2-VueCLI" class="headerlink" title="2. VueCLI"></a>2. VueCLI</h2><h3 id="2-1-什么是VueCLI脚手架？"><a href="#2-1-什么是VueCLI脚手架？" class="headerlink" title="2.1 什么是VueCLI脚手架？"></a><strong>2.1 什么是VueCLI脚手架？</strong></h3><p>真实开发我们不可能每一个项目都从头来配置webpack&#x2F;vite，这样开发效率会非常的低，所以真实开发我们通常会使用脚手架(帮助我们搭建好一些基础结构)来创建项目，Vue项目所使用的就是Vue的脚手架即Vue CLI</p>
<p>​	CLI：Command Line Interface 命令行界面</p>
<p>​	vue-cli已经内置了webpack的配置，不需要从0开始</p>
<h3 id="2-2-Vue-CLI的安装和使用"><a href="#2-2-Vue-CLI的安装和使用" class="headerlink" title="2.2 Vue CLI的安装和使用"></a><strong>2.2 Vue CLI的安装和使用</strong></h3><p>安装：npm install @vue&#x2F;cli -g</p>
<p>升级: npm update @vue&#x2F;cli -g</p>
<p>使用：vue create 项目名</p>
<p>更多： <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p>
<p>Windows用户，vue-cli的配置文件在一个叫做**.vuerc**的文件上,<strong>C:\Users{当前用户名}</strong></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629175510917.png" alt="image-20230629175510917"></p>
<p><strong>browserslist文件：做浏览器适配</strong></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629175543524.png" alt="image-20230629175543524"></p>
<p><strong>jsconfig.json: 给vscode用的</strong></p>
<p><strong>额外补充：tree</strong></p>
<p>windows可以直接使用：</p>
<p>mac需要安装tree，<strong>homebrew install tree</strong></p>
<p>如果报错得先安装homebrew</p>
<p>命令：tree &gt; tree.md 这样你的整个项目目录会被输出到当前的tree.md文件中</p>
<p>忽略node_modules文件夹的目录输出：tree -I ‘node_modules’ &gt; tree.md</p>
<p>其他命令自行百度命令行tree的使用</p>
<h2 id="3-组件的注册方式"><a href="#3-组件的注册方式" class="headerlink" title="3. 组件的注册方式**"></a>3. 组件的注册方式**</h2><p>如果我有一部分内容(模版，逻辑)，我们希望把这部分内容抽到一个独立的组件中维护，那我们就得先注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p><strong>全局组件</strong>：在其他任何组件中都能使用</p>
<p><strong>局部组件</strong>：只有在注册了的组件中才能使用</p>
<h3 id="3-1-全局注册组件"><a href="#3-1-全局注册组件" class="headerlink" title="3.1 全局注册组件"></a><strong>3.1 全局注册组件</strong></h3><p>全局注册组件需要我们使用全局创建的app来注册</p>
<p>通过app的component方法传入组件的名称，组件的实现</p>
<p>之后就可以使用了。</p>
<ol>
<li>创建组件</li>
</ol>
<p>在components文件夹中创建一个my-cpn.vue的文件，写入内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//1.创建组件</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;我是组件的标题&#x27;,</span><br><span class="line">      msg: &#x27;我是组件的内容&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>注册组件</li>
</ol>
<p>修改main.js的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="comment">//2.注册组件</span></span><br><span class="line"><span class="comment">//2.1 引入组件</span></span><br><span class="line"><span class="keyword">import</span> myCpn <span class="keyword">from</span> <span class="string">&#x27;./components/my-cpn.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">//写自己对app需要的配置选项操作</span></span><br><span class="line"><span class="comment">//2.2注册全局组件</span></span><br><span class="line"><span class="comment">//第一个参数是将来使用的时候要用的名字</span></span><br><span class="line"><span class="comment">//第二个参数是具体组件的实现</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>, myCpn);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用组件</li>
</ol>
<p>在App.vue中使用对应的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 3.使用组件 --&gt;</span><br><span class="line">    &lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">    &lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">    &lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">    &lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2-组件自己的逻辑"><a href="#3-2-组件自己的逻辑" class="headerlink" title="3.2 组件自己的逻辑"></a><strong>3.2 组件自己的逻辑</strong></h3><p>组件也可以有自己的代码逻辑，比如自己的data，methods，computed…</p>
<p>再创建一个组件product-item</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;product&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;demo&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;我是product的title&#x27;,</span><br><span class="line">      msg: &#x27;我是product的msg&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    demo() &#123;</span><br><span class="line">      console.log(123);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.product &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629190448429.png" alt="image-20230629190448429"></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629190513276.png" alt="image-20230629190513276"></p>
<p>scoped样式隔离：如果style标签不加scoped隔离，会导致样式穿透，那个组件后引入就应用对应的样式，哪怕之前有同样的选择器，自己的样式也不生效。加一个scoped就能解决，为什么？</p>
<p>原理：<img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230629190540916.png" alt="image-20230629190540916"> 加了scoped以后每个组件的内的模版中的所有标签都加上了一个 **data-v-[hash:8]**，最终你的style样式应用上去的时候会自动加上一个对应的属性选择器div[data-v-hash]{}</p>
<p>为什么data必须是一个函数：让每个组件都有自己的独立的数据。</p>
<h3 id="3-3-组件的命名"><a href="#3-3-组件的命名" class="headerlink" title="3.3 组件的命名"></a><strong>3.3 组件的命名</strong></h3><p>在我们注册全局组件是通过app.component（），参数一是组件的名字，参数二是组件的实现</p>
<p>命名的方式有两种</p>
<ol>
<li>kebab-case短横线命名 <strong>my-cpn</strong></li>
</ol>
<p>​	使用的时候只能短横线 <code>&lt;my-cpn&gt; &lt;/my-cpn&gt;</code></p>
<ol start="2">
<li>PascalCase大驼峰 <strong>MyCpn</strong></li>
</ol>
<p>​	使用的时候短横线和大驼峰均可 </p>
<p>我们修改main.js测试一下</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="comment">//2.注册组件</span></span><br><span class="line"><span class="comment">//2.1 引入组件</span></span><br><span class="line"><span class="keyword">import</span> myCpn <span class="keyword">from</span> <span class="string">&#x27;./components/my-cpn.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> productItem <span class="keyword">from</span> <span class="string">&#x27;./components/product-item.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">//写自己对app需要的配置选项操作</span></span><br><span class="line"><span class="comment">//2.2注册全局组件</span></span><br><span class="line"><span class="comment">//第一个参数是将来使用的时候要用的名字</span></span><br><span class="line"><span class="comment">//第二个参数是具体组件的实现</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyCpn&#x27;</span>, myCpn);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;product-item&#x27;</span>, productItem);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 3.使用组件 --&gt;</span><br><span class="line">    &lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">    &lt;!-- 大驼峰注册的时候 也可以大驼峰来使用 --&gt;</span><br><span class="line">    &lt;MyCpn&gt;&lt;/MyCpn&gt;</span><br><span class="line">    &lt;product-item&gt;&lt;/product-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-4-局部组件"><a href="#3-4-局部组件" class="headerlink" title="3.4 局部组件"></a><strong>3.4 局部组件</strong></h3><p>全局组件往往会在应用程序一开始就注册，这样有些组件即使没有使用到，也会注册</p>
<ol>
<li><p>打包后的js体积会增加，不利于webpack的tree shaking</p>
</li>
<li><p>使得依赖关系的维护很困难，而且不太容易定位子组件的实现，以及过多的全局变量</p>
</li>
</ol>
<p>所以开发中除非明确是全局都需要的一般都会采用局部组件的形式</p>
<p>使用局部组件操作如下</p>
<ol>
<li><p>编写并且注册，通过选项API，<strong>components</strong>选项来注册</p>
</li>
<li><p>components中的选项对应的是一个对象，对象中<strong>key:组件的名称</strong>，<strong>value：组件的实现</strong></p>
</li>
</ol>
<p>恢复main.js的内容，我们尝试在App.vue中注册为局部组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;MyList&gt;&lt;/MyList&gt;</span><br><span class="line">    &lt;!-- 3.使用组件 --&gt;</span><br><span class="line">    &lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">    &lt;!-- 大驼峰注册的时候 也可以大驼峰来使用 --&gt;</span><br><span class="line">    &lt;MyCpn&gt;&lt;/MyCpn&gt;</span><br><span class="line">    &lt;product-item&gt;&lt;/product-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入组件</span><br><span class="line">import MyCpn from &#x27;./components/my-cpn.vue&#x27;;</span><br><span class="line">import productItem from &#x27;./components/product-item.vue&#x27;;</span><br><span class="line">import MyList from &#x27;./components/my-list.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  //配置App用的组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    //注册</span><br><span class="line">    // &#x27;MyCpn&#x27;: MyCpn,</span><br><span class="line">    //简写</span><br><span class="line">    MyCpn,</span><br><span class="line">    &#x27;product-item&#x27;: productItem,</span><br><span class="line">    MyList,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注册为局部组件以后，我们的组件就只能在App内使用，其他地方用不了。</p>
<h2 id="4-组件化通信"><a href="#4-组件化通信" class="headerlink" title="4. 组件化通信**"></a>4. 组件化通信**</h2><p>拆分组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 头部 --&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;top banner&lt;/div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;nav&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 中间主体 --&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;banner&quot;&gt;banner&lt;/div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;商品列表1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;商品列表2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;商品列表3&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;商品列表4&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 底部footer --&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;div&gt;物流配送&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;版权声明&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;免责声明&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;注册地址：XXXXX&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的v-model</title>
    <url>/2022/06/16/b40%20v-model/</url>
    <content><![CDATA[<h1 id="6-25-v-model"><a href="#6-25-v-model" class="headerlink" title="6-25 v-model"></a><strong>6-25 v-model</strong><span id="more"></span></h1><h2 id="1-v-model的基本使用"><a href="#1-v-model的基本使用" class="headerlink" title="1.v-model的基本使用"></a>1.v-model的基本使用</h2><h3 id="1-1-v-model的概念"><a href="#1-1-v-model的概念" class="headerlink" title="1.1 v-model的概念"></a><strong>1.1 v-model的概念</strong></h3><p>v-model指令可以在表单元素上创建<strong>双向数据绑定，</strong>（有很多人分不清楚响应式和双向数据绑定），它会根据控件的类型自动选取正确的方法来更新元素</p>
<p>v-model的本质只不过是语法糖，负责监听用户的输入来更新数据，并且在特殊场景下进行边界处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;input type=&quot;text&quot; :value=&quot;msg&quot; @input=&quot;inputChange&quot; /&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;h1&gt;</span><br><span class="line">  div&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;hello vue&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inputChange(event) &#123;</span><br><span class="line">      this.msg = event.target.value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure>

<p>上面的整个过程就是手动实现了双向绑定，第一：把msg作为input的value通过v-bind绑定上去；第二：当input变化时data中的msg也会变化这个就是双向绑定。vue有一个语法糖v-model能够帮助我们快速完成这种双向绑定。</p>
<p>使用v-model：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;info&quot; /&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; info &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="1-2-v-model的绑定原理"><a href="#1-2-v-model的绑定原理" class="headerlink" title="1.2 v-model的绑定原理"></a><strong>1.2 v-model的绑定原理</strong></h3><p>v-bind绑定value属性值</p>
<p>v-on绑定input事件，函数中会获取最新的值赋给绑定的变量</p>
<h2 id="2-v-model-绑定一些表单元素"><a href="#2-v-model-绑定一些表单元素" class="headerlink" title="2.v-model 绑定一些表单元素**"></a>2.v-model 绑定一些表单元素**</h2><h3 id="2-1-textarea"><a href="#2-1-textarea" class="headerlink" title="2.1 textarea"></a><strong>2.1 textarea</strong></h3><p>具体的输入的文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;textarea v-model=&quot;msg&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;p&gt;输入的内容:&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inputChange(event) &#123;</span><br><span class="line">      this.msg = event.target.value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="2-2-v-model绑定checkbox"><a href="#2-2-v-model绑定checkbox" class="headerlink" title="2.2 v-model绑定checkbox"></a><strong>2.2 v-model绑定checkbox</strong></h3><p>单个勾选框和多个勾选框</p>
<p>单个：v-model绑定的是一个布尔值，而且此时的input的value属性不影响v-model的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;isAgree&quot; /&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; isAgree &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isAgree: &#x27;1231231&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>多个：会把选中的input的value放到v-model的数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;请选择你的爱好&lt;/h2&gt;</span><br><span class="line">    &lt;label for=&quot;sing&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; id=&quot;sing&quot; value=&quot;sing123123&quot; v-model=&quot;hobbies&quot; /&gt;唱</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label for=&quot;jump&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; id=&quot;jump&quot; value=&quot;jump&quot; v-model=&quot;hobbies&quot; /&gt;跳</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label for=&quot;rap&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; id=&quot;rap&quot; value=&quot;rap&quot; v-model=&quot;hobbies&quot; /&gt;rap</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label for=&quot;basketball&quot;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;checkbox&quot;</span><br><span class="line">        id=&quot;basketball&quot;</span><br><span class="line">        value=&quot;basketball&quot;</span><br><span class="line">        v-model=&quot;hobbies&quot;</span><br><span class="line">      /&gt;🏀</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; hobbies &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hobbies: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-v-model绑定radio"><a href="#2-3-v-model绑定radio" class="headerlink" title="2.3 v-model绑定radio"></a><strong>2.3 v-model绑定radio</strong></h3><p>绑定的是选中的value的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; v-model=&quot;gender&quot; value=&quot;male&quot; /&gt;男</span><br><span class="line">    &lt;input type=&quot;radio&quot; v-model=&quot;gender&quot; value=&quot;female&quot; /&gt;女</span><br><span class="line">    &lt;h2&gt;&#123;&#123; gender &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      gender: &#x27;&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4-v-model绑定-select"><a href="#2-4-v-model绑定-select" class="headerlink" title="2.4 v-model绑定 select"></a><strong>2.4 v-model绑定 select</strong></h3><p>单个：v-model绑定对应选中的value值</p>
<p>多个：v-model把选中的多个放到数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;fruit&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;apple&quot;&gt;苹果&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;orange&quot;&gt;橘子&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;banana&quot;&gt;香蕉&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;h1&gt;单选：&#123;&#123; fruit &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;select v-model=&quot;fruits&quot; multiple&gt;</span><br><span class="line">      &lt;option value=&quot;apple&quot;&gt;苹果&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;orange&quot;&gt;橘子&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;banana&quot;&gt;香蕉&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;h1&gt;多选：&#123;&#123; fruits &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      fruit: &#x27;banana&#x27;,</span><br><span class="line">      fruits: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-v-model的值绑定"><a href="#3-v-model的值绑定" class="headerlink" title="3.v-model的值绑定**"></a>3.v-model的值绑定**</h2><p>上面的例子中我们绑定的值都是template中固定的，真实开发中我们的数据大多数来自于服务器，我们一般先请求下来，然后绑定到data中的某个属性，再通过v-bind来进行绑定绑定-值绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 水果用select --&gt;</span><br><span class="line">    &lt;select multiple v-model=&quot;fruits&quot;&gt;</span><br><span class="line">      &lt;option v-for=&quot;item in allFruits&quot; :key=&quot;item.value&quot; :value=&quot;item.value&quot;&gt;</span><br><span class="line">        &#123;&#123; item.text &#125;&#125;</span><br><span class="line">      &lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;h2&gt;水果:&#123;&#123; fruits &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 爱好用checkbox --&gt;</span><br><span class="line">    &lt;template v-for=&quot;item in allHobbies&quot; :key=&quot;item.value&quot;&gt;</span><br><span class="line">      &lt;label :for=&quot;item.value&quot;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          :id=&quot;item.value&quot;</span><br><span class="line">          type=&quot;checkbox&quot;</span><br><span class="line">          v-model=&quot;hobbies&quot;</span><br><span class="line">          :value=&quot;item.value&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &#123;&#123; item.text &#125;&#125;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;爱好:&#123;&#123; hobbies &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //用户选择的水果</span><br><span class="line">      fruits: [],</span><br><span class="line">      //水果</span><br><span class="line">      allFruits: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;apple&#x27;,</span><br><span class="line">          text: &#x27;苹果&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;orange&#x27;,</span><br><span class="line">          text: &#x27;橘子&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;banana&#x27;,</span><br><span class="line">          text: &#x27;香蕉&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      //用户选择的爱好</span><br><span class="line">      hobbies: [],</span><br><span class="line">      //爱好</span><br><span class="line">      allHobbies: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;sing&#x27;,</span><br><span class="line">          text: &#x27;唱&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;jump&#x27;,</span><br><span class="line">          text: &#x27;跳&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;rap&#x27;,</span><br><span class="line">          text: &#x27;rap&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;basketball&#x27;,</span><br><span class="line">          text: &#x27;篮球&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-v-model的修饰符"><a href="#4-v-model的修饰符" class="headerlink" title="4.v-model的修饰符"></a>4.<strong>v-model的修饰符</strong></h2><h3 id="4-1-lazy"><a href="#4-1-lazy" class="headerlink" title="4.1 lazy"></a><strong>4.1 lazy</strong></h3><p>默认双向绑定input的时候，绑定的是input事件，每次内容输入后就会将新的值和我们data中的属性同步</p>
<p>如果加上了lazy修饰符，那么会将绑定的事件和change同步，只有提交&#x2F;回车时才会触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 水果用select --&gt;</span><br><span class="line">    &lt;select multiple v-model=&quot;fruits&quot;&gt;</span><br><span class="line">      &lt;option v-for=&quot;item in allFruits&quot; :key=&quot;item.value&quot; :value=&quot;item.value&quot;&gt;</span><br><span class="line">        &#123;&#123; item.text &#125;&#125;</span><br><span class="line">      &lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;h2&gt;水果:&#123;&#123; fruits &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 爱好用checkbox --&gt;</span><br><span class="line">    &lt;template v-for=&quot;item in allHobbies&quot; :key=&quot;item.value&quot;&gt;</span><br><span class="line">      &lt;label :for=&quot;item.value&quot;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          :id=&quot;item.value&quot;</span><br><span class="line">          type=&quot;checkbox&quot;</span><br><span class="line">          v-model=&quot;hobbies&quot;</span><br><span class="line">          :value=&quot;item.value&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &#123;&#123; item.text &#125;&#125;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;爱好:&#123;&#123; hobbies &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //用户选择的水果</span><br><span class="line">      fruits: [],</span><br><span class="line">      //水果</span><br><span class="line">      allFruits: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;apple&#x27;,</span><br><span class="line">          text: &#x27;苹果&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;orange&#x27;,</span><br><span class="line">          text: &#x27;橘子&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;banana&#x27;,</span><br><span class="line">          text: &#x27;香蕉&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      //用户选择的爱好</span><br><span class="line">      hobbies: [],</span><br><span class="line">      //爱好</span><br><span class="line">      allHobbies: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;sing&#x27;,</span><br><span class="line">          text: &#x27;唱&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;jump&#x27;,</span><br><span class="line">          text: &#x27;跳&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;rap&#x27;,</span><br><span class="line">          text: &#x27;rap&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: &#x27;basketball&#x27;,</span><br><span class="line">          text: &#x27;篮球&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-2-number"><a href="#4-2-number" class="headerlink" title="4.2 number"></a><strong>4.2 number</strong></h3><p>和type&#x3D;”number”效果一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.number=&quot;counter&quot; /&gt;</span><br><span class="line">    &lt;h2&gt;counter:&#123;&#123; counter &#125;&#125;---&#123;&#123; typeof counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;number&quot; v-model=&quot;counter2&quot; /&gt;</span><br><span class="line">    &lt;h2&gt;counter2:&#123;&#123; counter2 &#125;&#125;---&#123;&#123; typeof counter2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 123,</span><br><span class="line">      counter2: 456,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-3-trim"><a href="#4-3-trim" class="headerlink" title="4.3 trim"></a><strong>4.3 trim</strong></h3><p>消除用户输入的空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 修饰符可以链式使用 --&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.trim.lazy=&quot;msg&quot; /&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="5-v-model的练习-和购物车要求一样"><a href="#5-v-model的练习-和购物车要求一样" class="headerlink" title="5.v-model的练习(和购物车要求一样)"></a>5.<strong>v-model的练习(和购物车要求一样)</strong></h2><h3 id="5-1-全选反选"><a href="#5-1-全选反选" class="headerlink" title="5.1 全选反选"></a><strong>5.1 全选反选</strong></h3><p>全选反选-computed实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;爱好&lt;/h2&gt;</span><br><span class="line">    全选&lt;input type=&quot;checkbox&quot; v-model=&quot;all&quot; /&gt;</span><br><span class="line">    &lt;!-- li中是每一个单选 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in hobbies&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; v-model=&quot;item.check&quot; /&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; item.hobby &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; set &#125; from &#x27;lodash&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hobbies: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;001&#x27;,</span><br><span class="line">          hobby: &#x27;篮球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;002&#x27;,</span><br><span class="line">          hobby: &#x27;棒球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;003&#x27;,</span><br><span class="line">          hobby: &#x27;羽毛球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;004&#x27;,</span><br><span class="line">          hobby: &#x27;乒乓球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  //计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //简写不行，简写只有getter的情况，获取复杂计算的值</span><br><span class="line">    //所以我们要写完整写法</span><br><span class="line">    // all() &#123;&#125;,</span><br><span class="line">    all: &#123;</span><br><span class="line">      //获取</span><br><span class="line">      get() &#123;</span><br><span class="line">        // 下面几个单选的选中状态，check都为true才选中</span><br><span class="line">        return this.hobbies.every((item) =&gt; item.check === true);</span><br><span class="line">      &#125;,</span><br><span class="line">      //设置</span><br><span class="line">      set(value) &#123;</span><br><span class="line">        // 拿到全选的true/false 赋值给每个item的check</span><br><span class="line">        // console.log(value);</span><br><span class="line">        this.hobbies.forEach((ele) =&gt; (ele.check = value));</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>全选反选-watch实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;爱好&lt;/h2&gt;</span><br><span class="line">    全选&lt;input type=&quot;checkbox&quot; v-model=&quot;all&quot; @change=&quot;changeAll&quot; /&gt;</span><br><span class="line">    &lt;!-- li中是每一个单选 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in hobbies&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; v-model=&quot;item.check&quot; /&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; item.hobby &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      all: false,</span><br><span class="line">      hobbies: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;001&#x27;,</span><br><span class="line">          hobby: &#x27;篮球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;002&#x27;,</span><br><span class="line">          hobby: &#x27;棒球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;003&#x27;,</span><br><span class="line">          hobby: &#x27;羽毛球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;004&#x27;,</span><br><span class="line">          hobby: &#x27;乒乓球&#x27;,</span><br><span class="line">          check: false,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeAll() &#123;</span><br><span class="line">      this.hobbies.forEach((item) =&gt; (item.check = this.all));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  //侦听器</span><br><span class="line">  watch: &#123;</span><br><span class="line">    //不能简写，我们要侦听的是数组中每个对象的check属性</span><br><span class="line">    hobbies: &#123;</span><br><span class="line">      //这里我们不需要newValue,oldValue</span><br><span class="line">      handler(newValue, oldValue) &#123;</span><br><span class="line">        this.all = this.hobbies.every((item) =&gt; item.check === true);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2-购物车"><a href="#5-2-购物车" class="headerlink" title="5.2 购物车"></a><strong>5.2 购物车</strong></h3><p>data.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      id: 625153951363,</span><br><span class="line">      //商品数量</span><br><span class="line">      number: 15,</span><br><span class="line">      //已购数量</span><br><span class="line">      buy_num: 1,</span><br><span class="line">      select: true,</span><br><span class="line">      name: &#x27;2020西太湖国际音乐节&#x27;,</span><br><span class="line">      showTime: &#x27;2020.09.19-09.20&#x27;,</span><br><span class="line">      price: &#x27;100&#x27;,</span><br><span class="line">      city: &#x27;常州&#x27;,</span><br><span class="line">      address: &#x27;常州西太湖中国花卉博览景区北门&#x27;,</span><br><span class="line">      pic: &#x27;https://img.alicdn.com/bao/uploaded/https://img.alicdn.com/imgextra/i3/2251059038/O1CN01zJEpaN2GdSG1Xvo8y_!!2251059038.jpg&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 624506842658,</span><br><span class="line">      number: 10,</span><br><span class="line">      buy_num: 3,</span><br><span class="line">      select: false,</span><br><span class="line">      name: &#x27;2020舟山东海音乐节&#x27;,</span><br><span class="line">      showTime: &#x27;2020.09.04-09.06&#x27;,</span><br><span class="line">      price: &#x27;200&#x27;,</span><br><span class="line">      city: &#x27;舟山&#x27;,</span><br><span class="line">      address: &#x27;舟山市朱家尖南沙景区沙滩&#x27;,</span><br><span class="line">      pic: &#x27;https://img.alicdn.com/bao/uploaded/i4/2251059038/O1CN01L70FVl2GdSG2wpwyE_!!0-item_pic.jpg&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 623216520608,</span><br><span class="line">      number: 8,</span><br><span class="line">      buy_num: 2,</span><br><span class="line">      select: false,</span><br><span class="line">      name: &#x27;中国•磐安 2020氧气山水音乐节&#x27;,</span><br><span class="line">      showTime: &#x27;2020.08.22 周六 16:30&#x27;,</span><br><span class="line">      price: &#x27;300&#x27;,</span><br><span class="line">      city: &#x27;金华&#x27;,</span><br><span class="line">      address: &#x27;金华磐安花溪风景区&#x27;,</span><br><span class="line">      pic: &#x27;https://img.alicdn.com/bao/uploaded/https://img.alicdn.com/imgextra/i3/2251059038/O1CN01ECp69h2GdSFpoUPAm_!!2251059038.jpg&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 624345993344,</span><br><span class="line">      number: 13,</span><br><span class="line">      buy_num: 2,</span><br><span class="line">      select: false,</span><br><span class="line">      name: &#x27;2020“一生中最爱”七夕演唱会&#x27;,</span><br><span class="line">      showTime: &#x27;2020.08.25 周二 19:30&#x27;,</span><br><span class="line">      price: &#x27;400&#x27;,</span><br><span class="line">      city: &#x27;北京&#x27;,</span><br><span class="line">      address: &#x27;糖果TANGO-雍和宫店三层&#x27;,</span><br><span class="line">      pic: &#x27;https://img.alicdn.com/bao/uploaded/i3/2251059038/O1CN01WGNYBE2GdSFqXJgII_!!0-item_pic.jpg&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 624170605605,</span><br><span class="line">      number: 5,</span><br><span class="line">      buy_num: 1,</span><br><span class="line">      select: true,</span><br><span class="line">      name: &#x27;东海五渔节之敢潮音乐节&#x27;,</span><br><span class="line">      showTime: &#x27;2020.08.22 周六 18:00&#x27;,</span><br><span class="line">      price: &#x27;500&#x27;,</span><br><span class="line">      city: &#x27;舟山&#x27;,</span><br><span class="line">      address: &#x27;舟山嵊泗五龙乡听海广场(原黄沙村船厂)&#x27;,</span><br><span class="line">      pic: &#x27;https://img.alicdn.com/bao/uploaded/https://img.alicdn.com/imgextra/i1/2251059038/O1CN01eV5pR32GdSFxJUb0v_!!2251059038.jpg&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;网页头部&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;!-- 用vue的语法渲染 --&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;allCheck&quot; /&gt; 全选&lt;/div&gt;</span><br><span class="line">      &lt;ul class=&quot;center&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;select&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;item.select&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;pic&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item.pic&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;name&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;price&quot;&gt;</span><br><span class="line">            ￥ &lt;span&gt;&#123;&#123; formateMoney(item.price) &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;number&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;sub(item.id)&quot; :disabled=&quot;item.buy_num &lt;= 1&quot;&gt;</span><br><span class="line">              -</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;item.buy_num&quot; /&gt;</span><br><span class="line">            &lt;button</span><br><span class="line">              @click=&quot;add(item.id)&quot;</span><br><span class="line">              :disabled=&quot;item.buy_num &gt;= item.number&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              +</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;subtotal&quot;&gt;</span><br><span class="line">            ￥ &lt;span&gt;&#123;&#123; formateMoney(subtotal(item.id)) &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;del&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;del(item.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">        &lt;p&gt;总购买数量: &#123;&#123; totalNum &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;button class=&quot;pay&quot; @click=&quot;pay(totalPrice)&quot;&gt;去结算&lt;/button&gt;</span><br><span class="line">          &lt;button class=&quot;clear&quot; @click=&quot;delAll&quot;&gt;清空购物车&lt;/button&gt;</span><br><span class="line">          &lt;button class=&quot;clear_select&quot; @click=&quot;delSelected&quot;&gt;</span><br><span class="line">            删除所有已选中</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">          &lt;button class=&quot;list&quot;&gt;返回列表页&lt;/button&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          总价格 : ￥ &lt;span&gt;&#123;&#123; formateMoney(totalPrice) &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;网页底部&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入数据</span><br><span class="line">import mock from &#x27;./data&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: mock.list,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //删除已选</span><br><span class="line">    delSelected() &#123;</span><br><span class="line">      this.list = this.list.filter((item) =&gt; !item.select);</span><br><span class="line">      // this.list = this.list.filter((item) =&gt; item.select === false);</span><br><span class="line">    &#125;,</span><br><span class="line">    //清空</span><br><span class="line">    delAll() &#123;</span><br><span class="line">      this.list = [];</span><br><span class="line">    &#125;,</span><br><span class="line">    //去结算</span><br><span class="line">    pay(money) &#123;</span><br><span class="line">      console.log(&#x27;总价：&#x27;, money);</span><br><span class="line">    &#125;,</span><br><span class="line">    //删除</span><br><span class="line">    del(id) &#123;</span><br><span class="line">      // this.list = this.list.filter((item) =&gt; item.id !== id);</span><br><span class="line">      //方法二</span><br><span class="line">      const index = this.list.findIndex((item) =&gt; item.id === id);</span><br><span class="line">      this.list.splice(index, 1);</span><br><span class="line">    &#125;,</span><br><span class="line">    //减</span><br><span class="line">    sub(id) &#123;</span><br><span class="line">      const good = this.list.find((ele) =&gt; ele.id === id);</span><br><span class="line">      good.buy_num--;</span><br><span class="line">    &#125;,</span><br><span class="line">    //加</span><br><span class="line">    add(id) &#123;</span><br><span class="line">      const good = this.list.find((ele) =&gt; ele.id === id);</span><br><span class="line">      good.buy_num++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  //计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //全选</span><br><span class="line">    allCheck: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        if (!!this.list.length) &#123;</span><br><span class="line">          // return this.list.every((item) =&gt; item.select === true);</span><br><span class="line">          return this.list.every((item) =&gt; item.select);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        this.list.forEach((item) =&gt; (item.select = val));</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //格式化金钱</span><br><span class="line">    formateMoney() &#123;</span><br><span class="line">      //计算属性传递参数</span><br><span class="line">      return (money) =&gt; &#123;</span><br><span class="line">        return (money - 0).toFixed(2);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    //单个商品的小记</span><br><span class="line">    subtotal() &#123;</span><br><span class="line">      return (id) =&gt; &#123;</span><br><span class="line">        const good = this.list.find((ele) =&gt; ele.id === id);</span><br><span class="line">        return good.price * good.buy_num;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    //总数量和总价格都应该是选中的才参与计算</span><br><span class="line">    //总数量</span><br><span class="line">    totalNum() &#123;</span><br><span class="line">      return this.list.reduce((prev, item) =&gt; &#123;</span><br><span class="line">        return item.select ? prev + item.buy_num : prev;</span><br><span class="line">      &#125;, 0);</span><br><span class="line">    &#125;,</span><br><span class="line">    //总价格</span><br><span class="line">    totalPrice() &#123;</span><br><span class="line">      return this.list.reduce((prev, item) =&gt; &#123;</span><br><span class="line">        return item.select ? prev + item.buy_num * item.price : prev;</span><br><span class="line">      &#125;, 0);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">button,</span><br><span class="line">input &#123;</span><br><span class="line">  outline: none;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line">img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">.header,</span><br><span class="line">.footer &#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  height: 80px;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">  color: #fff;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.footer &#123;</span><br><span class="line">  height: 300px;</span><br><span class="line">  font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  padding: 10px 0;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">.content .top,</span><br><span class="line">.content .bottom &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .top &gt; input &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  margin: 0 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &#123;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &gt; p button &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  padding: 3px 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &gt; p &gt; button.pay &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">.content .bottom &gt; p &gt; button.clear &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.content .bottom &gt; p &gt; button.clear_select &#123;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.content .bottom &gt; p &gt; button.list &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bottom &gt; p &gt; span &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border: 1px solid #333;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &gt; li &gt; div &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &gt; li &gt; div &gt; span &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &gt; li &gt; div:first-child &gt; input &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &gt; div &gt; button &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &gt; div &gt; .del &gt; button &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &gt; li &gt; div.number &gt; input &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.select,</span><br><span class="line">.pic,</span><br><span class="line">.del &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.name,</span><br><span class="line">.price,</span><br><span class="line">.subtotal &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.number &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="5-3-表格"><a href="#5-3-表格" class="headerlink" title="5.3 表格"></a><strong>5.3 表格</strong></h3><p>生成唯一id使用uuid库:<code>npm install uuid</code></p>
<p>使用的话就自己看看npm的文档</p>
<p>data.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">info</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;胡杭&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;胜明&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;军毅&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;晓华&#x27;</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;盛聪&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;侦剑&#x27;</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;红翔&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;超维&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;士琪&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;艳华&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;add&quot; @click=&quot;add&quot; :disabled=&quot;count &gt;= 10&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;sort&quot; @click=&quot;sort&quot;&gt;从小到大&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;del&quot; @click=&quot;delSelect&quot;&gt;删除选中&lt;/button&gt;</span><br><span class="line">    &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;20&quot;&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;序列号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;选择&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;item in data&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; item.index &#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123; item.age &#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;button class=&quot;delOne&quot; @click=&quot;del(item.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;item.select&quot; /&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入uuid</span><br><span class="line">import &#123; v4 as uuidv4 &#125; from &#x27;uuid&#x27;;</span><br><span class="line">import mock from &#x27;./data&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //添加了多少个的计数</span><br><span class="line">      count: 0,</span><br><span class="line">      info: [],</span><br><span class="line">      //真正操作的数组</span><br><span class="line">      data: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //添加</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.data.push(this.info[this.count]);</span><br><span class="line">      this.count++;</span><br><span class="line">    &#125;,</span><br><span class="line">    sort() &#123;</span><br><span class="line">      this.data.sort((a, b) =&gt; &#123;</span><br><span class="line">        return a.age - b.age;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    del(id) &#123;</span><br><span class="line">      this.data = this.data.filter((item) =&gt; item.id !== id);</span><br><span class="line">    &#125;,</span><br><span class="line">    delSelect() &#123;</span><br><span class="line">      this.data = this.data.filter((ele) =&gt; !ele.select);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  //请求数据，并且将请求的数据做一定的处理</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.info = mock.info.map((item, index) =&gt; &#123;</span><br><span class="line">      item.select = false;</span><br><span class="line">      item.index = index + 1;</span><br><span class="line">      item.id = uuidv4();</span><br><span class="line">      return item;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础语法(三)</title>
    <url>/2022/06/14/b39%20Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(%E4%B8%89)/</url>
    <content><![CDATA[<h1 id="6-21-Vue基础-Options-API"><a href="#6-21-Vue基础-Options-API" class="headerlink" title="6-21 Vue基础-Options API"></a><strong>6-21 Vue基础-Options API</strong><span id="more"></span></h1><p>如果是多对一就用computed，如果是一对多就用watch。</p>
<p>往往在实际开发中，我们的数据不是直接展示，而是需要经过一定的处理。或者是把多个数据结合起来展示。在模版中，我们如果需要计算多个data，可以使用简单的js表达式，三元运算符。但是模版设计的初衷，是用于简单的数据展示。如果数据处理全部丢在模版里面，整个模版就会显得笨重和难以维护。</p>
<h2 id="1-计算属性computed"><a href="#1-计算属性computed" class="headerlink" title="1.计算属性computed"></a>1.<strong>计算属性computed</strong></h2><h3 id="1-1-计算属性的概念"><a href="#1-1-计算属性的概念" class="headerlink" title="1.1 计算属性的概念"></a><strong>1.1 计算属性的概念</strong></h3><p>对于任何包含响应式数据的<strong>复杂逻辑</strong>，你都应该使用<strong>计算属性</strong>；</p>
<p>计算属性将被混入到组件的实例中，也就说所有的getter，setter中的this都将自动绑定this为组件的实例</p>
<h3 id="1-2-用法"><a href="#1-2-用法" class="headerlink" title="1.2 用法"></a><strong>1.2 用法</strong></h3><p>选项：computed</p>
<p>类型：{[key:string]:Function|{get:Function,set:Function}}</p>
<h3 id="1-3-案例"><a href="#1-3-案例" class="headerlink" title="1.3 案例"></a><strong>1.3 案例</strong></h3><p>案例1：有两个变量firstName，lastName,希望把他们拼接以后在页面上显示</p>
<p>案例2:有一个分数变量score，&gt;60显示及格，小于60显示为alex</p>
<p>案例3:有一个字符串msg，比如hello world，某些情况下反转显示，某些情况下直接显示</p>
<h4 id="1-3-1-思路一-直接在模版中书写"><a href="#1-3-1-思路一-直接在模版中书写" class="headerlink" title="1.3.1 思路一 直接在模版中书写"></a><strong>1.3.1 思路一 直接在模版中书写</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 1.拼接名字 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;firstName+&quot;~&quot;+lastName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 2.分数 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;score&gt;=60?&#x27;及格&#x27;:&#x27;alex&#x27;&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 3.反转显示 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;msg.split(&quot; &quot;).reverse().join(&quot; &quot;)&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        //1.姓名</span><br><span class="line">        firstName: &#x27;alex&#x27;,</span><br><span class="line">        lastName: &#x27;小肥君&#x27;,</span><br><span class="line">        //2.分数 及格/alex</span><br><span class="line">        score: 80,</span><br><span class="line">        //3.一串文本</span><br><span class="line">        msg: &#x27;my name is 天河阔少&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ol>
<li><p>模版中存在大量的复杂逻辑，不便于维护</p>
</li>
<li><p>当有多次同样的逻辑，存在大量重复代码 违背了dry(don’t repeat yourself)原则</p>
</li>
<li><p>多次使用的时候，很多运算多次执行</p>
</li>
</ol>
<h4 id="1-3-2-使用method"><a href="#1-3-2-使用method" class="headerlink" title="1.3.2 使用method"></a><strong>1.3.2 使用method</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 1.拼接名字 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 2.分数 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;getScoreLevel()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 3.反转显示 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fzMsg()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        //1.姓名</span><br><span class="line">        firstName: &#x27;alex&#x27;,</span><br><span class="line">        lastName: &#x27;小肥君&#x27;,</span><br><span class="line">        //2.分数 及格/alex</span><br><span class="line">        score: 80,</span><br><span class="line">        //3.一串文本</span><br><span class="line">        msg: &#x27;my name is 天河阔少&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getFullName() &#123;</span><br><span class="line">        return this.firstName + &#x27;~&#x27; + this.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      getScoreLevel() &#123;</span><br><span class="line">        return this.score &gt;= 60 ? &#x27;及格&#x27; : &#x27;alex&#x27;;</span><br><span class="line">      &#125;,</span><br><span class="line">      fzMsg() &#123;</span><br><span class="line">        return this.msg.split(&#x27; &#x27;).reverse().join(&#x27; &#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<ol>
<li><p>我们本质上是要显示一个结果，但是变成了一个个的函数调用</p>
</li>
<li><p>多次同样的函数调用，也需要多次计算</p>
</li>
</ol>
<h4 id="1-3-3-使用计算属性"><a href="#1-3-3-使用计算属性" class="headerlink" title="1.3.3 使用计算属性"></a><strong>1.3.3 使用计算属性</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 计算属性的使用和函数很相似 --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 1.拼接名字 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 2.分数 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;scoreLevel&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 3.反转显示 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fz&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        //1.姓名</span><br><span class="line">        firstName: &#x27;alex&#x27;,</span><br><span class="line">        lastName: &#x27;小肥君&#x27;,</span><br><span class="line">        //2.分数 及格/alex</span><br><span class="line">        score: 80,</span><br><span class="line">        //3.一串文本</span><br><span class="line">        msg: &#x27;my name is 天河阔少&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      //计算属性默认对应的是一个函数</span><br><span class="line">      fullName() &#123;</span><br><span class="line">        return this.firstName + &#x27;~&#x27; + this.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      scoreLevel() &#123;</span><br><span class="line">        return this.score &gt;= 60 ? &#x27;及格&#x27; : &#x27;alex&#x27;;</span><br><span class="line">      &#125;,</span><br><span class="line">      fz() &#123;</span><br><span class="line">        return this.msg.split(&#x27; &#x27;).reverse().join(&#x27; &#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>计算属性有缓存</p>
<h3 id="1-4-计算属性和method区别"><a href="#1-4-计算属性和method区别" class="headerlink" title="1.4 计算属性和method区别"></a><strong>1.4 计算属性和method区别</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 1.计算属性--&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 2.method --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 修改 --&gt;</span><br><span class="line">  &lt;button @click=&quot;edit&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        //1.姓名</span><br><span class="line">        firstName: &#x27;alex&#x27;,</span><br><span class="line">        lastName: &#x27;小肥君&#x27;,</span><br><span class="line">        //2.分数 及格/alex</span><br><span class="line">        score: 80,</span><br><span class="line">        //3.一串文本</span><br><span class="line">        msg: &#x27;my name is 天河阔少&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getFullName() &#123;</span><br><span class="line">        console.log(&#x27;method被调用～～～&#x27;);</span><br><span class="line">        return this.firstName + &#x27;~&#x27; + this.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      edit() &#123;</span><br><span class="line">        this.lastName = &#x27;天河阔少&#x27;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      //计算属性默认对应的是一个函数</span><br><span class="line">      fullName() &#123;</span><br><span class="line">        console.log(&#x27;computed被调用～～～&#x27;);</span><br><span class="line">        return this.firstName + &#x27;~&#x27; + this.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们发现，不管是第一次展示，还是修改，计算属性始终只会调用一次，而method会调用多次，因为计算属性有缓存</p>
<h3 id="1-5-计算属性的缓存"><a href="#1-5-计算属性的缓存" class="headerlink" title="1.5 计算属性的缓存"></a><strong>1.5 计算属性的缓存</strong></h3><p>计算属性会基于他们的<strong>依赖关系</strong>进行缓存，在依赖不变的情况下，计算属性是不会重新计算的，如果依赖的数据发生变化，在使用时，计算属性会重新计算一遍。</p>
<h3 id="1-6-计算属性的getter和setter"><a href="#1-6-计算属性的getter和setter" class="headerlink" title="1.6 计算属性的getter和setter"></a><strong>1.6 计算属性的getter和setter</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 计算属性--&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 修改 --&gt;</span><br><span class="line">  &lt;button @click=&quot;edit&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        //1.姓名</span><br><span class="line">        firstName: &#x27;alex&#x27;,</span><br><span class="line">        lastName: &#x27;小肥君&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      edit() &#123;</span><br><span class="line">        this.lastName = &#x27;天河阔少&#x27;;</span><br><span class="line">        // this.fullName = &#x27;天河 阔少&#x27;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      //大多数情况下，我们的计算属性都只是需要一个计算的结果，所以可以简写</span><br><span class="line">      // fullName() &#123;</span><br><span class="line">      //   console.log(&#x27;computed被调用～～～&#x27;);</span><br><span class="line">      //   return this.firstName + &#x27;~&#x27; + this.lastName;</span><br><span class="line">      // &#125;,</span><br><span class="line">      //完整的写法</span><br><span class="line">      fullName: &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">          return ###.firstName + &#x27;~&#x27; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value) &#123;</span><br><span class="line">          //直接修改依赖不会走set</span><br><span class="line">          //必须修改 fullName 才会走set</span><br><span class="line">          // console.log(123);</span><br><span class="line">          //value就是新值</span><br><span class="line">          console.log(value);</span><br><span class="line">          const names = value.split(&#x27; &#x27;);</span><br><span class="line">          // 修改依赖，让视图更新</span><br><span class="line">          this.firstName = names[0];</span><br><span class="line">          this.lastName = names[1];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-7-源码的处理"><a href="#1-7-源码的处理" class="headerlink" title="1.7 源码的处理"></a><strong>1.7 源码的处理</strong></h3><p>vue怎么知道我写的是一个函数还是一个对象中的get&#x2F;set，实际上vue的处理非常的简单，就是做一个判断</p>
<p><img src="https://docimg4.docs.qq.com/image/AgAABlP525zHMX3_vStJtpi8-Mnf7dYj.png?w=1129&h=541" alt="img"></p>
<h2 id="2-侦听器watch"><a href="#2-侦听器watch" class="headerlink" title="2. 侦听器watch"></a>2. <strong>侦听器watch</strong></h2><h3 id="2-1-watch的概念"><a href="#2-1-watch的概念" class="headerlink" title="2.1 watch的概念"></a><strong>2.1 watch的概念</strong></h3><p>某些时候我们希望在代码中监听某个数据的变化，然后根据这个变化自动的去完成一些事，这个时候就要用到watch</p>
<h3 id="2-2-watch的用法"><a href="#2-2-watch的用法" class="headerlink" title="2.2 watch的用法"></a><strong>2.2 watch的用法</strong></h3><p>​	选项：watch</p>
<p>​	类型：{[key:string]:string|Function|Object|Array }</p>
<h3 id="2-3-侦听器案例"><a href="#2-3-侦听器案例" class="headerlink" title="2.3 侦听器案例"></a><strong>2.3 侦听器案例</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changeMsg&quot;&gt;修改msg&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;你好啊，alex～&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeMsg() &#123;</span><br><span class="line">        this.msg = this.msg + &#x27;小肥君&#x27;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //watch侦听器</span><br><span class="line">    watch: &#123;</span><br><span class="line">      //有两个参数，newValue,oldValue</span><br><span class="line">      //newValue是改变后的值，oldValue是改变前的值</span><br><span class="line">      msg(newValue, oldValue) &#123;</span><br><span class="line">        console.log(&#x27;改变了&#x27;);</span><br><span class="line">        console.log(newValue, oldValue);</span><br><span class="line">        console.log(&#x27;---------------&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changeMsg&quot;&gt;修改msg&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;你好啊，alex～&#x27;,</span><br><span class="line">        info: &#123;</span><br><span class="line">          name: &#x27;alex&#x27;,</span><br><span class="line">          age: 18,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeMsg() &#123;</span><br><span class="line">        this.msg = this.msg + &#x27;小肥君&#x27;;</span><br><span class="line">        this.info = &#123; name: &#x27;alex&#x27;, age: 99 &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //watch侦听器</span><br><span class="line">    watch: &#123;</span><br><span class="line">      //有两个参数，newValue,oldValue</span><br><span class="line">      //简单数据类型</span><br><span class="line">      msg(newValue, oldValue) &#123;</span><br><span class="line">        console.log(&#x27;改变了&#x27;);</span><br><span class="line">        console.log(newValue, oldValue);</span><br><span class="line">        console.log(&#x27;---------------&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">      //对象数据类型，拿到的是代理对象proxy</span><br><span class="line">      info(newValue, oldValue) &#123;</span><br><span class="line">        console.log(&#x27;info:&#x27;, newValue);</span><br><span class="line">        // console.log(newValue.name, oldValue.age);</span><br><span class="line">        //如果我非要拿到原来的对象</span><br><span class="line">        console.log(&#123; ...newValue &#125;);</span><br><span class="line">        console.log(Vue.toRaw(newValue));</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-4-watch的配置选项"><a href="#2-4-watch的配置选项" class="headerlink" title="2.4 watch的配置选项"></a><strong>2.4 watch的配置选项</strong></h3><p>​	deep:true 深层次监听</p>
<p>​	immediate 不管监听的数据是否变化立即执行监听函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changeInfo&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">          name: &#x27;alex&#x27;,</span><br><span class="line">          age: 18,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeInfo() &#123;</span><br><span class="line">        this.info.age = 99;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //watch侦听器</span><br><span class="line">    watch: &#123;</span><br><span class="line">      // //默认watch监听不能监听到深层次的变化</span><br><span class="line">      // info() &#123;</span><br><span class="line">      //   console.log(&#x27;info变化了～～～&#x27;);</span><br><span class="line">      // &#125;,</span><br><span class="line">      //完整写法</span><br><span class="line">      info: &#123;</span><br><span class="line">        //监听到数据变化以后，你要做的事</span><br><span class="line">        //拿到的是同一个代理对象</span><br><span class="line">        handler(newValue, oldValue) &#123;</span><br><span class="line">          //一上来newValue有值</span><br><span class="line">          //oldValue为undefined</span><br><span class="line">          console.log(&#x27;info变化了&#x27;, newValue, oldValue);</span><br><span class="line">          console.log(newValue === oldValue);</span><br><span class="line">        &#125;,</span><br><span class="line">        //开启深度的监听</span><br><span class="line">        deep: true,</span><br><span class="line">        //立即监听</span><br><span class="line">        immediate: true,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-5-侦听器的其他写法"><a href="#2-5-侦听器的其他写法" class="headerlink" title="2.5 侦听器的其他写法"></a><strong>2.5 侦听器的其他写法</strong></h3><p>Vue3的文档中没写，但是vue2的文档中写了的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changeInfo&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">          name: &#x27;alex&#x27;,</span><br><span class="line">          age: 18,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeInfo() &#123;</span><br><span class="line">        this.info.age = 99;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //watch侦听器</span><br><span class="line">    watch: &#123;</span><br><span class="line">      &#x27;info.age&#x27;: function (newValue, oldValue) &#123;</span><br><span class="line">        console.log(&#x27;info的age发生变化&#x27;, newValue, oldValue);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样也可以监听到info中age的变化，但是只能监听到age的变化，其他属性的变化就无法监听</p>
<p>还有一种方式$watch的api</p>
<p>在created生命周期中使用this.$watch来监听</p>
<p>​	第一个参数是要侦听的源</p>
<p>​	第二个参数是侦听的回调函数callback</p>
<p>​	第三个参数是侦听时额外的其他选项比如：deep，immediate</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changeInfo&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">          name: &#x27;alex&#x27;,</span><br><span class="line">          age: 18,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeInfo() &#123;</span><br><span class="line">        this.info.age = 99;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //使用$watch</span><br><span class="line">    created() &#123;</span><br><span class="line">      // console.log(123);</span><br><span class="line">      this.$watch(</span><br><span class="line">        &#x27;info&#x27;,</span><br><span class="line">        (newValue, oldValue) =&gt; &#123;</span><br><span class="line">          console.log(newValue, oldValue);</span><br><span class="line">          console.log(this);</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          deep: true,</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-练习"><a href="#3-练习" class="headerlink" title="3.练习"></a>3.<strong>练习</strong></h2><h3 id="3-1-列表选中"><a href="#3-1-列表选中" class="headerlink" title="3.1 列表选中"></a><strong>3.1 列表选中</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li</span><br><span class="line">      :class=&quot;&#123;active:index===currentIndex&#125;&quot;</span><br><span class="line">      v-for=&quot;(movie,index) in movies&quot;</span><br><span class="line">      @click=&quot;liClick(index)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123;movie&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        movies: [&#x27;蜘蛛侠&#x27;, &#x27;GGbond&#x27;, &#x27;闪电侠&#x27;, &#x27;钢铁侠&#x27;],</span><br><span class="line">        currentIndex: 1,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      liClick(index) &#123;</span><br><span class="line">        this.currentIndex = index;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2-购物车🛒"><a href="#3-2-购物车🛒" class="headerlink" title="3.2 购物车🛒"></a><strong>3.2 购物车🛒</strong></h3><p>（能够不看我的代码从头到尾自己实现）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      table &#123;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">      &#125;</span><br><span class="line">      thead &#123;</span><br><span class="line">        background-color: #f6f6f6;</span><br><span class="line">      &#125;</span><br><span class="line">      th,</span><br><span class="line">      td &#123;</span><br><span class="line">        border: 1px solid aqua;</span><br><span class="line">      &#125;</span><br><span class="line">      .active &#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;template v-if=&quot;books.length&quot;&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">              &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">              &lt;th&gt;出版日期&lt;/th&gt;</span><br><span class="line">              &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">              &lt;th&gt;购买数量&lt;/th&gt;</span><br><span class="line">              &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          &lt;/thead&gt;</span><br><span class="line">          &lt;tbody&gt;</span><br><span class="line">            &lt;tr</span><br><span class="line">              :class=&quot;&#123;active:index===currentIndex&#125;&quot;</span><br><span class="line">              @click=&quot;rowClick(index)&quot;</span><br><span class="line">              v-for=&quot;(item,index) in books&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.date&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;formateMoney(item.price)&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;</span><br><span class="line">                &lt;button :disabled=&quot;item.count&lt;=1&quot; @click.stop=&quot;sub(item)&quot;&gt;</span><br><span class="line">                  -</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">                &#123;&#123;item.count&#125;&#125;</span><br><span class="line">                &lt;button @click.stop=&quot;add(item)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">              &lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&lt;button @click.stop=&quot;del(index)&quot;&gt;移除&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;h2&gt;总价:&#123;&#123;formateMoney(totalPrice)&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-else&gt;</span><br><span class="line">        &lt;h2&gt;购物车为空，请添加喜欢的书籍&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;商城中有大量IT类书籍，请购买生发水配合使用&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./data.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      //1.创建app</span><br><span class="line">      const app = Vue.createApp(&#123;</span><br><span class="line">        data: function () &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            books: books,</span><br><span class="line">            currentIndex: -1,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">          totalPrice() &#123;</span><br><span class="line">            return this.books.reduce(</span><br><span class="line">              (prev, item) =&gt; prev + item.price * item.count,</span><br><span class="line">              0</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          rowClick(index) &#123;</span><br><span class="line">            this.currentIndex = index;</span><br><span class="line">          &#125;,</span><br><span class="line">          del(index) &#123;</span><br><span class="line">            this.books.splice(index, 1);</span><br><span class="line">          &#125;,</span><br><span class="line">          sub(item) &#123;</span><br><span class="line">            item.count--;</span><br><span class="line">          &#125;,</span><br><span class="line">          add(item) &#123;</span><br><span class="line">            // this.books[index].count++;</span><br><span class="line">            item.count++;</span><br><span class="line">          &#125;,</span><br><span class="line">          formateMoney(money) &#123;</span><br><span class="line">            return &#x27;¥&#x27; + money.toFixed(2);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      //2. 挂载</span><br><span class="line">      app.mount(&#x27;#app&#x27;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-vue-cli创建vue项目"><a href="#4-vue-cli创建vue项目" class="headerlink" title="4.vue-cli创建vue项目"></a>4.<strong>vue-cli创建vue项目</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure>

<p><img src="https://docimg7.docs.qq.com/image/AgAABlP525xekEaQcEZDALzy3tzes5An.png?w=664&h=235" alt="img"></p>
<p><img src="https://docimg7.docs.qq.com/image/AgAABlP525xZkHqeYXtBzpVqbeggdu_3.png?w=911&h=283" alt="img"></p>
<p><img src="https://docimg10.docs.qq.com/image/AgAABlP525xnz-HCFhtG36OOvquLklL9.png?w=881&h=70" alt="img"></p>
<p><img src="https://docimg6.docs.qq.com/image/AgAABlP525yVUH58z9BH-aXzCMRAZT14.png?w=847&h=122" alt="img"></p>
<p><img src="https://docimg1.docs.qq.com/image/AgAABlP525yEJqhv3O5Aqa1RQetjUYo_.png?w=882&h=103" alt="img"></p>
<p><img src="https://docimg5.docs.qq.com/image/AgAABlP525w6KeSMwwlESbfxzE3OWqpK.png?w=817&h=74" alt="img"></p>
<p><img src="https://docimg9.docs.qq.com/image/AgAABlP525znF4xbfklGAKyVx1_yA6Jf.png?w=927&h=297" alt="img"></p>
<p><img src="https://docimg1.docs.qq.com/image/AgAABlP525yoxsFd7FNLr5DXdRuZJLMH.png?w=740&h=291" alt="img"></p>
<p>Volar的配置</p>
<p><img src="https://docimg4.docs.qq.com/image/AgAABlP525yGXFJZtWJDvqHCwhuaYVrx.png?w=757&h=234" alt="img"></p>
<p><img src="https://docimg4.docs.qq.com/image/AgAABlP525yzU_9zQ-JLs4jze05KQO3G.png?w=220&h=77" alt="img"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础语法(二)</title>
    <url>/2022/06/14/b38-1%20vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(%E4%BA%8C)/</url>
    <content><![CDATA[<h1 id="Vue基础语法（二）"><a href="#Vue基础语法（二）" class="headerlink" title="Vue基础语法（二）"></a>Vue基础语法（二）<span id="more"></span></h1><h2 id="1-v-on绑定事件"><a href="#1-v-on绑定事件" class="headerlink" title="1. v-on绑定事件"></a>1. v-on绑定事件</h2><p>v-on的使用</p>
<p>​	缩写:@</p>
<p>​	参数：event</p>
<p>​	用法：绑定事件回调函数</p>
<h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a><strong>1.1 基本使用</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 基本使用 --&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; v-on:click=&quot;divClick&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 简写 重点掌握 --&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; @click=&quot;divClick&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 不推荐，绑定方法的时候也可以写一个表达式 --&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;counter--&quot;&gt;-1&lt;/button&gt;</span><br><span class="line">  &lt;!-- 绑定其他事件 --&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; @mousemove=&quot;divMouse&quot;&gt;66&lt;/div&gt;</span><br><span class="line">  &lt;!-- 如何绑定多个事件 --&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; @click=&quot;divClick&quot; @mousemove=&quot;divMouse&quot;&gt;多个事件&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; v-on=&quot;&#123;click:divClick,mousemove:divMouse&#125;&quot;&gt;</span><br><span class="line">    多个事件1</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; @=&quot;&#123;click:divClick,mousemove:divMouse&#125;&quot;&gt;多个事件2&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        counter: 0,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      divMouse() &#123;</span><br><span class="line">        console.log(&#x27;鼠标移动了&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">      divClick() &#123;</span><br><span class="line">        console.log(&#x27;6666&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">      add() &#123;</span><br><span class="line">        this.counter++;</span><br><span class="line">      &#125;,</span><br><span class="line">      sub() &#123;</span><br><span class="line">        this.counter--;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="1-2-参数的传递"><a href="#1-2-参数的传递" class="headerlink" title="1.2 参数的传递"></a><strong>1.2 参数的传递</strong></h3><p>你要传递参数就得在@绑定的时候加上()，如果你不需要传递参数，那就不加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 1.默认传递 event --&gt;</span><br><span class="line">  &lt;button @click=&quot;btn1&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">  &lt;!-- 2.只有自己的参数 --&gt;</span><br><span class="line">  &lt;button @click=&quot;btn2(username,age)&quot;&gt;按钮2&lt;/button&gt;</span><br><span class="line">  &lt;!-- 3.自己的参数和event都要 --&gt;</span><br><span class="line">  &lt;!-- 明确想要事件对象需要加$event --&gt;</span><br><span class="line">  &lt;button @click=&quot;btn3(username,age,$event)&quot;&gt;按钮3&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        username: &#x27;alex&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      //绑定的时候没有传递任何参数，event对象会被默认传递进来</span><br><span class="line">      btn1(event) &#123;</span><br><span class="line">        console.log(event.target);</span><br><span class="line">      &#125;,</span><br><span class="line">      btn2(name, age) &#123;</span><br><span class="line">        console.log(name, age);</span><br><span class="line">      &#125;,</span><br><span class="line">      btn3(a, b, c) &#123;</span><br><span class="line">        console.log(a, b, c);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="1-3-修饰符"><a href="#1-3-修饰符" class="headerlink" title="1.3 修饰符"></a><strong>1.3 修饰符</strong></h3><p>常用的是stop阻止冒泡，剩下的看看文档就好：<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers">https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; @click=&quot;haha&quot;&gt;</span><br><span class="line">    &lt;button @click.stop=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      btn() &#123;</span><br><span class="line">        console.log(&#x27;按钮被点击了&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">      haha() &#123;</span><br><span class="line">        console.log(&#x27;盒子被点击了&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-Vue的条件渲染"><a href="#2-Vue的条件渲染" class="headerlink" title="2. Vue的条件渲染"></a>2. Vue的条件渲染</h2><p>根据某些条件来渲染某些元素&#x2F;组件</p>
<p>v-if</p>
<p>v-else</p>
<p>v-else-if</p>
<p>v-show</p>
<h3 id="2-1-demo"><a href="#2-1-demo" class="headerlink" title="**2.1 demo"></a>**2.1 demo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 如果cars为空 整个ul不展示 --&gt;</span><br><span class="line">  &lt;ul v-if=&quot;cars.length&gt;0&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;good in cars&quot;&gt;&#123;&#123;good&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;!-- if不展示的时候展示else的内容 --&gt;</span><br><span class="line">  &lt;h2 v-else&gt;🛒为空，快去淘点东西～～～&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        cars: [],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>v-if，v-else，v-else-if用于根据条件来渲染某一块的内容，只有条件为true的时候才会渲染，这三个指令与if、else、else if类似</p>
<p>v-if：他是惰性的，当条件为false的时候其内容完全不会被渲染或者被销毁掉；当条件为true的时候才会真正渲染某一块的内容。</p>
<h3 id="2-2-v-if，v-else使用"><a href="#2-2-v-if，v-else使用" class="headerlink" title="2.2 v-if，v-else使用"></a><strong>2.2 v-if，v-else使用</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">     &lt;!-- person有内容的时候展示人的信息 姓名+年龄 </span><br><span class="line">     person是一个空对象的时候，不展示</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;div v-if=&quot;Object.keys(person).length&quot;&gt;</span><br><span class="line">       &lt;h2&gt;个人信息&lt;/h2&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;年龄:&#123;&#123;person.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;div v-else&gt;</span><br><span class="line">       &lt;h2&gt;没有输入信息&lt;/h2&gt;</span><br><span class="line">       &lt;p&gt;请输入个人信息～～～&lt;/p&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     //1.创建app</span><br><span class="line">     const app = Vue.createApp(&#123;</span><br><span class="line">       data: function () &#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           person: &#123;</span><br><span class="line">             name: &#x27;alex&#x27;,</span><br><span class="line">             age: 18,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">     &#125;);</span><br><span class="line">     //2. 挂载</span><br><span class="line">     app.mount(&#x27;#app&#x27;);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-v-else-if"><a href="#2-3-v-else-if" class="headerlink" title="2.3 v-else-if"></a><strong>2.3 v-else-if</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1 v-if=&quot;score&gt;90&quot;&gt;倩婷&lt;/h1&gt;</span><br><span class="line">  &lt;h2 v-else-if=&quot;score&gt;80&quot;&gt;良好&lt;/h2&gt;</span><br><span class="line">  &lt;h2 v-else-if=&quot;score&gt;60&quot;&gt;及格&lt;/h2&gt;</span><br><span class="line">  &lt;h2 v-else&gt;alex&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        score: 40,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4-template"><a href="#2-4-template" class="headerlink" title="2.4 template"></a><strong>2.4 template</strong></h3><p>用于控制一组元素，但是又不想使用没有意义的div或者其他元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 我们加一个div的目的是为了控制多个元素的渲染与否，但是这个div是一个多余的dom结构，这个时候我们可以选择使用template来优化 --&gt;</span><br><span class="line">  &lt;template v-if=&quot;Object.keys(person).length&quot;&gt;</span><br><span class="line">    &lt;h2&gt;个人信息&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;年龄:&#123;&#123;person.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;template v-else&gt;</span><br><span class="line">    &lt;h2&gt;没有输入信息&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;请输入个人信息～～～&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        person: &#123;</span><br><span class="line">          name: &#x27;alex&#x27;,</span><br><span class="line">          age: 18,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="2-5-v-show"><a href="#2-5-v-show" class="headerlink" title="2.5 v-show"></a><strong>2.5 v-show</strong></h3><p>v-show后面的条件为true的时候展示，为false不展示 和v-if看起来一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;toggle&quot;&gt;切换&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;img</span><br><span class="line">    v-show=&quot;isShow&quot;</span><br><span class="line">    src=&quot;https://game.gtimg.cn/images/yxzj/web201706/images/comm/floatwindow/wzry_qrcode.jpg&quot;</span><br><span class="line">    alt=&quot;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isShow: true,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      toggle() &#123;</span><br><span class="line">        this.isShow = !this.isShow;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>v-show和v-if的区别：</p>
<p>本质的区别：v-show是通过display：none来让元素消失，而v-if直接把整个dom结构都干掉了，v-if&#x3D;”false”的时候，其对应的原生dom压根都不会渲染</p>
<p>用法的区别:v-show不支持template，v-show不能 v-else 一起用</p>
<p>实际开发：如果是频繁切换的那就用v-show，如果不频繁就使用v-if</p>
<h3 id="3-列表渲染-掌握"><a href="#3-列表渲染-掌握" class="headerlink" title="3.     列表渲染(掌握)"></a>3.     <strong>列表渲染(掌握)</strong></h3><ol>
<li><p><strong>v-for的时候绑定唯一的key</strong></p>
</li>
<li><p><strong>v-for的时候不要使用数组的index作为key</strong></p>
</li>
</ol>
<p>真实开发中，拿到的一组数据并且需要渲染，这个时候我们不会一个个的去写，而是使用</p>
<p><strong>v-for</strong>来完成，v-for类似于js的循环，可以遍历一组数据</p>
<p>比如京东的商品列表。</p>
<p>使用v-for来渲染一组数据，就是我们常说的列表渲染</p>
<h4 id="3-1-v-for的基本使用"><a href="#3-1-v-for的基本使用" class="headerlink" title="3.1 v-for的基本使用"></a><strong>3.1 v-for的基本使用</strong></h4><p>v-for的基本格式 “<strong>item in 数组”</strong></p>
<p>​	数组通常是来自于data或者prop，或者请求</p>
<p>​	item是我们起的一个别名，这个别名可以自定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;电影列表&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;movie in movies&quot;&gt;&#123;&#123;movie&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        movies: [&#x27;多啦a梦&#x27;, &#x27;复仇者联盟&#x27;, &#x27;蜘蛛侠&#x27;],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在我们遍历一个数组的时候，往往可能需要拿到索引来做一些操作，</p>
<p>​	如果在v-for中你需要用到索引的话，v-for&#x3D;”(item,index) in arr”</p>
<p>​	注意：item和index的顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(movie,index) in movies&quot;&gt;</span><br><span class="line">    &#123;&#123;index+1&#125;&#125; -&#123;&#123;movie&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>实际工作中，我们需要渲染的数组往往是比较复杂的</p>
<p>渲染相对复杂一丢丢的数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;商品列表&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;good in goods&quot;&gt;</span><br><span class="line">      &lt;p&gt;商品名称:&#123;&#123;good.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;商品价格:&#123;&#123;good.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        goods: [</span><br><span class="line">          &#123; name: &#x27;mbp&#x27;, price: 1999 &#125;,</span><br><span class="line">          &#123; name: &#x27;imac&#x27;, price: 2999 &#125;,</span><br><span class="line">          &#123; name: &#x27;iphone&#x27;, price: 3999 &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="3-2-v-for的其他类型"><a href="#3-2-v-for的其他类型" class="headerlink" title="3.2 v-for的其他类型"></a><strong>3.2 v-for的其他类型</strong></h4><p>v-for还支持</p>
<p>对象</p>
<p>数字</p>
<p>字符串(所有的可迭代对象) </p>
<p><strong>v-for对象</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;!-- 只要你写了两个或者两个以上的别名，就需要小括号 --&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value,key,index) in info&quot;&gt;&#123;&#123;value&#125;&#125;~&#123;&#123;key&#125;&#125;~&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;!-- 只写一个 --&gt;</span><br><span class="line">  &lt;h2 v-for=&quot;value in info&quot;&gt;&#123;&#123;value&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 写两个 --&gt;</span><br><span class="line">  &lt;h3 v-for=&quot;(value,key) in info&quot;&gt;&#123;&#123;value&#125;&#125;&lt;==&gt;&#123;&#123;key&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">          name: &#x27;alex&#x27;,</span><br><span class="line">          age: 18,</span><br><span class="line">          height: 1.88,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>v-for也支持数字的遍历</p>
<p>​	item就是每个数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in 10&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>v-for遍历字符串</p>
<p>​	item就是单个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in msg&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;hello vue&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>类似v-if如果，外层的div没有实际的意义，可以用template替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;template v-for=&quot;(value,key,index) in info&quot;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;value&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123;key&#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &lt;i&gt;&#123;&#123;index&#125;&#125;&lt;/i&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        info: &#123; name: &#x27;alex&#x27;, age: 18, height: 1.88 &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-3-数组的更新检测"><a href="#3-3-数组的更新检测" class="headerlink" title="3.3 数组的更新检测"></a><strong>3.3 数组的更新检测</strong></h4><p>vue2和vue3的区别，vue2使用类似this.arr[0]&#x3D;”123”是不能触发视图的更新，因为Object.defineproperty并不能监听一个对象中0的访问和修改，但是vue3可以，因为他用的proxy。vue2的解决方案是采用Vue.set()</p>
<p>其实Vue内部将所有变更数组的方法进行了<strong>重写</strong>，保证他们对数组的操作能够被监听到。能够触发视图的更新</p>
<p>​	push 尾部添加</p>
<p>​	pop	 尾部删除</p>
<p>​	shift 头部删除</p>
<p>​	unshift 头部添加</p>
<p>​	splice 任意位置 添加&#x2F;删除&#x2F;替换</p>
<p>​	sort 排序</p>
<p>​	reverse 翻转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in names&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;changeArray&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        names: [&#x27;abc&#x27;, &#x27;cba&#x27;, &#x27;nba&#x27;, &#x27;aaa&#x27;, &#x27;ccc&#x27;],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeArray() &#123;</span><br><span class="line">        this.names.splice(2, 1, &#x27;alex&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>除了上述的一些方法以外，还有一些方法是返回一个新数组，用这个新数组直接替换旧数组也能让视图更新。比如filter，map…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in names&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;changeArray&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        names: [1, 2, 3, 4, 5],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeArray() &#123;</span><br><span class="line">        // console.log(1111);</span><br><span class="line">        // //过滤掉偶数</span><br><span class="line">        // this.names = this.names.filter((ele) =&gt; ele % 2);</span><br><span class="line">        //箭头函数简写的注意：一旦你写了&#123;&#125;就得写return</span><br><span class="line">        this.names = this.names.map((ele) =&gt; &#123;</span><br><span class="line">          ele = ele * 2;</span><br><span class="line">          return ele;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-4-v-for中key的作用"><a href="#3-4-v-for中key的作用" class="headerlink" title="3.4 v-for中key的作用"></a><strong>3.4 v-for中key的作用</strong></h4><p>官方：</p>
<p>​	key属性主要用于Vue的<strong>虚拟DOM</strong>算法，在<strong>新旧Vnode</strong>对比时辨识Vnode；</p>
<p>​	如果不使用key，Vue会使用一种最大限度地减少动态元素并且尽可能地尝试就地<strong>修改&#x2F;复用</strong>相同类型的元素的算法</p>
<p>​	使用key时，他会基于key的变化重新排列元素的顺序，并且移除&#x2F;销毁key不存在的元素。个人：<strong>差量更新，就地复用</strong></p>
<p>认识vnode</p>
<p>​	因为还没有学习组件，所以我们暂时理解html元素创建出来的vnode</p>
<p>​	Virtual Node虚拟节点；无论是组件还是html元素在vue中都会解析成一个个的虚拟的节点</p>
<p>​	Vnode本质就是一个js对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;title&quot; style=&quot;font-size: 30px; color: red&quot;&gt;哈哈哈&lt;/div&gt;</span><br><span class="line">    &lt;!-- 上述结构会在vue中抽象成下面的vnode --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const vnode = &#123;</span><br><span class="line">        type: &#x27;div&#x27;,</span><br><span class="line">        props: &#123;</span><br><span class="line">          class: &#x27;title&#x27;,</span><br><span class="line">          style: &#123;</span><br><span class="line">            &#x27;font-size&#x27;: &#x27;30px&#x27;,</span><br><span class="line">            color: &#x27;red&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        children: &#x27;哈哈哈&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>vue在解析模版的时候，会把里面的一个个标签都抽象成一个个vnode，实际上我们的页面不只是上述简单一个div构成，而是许多元素，这些元素被抽象的时候最终会形成像真实dom一样的树形结构，这样的结构就是VDOM</p>
<p>也就是多个vnode构成的一个相对比较大的js对象而已。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;div&quot;</span>,</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&quot;app&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line"><span class="comment">//很多很多其他vnode</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>插入f案例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;insertF&quot;&gt;插入f&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in letters&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        letters: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      insertF() &#123;</span><br><span class="line">        this.letters.splice(2, 0, &#x27;f&#x27;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们确定一件事，在本次更新中，button和ul都不用更新，需要更新只是li,但是观察控制台的element会发现点击以后闪烁的li有四个，从插入f开始后续的li都会销毁然后重新创建，如果我们给他绑定一个唯一的key，就能够更新过程中只更改一个li</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in letters&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>





<p>vue的diff算法对于有key和没有key的虚拟dom到底是怎么来做的</p>
<p>vue源码中的操作</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165315669.png" alt="image-20230630165315669"></p>
<p>我们先看没有key的操作</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165341178.png" alt="image-20230630165341178"></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165354502.png" alt="image-20230630165354502"></p>
<p>那具体是怎么做的呢？</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165407979.png" alt="image-20230630165407979"></p>
<p>有key的时候源码的操作</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165418926.png" alt="image-20230630165418926"></p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165435148.png" alt="image-20230630165435148"></p>
<p>有key的diff操作如下</p>
<p>第一步从头开始遍历，调用patch比较，c和f的key不一致会跳出</p>
<p>第二步从尾巴开始遍历，比较，b和f的key不一致，会跳出</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165454897.png" alt="image-20230630165454897"></p>
<p>第三步如果旧的节点遍历完了，依然有新节点，那就新增</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165509046.png" alt="image-20230630165509046"></p>
<p>第四步：如果新节点遍历完毕以后，依然还有旧的节点，移除旧节点</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165523023.png" alt="image-20230630165523023"></p>
<p>第五步：最特殊的情况，中间还有很多未知或者 乱序的节点</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230630165535285.png" alt="image-20230630165535285"></p>
<p>为什么说vue3比vue2还慢，其实是diff的时候有key的情况下，第五种情况，他会重新遍历一遍整个旧的节点，用map建立一个索引的图结构，目的是为了最大程度的复用旧的节点。这里说的慢是js慢，因为vue2采用的比较是旧节点首尾索引，新节点首位索引，他的时间复杂度是O(n),vue3是O(nlogn)，所以某些情况下diff的时候vue3会更慢，但是这种慢是能接受的，js更多的操作目的是为了dom更少的操作。</p>
<p>解释如下bug:选中imac，然后删除mpb，发现默认选中的不再是imac而是iphone因为此时iphone的索引变成了1，vue为了最大程度的复用旧节点，删除前有选中的是key为1的li，删除后选中的也是key为1的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item,index) in goods&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; /&gt;</span><br><span class="line">      商品名称：&#123;&#123;item.name&#125;&#125; 商品价格：&#123;&#123;item.price&#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;del(index)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        goods: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, name: &#x27;mbp&#x27;, price: 1999 &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, name: &#x27;imac&#x27;, price: 2999 &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, name: &#x27;phone&#x27;, price: 3999 &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      del(index) &#123;</span><br><span class="line">        this.goods.splice(index, 1);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础语法(一)</title>
    <url>/2022/06/12/b38%20Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="Vue基础语法-一"><a href="#Vue基础语法-一" class="headerlink" title="Vue基础语法(一)"></a><strong>Vue基础语法(一)</strong><span id="more"></span></h1><h2 id="1-认识Vue"><a href="#1-认识Vue" class="headerlink" title="1.认识Vue"></a>1.认识Vue</h2><p>Vue是一套用于<strong>构建用户界面</strong>的<strong>渐进式</strong>JavaScript框架。作者：evenYou 尤雨溪 Vuejs Vue.js，他基于标准的html、css、js构建，并且提供了一套声明式的，组件化的编程模型，可以帮助我们高效的开发用户界面，不论这个界面的逻辑是简单还是复杂。</p>
<p>渐进式：可以在项目中一点点的来引入和使用Vue，而不必一开始就使用vue来开发整个项目。</p>
<p>目前前端流行的三大框架</p>
<p>Angular:入门门槛高，国内市场占有率低，不否认本身是及其优秀的框架</p>
<p>React：在国内外市场占有率都很高，也是作为前端必学的一个框架。</p>
<p>Vue: 在国内市场占有率最高的一个框架，几乎所有的前端岗位都会对vue有要求。</p>
<p>现实的角度</p>
<ul>
<li><p>后端：Java，Go，nodejs</p>
</li>
<li><p>前端：JS</p>
</li>
</ul>
<h2 id="2-如何使用Vue"><a href="#2-如何使用Vue" class="headerlink" title="2.如何使用Vue"></a>2.<strong>如何使用Vue</strong></h2><p>Vue的本质，就是一个js库,刚开始我们不用把他想的太复杂，就把它理解成一个封装好的库就行。</p>
<p>使用方式</p>
<ol>
<li><p>cdn <code>[https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;</code>](<a href="https://unpkg.com/vue@3/dist/vue.global.js">https://unpkg.com/vue@3/dist/vue.global.js</a>)</p>
</li>
<li><p>下载Vue 的js文件，并且自己手动的引入</p>
</li>
<li><p>通过npm包管理工具来使用（在webpack的时候）</p>
</li>
<li><p>直接通过vue cli &#x2F;Vite创建项目。</p>
</li>
</ol>
<h3 id="2-1-cdn引入"><a href="#2-1-cdn引入" class="headerlink" title="2.1 cdn引入"></a><strong>2.1 cdn引入</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- cdn引入vue --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 使用vue --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//Vue的代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//这个app可以传入一个对象作为参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//template属性可以解析html标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`&lt;h1&gt;hello world&lt;/h1&gt;`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把app挂载到对应的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把vue挂到id为app的div中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="2-2-下载引入"><a href="#2-2-下载引入" class="headerlink" title="2.2 下载引入"></a><strong>2.2 下载引入</strong></h3><p>下载Vue的源码，直接打开cdn的连接</p>
<ol>
<li><p>复制所有代码，创建一个新的文件然后将代码粘贴进去</p>
</li>
<li><p>最后通过script引入本地的文件</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- cdn引入vue --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 使用vue --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//Vue的代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//这个app可以传入一个对象作为参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//template属性可以解析html标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`&lt;h1&gt;hello world&lt;/h1&gt;`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把app挂载到对应的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把vue挂到id为app的div中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h2 id="3-Vue的体验"><a href="#3-Vue的体验" class="headerlink" title="3.Vue的体验"></a>3.<strong>Vue的体验</strong></h2><h3 id="3-1-动态数据"><a href="#3-1-动态数据" class="headerlink" title="3.1 动态数据"></a><strong>3.1 动态数据</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- cdn引入vue --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 使用vue --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//Vue的代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//这个app可以传入一个对象作为参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//template属性可以解析html标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`&lt;h1&gt;hello world&lt;/h1&gt;`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把app挂载到对应的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把vue挂到id为app的div中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-列表数据"><a href="#3-2-列表数据" class="headerlink" title="3.2 列表数据"></a><strong>3.2 列表数据</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//v-for可以遍历数组，对象，对应的movie就是数组的每一项，</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//如果将来这个电影数组里面有100  1000  10000部电影</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//我的代码不用动</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;h2&gt;电影列表&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;ul&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;li v-for=&quot;movie in movies&quot;&gt;&#123;&#123;movie&#125;&#125;&lt;/li&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;/ul&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;天河阔少-alex&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">movies</span>: [<span class="string">&#x27;蜘蛛侠&#x27;</span>, <span class="string">&#x27;GGBond&#x27;</span>, <span class="string">&#x27;疾速追杀4&#x27;</span>, <span class="string">&#x27;霸王别姬&#x27;</span>, <span class="string">&#x27;海上钢琴师&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-3-计数器"><a href="#3-3-计数器" class="headerlink" title="3.3 计数器"></a><strong>3.3 计数器</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//v-for可以遍历数组，对象，对应的movie就是数组的每一项，</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//如果将来这个电影数组里面有100  1000  10000部电影</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//我的代码不用动</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;h2&gt;电影列表&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;ul&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;li v-for=&quot;movie in movies&quot;&gt;&#123;&#123;movie&#125;&#125;&lt;/li&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;/ul&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;天河阔少-alex&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">movies</span>: [<span class="string">&#x27;蜘蛛侠&#x27;</span>, <span class="string">&#x27;GGBond&#x27;</span>, <span class="string">&#x27;疾速追杀4&#x27;</span>, <span class="string">&#x27;霸王别姬&#x27;</span>, <span class="string">&#x27;海上钢琴师&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重构计数器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//优先级更高</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// template: &#x27;哈哈哈哈哈&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">counter</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//所有的方法也需要交给vue不然模版里面访问不到的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// add:function()&#123;&#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">sub</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="4-声明式和命令式编程"><a href="#4-声明式和命令式编程" class="headerlink" title="4.声明式和命令式编程"></a>4.<strong>声明式和命令式编程</strong></h2><p>原生开发和Vue开发模式的不同，因为这是两种完全不同的编程范式</p>
<p>**命令式编程(原生)**：how to do</p>
<p>**声明式编程(Vue)**：what to do,由框架完成了how的过</p>
<h2 id="5-MVC和MVVM"><a href="#5-MVC和MVVM" class="headerlink" title="5.MVC和MVVM"></a>5.<strong>MVC和MVVM</strong></h2><p>都是软件的架构体系</p>
<p>​	MVC-Model，View，Controller的简写，在前期被广泛使用比如后端，IOS，前端</p>
<p>​	MVVM-Model，view，ViewModel，是目前非常流行的架构</p>
<p>model：数据</p>
<p>view：界面</p>
<p>viewModel:对应在vue中就是vue，也就是帮我们自动管理视图和数据的关系</p>
<h2 id="6-options-data属性选项"><a href="#6-options-data属性选项" class="headerlink" title="6.options-data属性选项"></a>6.<strong>options-data属性选项</strong></h2><p>data属性是一个函数，并且该函数需要返回一个对象</p>
<p>​	在Vue2.x版本，可以直接写一个对象(官方推荐是一个函数)</p>
<p>​	在Vue3.x版本，必须是一个函数，否则直接报错</p>
<p>data返回的对象会被Vue的响应式系统劫持，之后对该对象的属性的修改&#x2F;访问都会在劫持中被处理</p>
<h2 id="7-options-methods属性选项"><a href="#7-options-methods属性选项" class="headerlink" title="7. options-methods属性选项"></a>7. <strong>options-methods属性选项</strong></h2><p>不能使用箭头函数理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，因为此时箭头函数内this指向了window而不是vue实例</p>
<p>不使用箭头函数的情况下，this到底指向谁？</p>
<p>它内部定义一个publicThis的变量保存代理的实例，然后读取选项api中的methods，遍历所有函数，通过Object.defineProperty给每个函数用bind绑定了publicThis，这样每个methods中的函数访问this拿到的就是代理的实例，拿到data中的数据</p>
<ol>
<li><p>不能写箭头函数</p>
</li>
<li><p>已经帮我们绑定好this方便我们操作数据</p>
</li>
</ol>
<p>template，data，methods API，比如props，watch，computed，setup，生命周期函数，都会讲到</p>
<p>慢慢来反而比较快。</p>
<h2 id="8-代码片段"><a href="#8-代码片段" class="headerlink" title="8.代码片段"></a>8.<strong>代码片段</strong></h2><p>日常开发，学习有一些代码块，我们是需要经常使用，我们可以利用vscode的代码片段，而不需要每次手动书写，如何配置代码片段</p>
<ol>
<li><p>复制自己需要的代码片段</p>
</li>
<li><p>在网站中生成对应的代码片段 <a href="https://snippet-generator.app/">https://snippet-generator.app/</a></p>
</li>
<li><p>在vscode中配置</p>
</li>
</ol>
<p><img src="https://docimg10.docs.qq.com/image/AgAABlP525wLP_zCX8RIhbCEDGpa1it-.png?w=1238&h=407" alt="img"></p>
<h2 id="9-Mustache语法"><a href="#9-Mustache语法" class="headerlink" title="9.Mustache语法"></a>9.<strong>Mustache语法</strong></h2><p>React的开发模式：</p>
<p>​	react是使用jsx，所有的代码是一种类似js的方式，之后通过babel将jsx编译成React.createElement来使用</p>
<p>Vue的开发模式：</p>
<p>​	使用基于html的模版语法，在模版中允许开发者以声明式的方法将DOM和底层组件实例的数据绑定在一起。</p>
<p>如果我们希望在vue中展示数据，使用最多的语法就是mustache语法(双大括号)的文本插值，也有人叫他双胡子语法。之前写的都是data中的数据，实际上他里面还可以是一个<strong>js表达式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;counter*3&#125;&#125;</span><br><span class="line">&#123;&#123;info.split(&quot; &quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;age&gt;=18?&#x27;成年人&#x27;:&#x27;未成年人&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;formateDate()&#125;&#125;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="10-常见的基本指令"><a href="#10-常见的基本指令" class="headerlink" title="10.常见的基本指令"></a>10.<strong>常见的基本指令</strong></h2><h3 id="10-1-v-once指令"><a href="#10-1-v-once指令" class="headerlink" title="10.1 v-once指令"></a><strong>10.1 v-once指令</strong></h3><p>用于指定的元素或者组件只渲染一次</p>
<p>当数据发生变化的时候，元素&#x2F;组件以及其所有子元素都视为静态内容并且跳过编译，该指令可用于性能优化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 如果是子节点也只会渲染一次 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 只渲染一次，哪怕后续数据有变化我也不再更新 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;--&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;天河阔少&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">counter</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&#x27;alex&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">counter</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">counter</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-2-v-text指令"><a href="#10-2-v-text指令" class="headerlink" title="10.2 v-text指令"></a><strong>10.2 v-text指令</strong></h3><p>用于更新元素的textContent</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa&#123;&#123;msg&#125;&#125;aaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;!-- msg的内容会覆盖掉原有的aaaaaa --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    aaaaaaa</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;天河阔少&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="10-3-v-html指令"><a href="#10-3-v-html指令" class="headerlink" title="10.3 v-html指令"></a><strong>10.3 v-html指令</strong></h3><p>解析html字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa&#123;&#123;msg&#125;&#125;aaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>aaaaaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  //1.创建app</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = Vue.createApp(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data: function () &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      return &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        msg: `<span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size:50px;&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>`,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#125;;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    methods: &#123;&#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;);</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  //2. 挂载</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  app.mount(&#x27;#app&#x27;);</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-4-v-pre"><a href="#10-4-v-pre" class="headerlink" title="10.4 v-pre"></a><strong>10.4 v-pre</strong></h3><p>v-pre用于跳过元素和它的子元素的编译过程，显示原始的mustache标签，用户跳过不需要编译的节点，加快速度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>12312312<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;天河阔少-alex&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-5-v-cloak"><a href="#10-5-v-cloak" class="headerlink" title="10.5 v-cloak"></a><strong>10.5 v-cloak</strong></h3><p>这个指令保持在元素上，直到关联组件实例结束编译。往往和css一起，防止用户看到双括号结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  [v-cloak] &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2 v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //1.创建app</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;天河阔少-alex&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  //2. 挂载</span><br><span class="line">  app.mount(&#x27;#app&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="10-6-v-memo"><a href="#10-6-v-memo" class="headerlink" title="10.6 v-memo"></a><strong>10.6 v-memo</strong></h3><p>部分缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- v-memo memory记忆--&gt;</span><br><span class="line">  &lt;!-- 只有name的更新才会导致重新渲染其他的age height的更新不会重新渲染甚至连<span class="title class_">Vnode</span> <span class="variable constant_">VDOM</span>都不会创建 --&gt;      </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-memo</span>=<span class="string">&quot;[name]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;height&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAge&quot;</span>&gt;</span>改变age<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>改变name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">height</span>: <span class="number">1.88</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">88</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;收租佬&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="11-v-bind绑定属性-掌握"><a href="#11-v-bind绑定属性-掌握" class="headerlink" title="11 v-bind绑定属性(掌握)"></a><strong>11 v-bind绑定属性(掌握)</strong></h2><p>前面讲的一系列指令，主要是将值插入到模版中，或者向另一个组件传递值</p>
<p>在开发中，有一些属性需要动态绑定的，比如a的连接href、图片的src、动态绑定一些class&#x2F;style等等</p>
<p>v-bind：</p>
<pre><code>缩写 **:**

用法 动态地绑定一个或者多个attribute，或者给组件prop传值
</code></pre>
<h3 id="11-1-绑定基本属性"><a href="#11-1-绑定基本属性" class="headerlink" title="11.1 绑定基本属性"></a><strong>11.1 绑定基本属性</strong></h3><p>两个注意事项：</p>
<ol>
<li><p>不要忘记加冒号</p>
</li>
<li><p>在methods中操作data中的数据时 记得加this</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 把imgUrl1当作资源的名称，而不是data中的一个变量来解析 --&gt;</span><br><span class="line">  &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgUrl1&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span> --&gt;</span><br><span class="line">  &lt;!-- <span class="number">1.</span>绑定img的src --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;defaultSrc&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line">  &lt;!-- <span class="number">2.</span>实际开发往往简写 --&gt;</span><br><span class="line">  &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl1&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;href&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;swtichImg()&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span> --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;swtichImg&quot;</span>&gt;</span>切换图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">href</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">imgUrl1</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="string">&#x27;https://t7.baidu.com/it/u=848096684,3883475370&amp;fm=193&amp;f=GIF&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">imgUrl2</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="string">&#x27;https://t7.baidu.com/it/u=1653814446,2847580380&amp;fm=193&amp;f=GIF&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//如果defaultSrc和imgUrl1相等则展示url1如果不等则展示默认的url2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">defaultSrc</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="string">&#x27;https://t7.baidu.com/it/u=848096684,3883475370&amp;fm=193&amp;f=GIF&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//这里面操作data中的数据一定要加this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">swtichImg</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">defaultSrc</span> =</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">defaultSrc</span> === <span class="variable language_">this</span>.<span class="property">imgUrl1</span> ? <span class="variable language_">this</span>.<span class="property">imgUrl2</span> : <span class="variable language_">this</span>.<span class="property">imgUrl1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11-2-绑定class"><a href="#11-2-绑定class" class="headerlink" title="11.2 绑定class"></a><strong>11.2 绑定class</strong></h3><p>数据为某个状态的时候，字体为红色，数据是另一个状态的时候我们的字体为黑色。</p>
<p>绑定class有两种方法</p>
<ol>
<li><p>对象语法</p>
</li>
<li><p>数组语法</p>
</li>
</ol>
<p>对象语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .<span class="property">active</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  .<span class="property">alex</span> &#123;</span><br><span class="line">    background-<span class="attr">color</span>: aqua;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 1.基本的绑定 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 2.动态class可以写对象语法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span>alex 唱跳rap<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAlex&quot;</span>&gt;</span>改变alex<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 2.1 对象的基本语法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- active的类名是否生效根据isActive的布尔值来决定 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span>alex 唱跳rap<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 2.2 对象语法的多个键值对 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isActive,alex:true,jack:false&#125;&quot;</span>&gt;</span>alex 唱跳rap<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 2.3 动态绑定的class 和普通的class同时使用 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;alex&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span>alex 唱跳rap<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 2.4 methods --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;DynamicClass()&quot;</span>&gt;</span>alex 唱跳rap<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//1.创建app</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">classes</span>: <span class="string">&#x27;active aaa bbb ccc asdsad adsdasdasd&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">isActive</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changeAlex</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isActive</span> = !<span class="variable language_">this</span>.<span class="property">isActive</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">DynamicClass</span>() &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123; <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span>, <span class="attr">alex</span>: <span class="literal">true</span>, <span class="attr">jack</span>: <span class="literal">false</span> &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2. 挂载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.tailwindcss.cn/">https://www.tailwindcss.cn/</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试用webpack搭建开发环境</title>
    <url>/2022/06/10/b37%20webpack%E7%9A%84plugin%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><strong>webpack</strong><span id="more"></span></h1><h2 id="1-Plugin"><a href="#1-Plugin" class="headerlink" title="1.Plugin"></a>1.Plugin</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a><strong>1.1 定义</strong></h3><p>loader是用于特定的模块类型进行转换 .vue-&gt;.js</p>
<p>Plugin用于执行更加广泛的任务，比如打包优化，资源管理，等等…</p>
<h3 id="1-2-CleanWebpackPlugin"><a href="#1-2-CleanWebpackPlugin" class="headerlink" title="1.2 CleanWebpackPlugin"></a><strong>1.2 CleanWebpackPlugin</strong></h3><p>就和output的clean:true效果一样。插件的使用也是两步，安装，配置</p>
<p>安装 npm i clean-webpack-plugin -D</p>
<p>然后配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125; =<span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//其他配置省略</span></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">]</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-HtmlWebpackPlugin"><a href="#1-3-HtmlWebpackPlugin" class="headerlink" title="1.3 HtmlWebpackPlugin"></a><strong>1.3 HtmlWebpackPlugin</strong></h3><p>不太规范的地方，我们是在根目录下手动创建的一个html，但是最终打包后的文件中并没有index.html，进行项目部署的时候，必须要有一个index.html，所以我们也需要对html进行打包处理，使用另一个插件 :HtmlWebpackPlugin</p>
<p>安装：npm install html-webpack-plugin -D</p>
<p>配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"><span class="attr">title</span>:<span class="string">&#x27;管理台项目&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>再次打包，发现页面也会打包处理，而且会自动引入js。但是我们的vue的模块没了，这是因为他默认是找<strong>ejs</strong>的一个模版的html</p>
<p><strong>自定义模版，</strong>往往默认的模版是不能够满足我们的需要的，所以我们需要自定义一个模版，比如vue&#x2F;react都会有一个 noscript标签，而且他们都需要挂载到根元素中 </p>
<p>我们自己编写的模版的html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">favicon.ico&quot; /&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  &lt;%= htmlWebpackPlugin.options.title%&gt;</span><br><span class="line">  非常抱歉，请开启浏览器的设置允许js执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>里面会有类似&lt;%&#x3D; 变量%&gt;的语法，这个是EJS模版填充数据的方式，在配置htmlwebpackplugin的时候我们可以添加template属性来指定你要的模版</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>: <span class="string">&#x27;管理台项目&#x27;</span>,</span><br><span class="line">     <span class="comment">// 用自己的html作为模版</span></span><br><span class="line">     <span class="attr">template</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">   &#125;),</span><br></pre></td></tr></table></figure>


<p>由于没有BASE_URL常量，所以会报错，我们需要定义这个常量–使用DefinePlugin插件</p>
<p>DefinePlugin不需要安装，他是一个webpack内置的插件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line"><span class="attr">BASE_URL</span>:<span class="string">&quot;&#x27;./&#x27;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-mode配置"><a href="#2-mode配置" class="headerlink" title="2.mode配置"></a>2.<strong>mode配置</strong></h2><p>mode：’none’|’development’|’production’</p>
<p>none:默认不使用任何优化 而且打包后的页面会报错</p>
<p>development:不报错，页面能够正常运行，不会压缩代码</p>
<p>production:能运行，会采用默认的内置优化，压缩代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;none&#x27;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-搭建本地开发环境"><a href="#3-搭建本地开发环境" class="headerlink" title="3.搭建本地开发环境"></a>3.<strong>搭建本地开发环境</strong></h2><p>目前我们写的代码，为了运行起来</p>
<ol>
<li><p>npm run build 打包相关的代码</p>
</li>
<li><p>live server或者是浏览器打开查看效果</p>
</li>
</ol>
<p>真实开发中这个过程手动操作会影响效率，我们希望可以自动打包并且展示</p>
<p>webpack中常用的自动编译插件是</p>
<p>webpack-dev-server</p>
<p>安装:npm i webpack-dev-server -D</p>
<p>配置 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line"><span class="attr">hot</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">host</span>:<span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>:<span class="number">8888</span>,</span><br><span class="line"><span class="attr">open</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">compress</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;serve&quot;</span>:<span class="string">&quot;webpack serve --config webpack.config.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们访问对应的地址，修改模版的index.html，会发现他会自动打包.</p>
<h3 id="3-1-认识HMR模块热替换"><a href="#3-1-认识HMR模块热替换" class="headerlink" title="3.1 认识HMR模块热替换"></a><strong>3.1 认识HMR模块热替换</strong></h3><p>什么是HMR</p>
<ul>
<li>Hot Module Replacement,模块热替换，是指在程序运行过程中，替换，添加，删除，模块的时候不会重新刷新整个页面</li>
</ul>
<p>默认情况下，webpack-dev-server会开启HMR，如果你把hot设为false 当你修改代码后会导致整个页面重新更新。</p>
<p>框架中也有HMR，vue中使用的vue-loader能够提供.vue文件的HMR，react中之前是用的React Hot Loader，现在用的react-refresh</p>
<h3 id="3-2-host配置"><a href="#3-2-host配置" class="headerlink" title="3.2 host配置"></a><strong>3.2 host配置</strong></h3><p>设置主机地址：</p>
<ul>
<li><p>默认是localhost，如果希望其他设备也可以访问，设置为’0.0.0.0’</p>
</li>
<li><p>localhost和0.0.0.0的区别</p>
</li>
<li><p>localhost:本质上是一个域名，通常被解析为127.0.0.1(回环地址 Loop Back Address)自己主机发出去的包被自己接受。正常的数据包 需要经过 应用层-传输层-网络层-数据链路层-物理层；而回环地址是直接在网络层就获取到了，不经过数据链路层和物理层的。</p>
</li>
<li><p>0.0.0.0：监听IPV4上的所有的地址，再根据端口找到不同的应用程序，如果手机和电脑是同一个wifi，那么设置为0.0.0.0以后，手机可以访问</p>
</li>
</ul>
<p><img src="https://docimg4.docs.qq.com/image/AgAABlP525w6-QcqUVlHg5ez3Nmd0gJv.png?w=740&h=64" alt="img"></p>
<h3 id="3-3-port-open-compress"><a href="#3-3-port-open-compress" class="headerlink" title="3.3 port,open,compress"></a><strong>3.3 port,open,compress</strong></h3><p>port:设置监听的端口，默认是8080</p>
<p>open:是否自动打开浏览器 false&#x2F;true</p>
<p>compress:是否开启静态文件的压缩(gzip方式)</p>
<h2 id="4-区分环境"><a href="#4-区分环境" class="headerlink" title="4.区分环境"></a>4.<strong>区分环境</strong></h2><p>目前我们所有的配置都是放在webpack.config.js中</p>
<ul>
<li><p>当配置越来越多时，这一个文件会变得不好维护。</p>
</li>
<li><p>而且某些配置是在开发用的，某些配置是在生产环境用的，不管那个环境的配置都在同一个文件</p>
</li>
<li><p>我们需要对配置进行划分，方便维护和管理</p>
</li>
</ul>
<p>方式一：编写不同的配置文件，维护不同的js，但是会有重复的代码</p>
<p>方式二✅:将所有的配置文件统一放在config中进行管理，同时使用自动合并代码</p>
<p>在config文件夹中新建三个js文件</p>
<p><a href="http://webpack.dev.config.js/">webpack.dev.config.js</a>: 存放开发配置</p>
<p><a href="http://webpack.common.config.js/">webpack.common.config.js</a> ：存放公共配置</p>
<p>webpack.prod.config.js：存放生产配置</p>
<p><strong>入口文件的解析:</strong></p>
<p>我们测试发现，三个配置文件单独放到一个文件夹，出口的路径要改，但是入口的不能改</p>
<p>其实是由于webpack的一个entry的context属性，该属性用于解析入口(entry)和加载器(loader)</p>
<ul>
<li>默认是webpack的启动目录，也可以修改成其他的，但是最好不要</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"> <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../&#x27;</span>),</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自动合并代码需要的插件：webpack-merge</p>
<p>安装：npm i webpack-merge -D</p>
<p>公共配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任何环境都有的配置</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/dist/index&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/i</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">30</span> * <span class="number">1024</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;img/[name]_[hash:8][ext]&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">      <span class="attr">pages</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/pages&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;管理台项目&#x27;</span>,</span><br><span class="line">      <span class="comment">// 用自己的html作为模版</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&quot;&#x27;./&#x27;&quot;</span>,</span><br><span class="line">      <span class="comment">//额外定义自己需要的一些变量</span></span><br><span class="line">      <span class="attr">alex</span>: <span class="string">&quot;&#x27;alexxxxxxxxxxx&#x27;&quot;</span>,</span><br><span class="line">      <span class="attr">counter</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>开发配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开发配置</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.config&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(commonConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// host: &#x27;0.0.0.0&#x27;,</span></span><br><span class="line">    <span class="comment">// port: 9999,</span></span><br><span class="line">    <span class="comment">// open: true,</span></span><br><span class="line">    <span class="comment">// compress: false,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>生产配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产环境的配置</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.config&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(commonConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不要忘记修改package.json:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve --config ./config/webpack.dev.config.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./config/webpack.prod.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽离和压缩css"><a href="#抽离和压缩css" class="headerlink" title="抽离和压缩css"></a><strong>抽离和压缩css</strong></h3><p>使用插件 mini-css-extract-plugin</p>
<p>安装：npm i mini-css-extract-plugin -D</p>
<p>配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产环境的配置</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(commonConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//修改css的名字</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">//contenthash用文件的内容去计算hash值</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;styles/[contenthash:8].css&#x27;</span>,</span><br><span class="line">    &#125;),  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>css确实抽出为文件，而且自动link了，但是没有压缩</p>
<p>压缩，使用插件 css-minimizer-webpack-plugin</p>
<p>安装：npm i css-minimizer-webpack-plugin -D</p>
<p>配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cssMinimizerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;css-minimizer-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title function_">cssMinimizerPlugin</span>()],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create </span><br></pre></td></tr></table></figure>


<p><img src="https://docimg9.docs.qq.com/image/AgAABlP525wMLz31nK5FD7ImL9kXPnqu.png?w=698&h=75" alt="img"></p>
<p>选择第三个</p>
<p><img src="https://docimg8.docs.qq.com/image/AgAABlP525yTqxsnBTdPJqh_ujprXXZR.png?w=1046&h=422" alt="img"></p>
<p><img src="https://docimg10.docs.qq.com/image/AgAABlP525wytjLat0dDC6Y10lIg93Zv.png?w=1094&h=320" alt="img"></p>
<p><img src="https://docimg6.docs.qq.com/image/AgAABlP525wFRqhgNUVJBKWbgSyZ3FY3.png?w=818&h=221" alt="img"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack尝试</title>
    <url>/2022/06/08/b36%20webpack/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack<span id="more"></span></h1><h2 id="1-path模块"><a href="#1-path模块" class="headerlink" title="1.path模块"></a>1.path模块</h2><h3 id="1-1-什么是path"><a href="#1-1-什么是path" class="headerlink" title="1.1 什么是path"></a>1.1 什么是path</h3><p>path模块用于对路径和文件进行处理，提供了许多方法</p>
<p>macOS和windows上路径的处理不一样，window会使用\或者\来作为路径的分割符号，macOS和linux使用&#x2F;，如果我们在window上开发使用\作为分割符号，部署到linux上显示的路径就会出现问题。所以为了解决他们之间的差异，在开发中对于路径的操作我们会使用path模块</p>
<h3 id="1-2-path常见的API"><a href="#1-2-path常见的API" class="headerlink" title="1.2 path常见的API"></a><strong>1.2 path常见的API</strong></h3><p>dirname 获取文件所在的路径</p>
<p>basename 文件名，有后缀</p>
<p>extname 后缀名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">&#x27;C://user/local/aabb.txt&#x27;</span>;</span><br><span class="line"><span class="comment">//获取文件路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(filePath));</span><br><span class="line"><span class="comment">//带后缀的文件名 aabb.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(filePath));</span><br><span class="line"><span class="comment">//获取文件后缀</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(filePath));</span><br></pre></td></tr></table></figure>

<p>路径的拼接：path.join</p>
<p>​	我们在拼接路径的时候，不同的操作系统使用不同的分隔符号，这时候我们要使用path.join方法来消除差异</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//路径1</span></span><br><span class="line"><span class="keyword">const</span> path1 = <span class="string">&#x27;/abc/bbc&#x27;</span>;</span><br><span class="line"><span class="comment">//路径2</span></span><br><span class="line"><span class="keyword">const</span> path2 = <span class="string">&#x27;../jack/alex/kern.txt&#x27;</span>;</span><br><span class="line"><span class="comment">//我要拼接路径</span></span><br><span class="line"><span class="comment">//字符串的拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path1 + path2);</span><br><span class="line"><span class="comment">//路径的拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">join</span>(path1, path2));</span><br></pre></td></tr></table></figure>

<p>拼接绝对路径path.resolve(重要)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//resolve拼接多个路径，他的返回值一定是绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从右往左来解析，一旦遇到绝对路径就停止  /asdasda.js</span></span><br><span class="line"><span class="comment">//  /bbc.txt刚好就是绝对路径，所以直接返回</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;./abc/cba&#x27;</span>, <span class="string">&#x27;../jack/alex&#x27;</span>, <span class="string">&#x27;/bbc.txt&#x27;</span>));</span><br><span class="line"><span class="comment">//三个都不是</span></span><br><span class="line"><span class="comment">//不仅拼接了传入的三个路径，而且把工作区目录也加上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;./abc/cba&#x27;</span>, <span class="string">&#x27;../jack/alex&#x27;</span>, <span class="string">&#x27;./bbc.txt&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接获取当前工作目录的绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>());</span><br></pre></td></tr></table></figure>

<h2 id="2-认识webpack"><a href="#2-认识webpack" class="headerlink" title="2.认识webpack"></a>2.<strong>认识webpack</strong></h2><h3 id="2-1-认识webpack的作用"><a href="#2-1-认识webpack的作用" class="headerlink" title="2.1 认识webpack的作用"></a><strong>2.1 认识webpack的作用</strong></h3><p>随着前端快速发展，目前前端的开发已经越来越复杂了</p>
<p>​	比如我们开发的时候会使用<strong>模块化</strong>开发</p>
<p>​	也会使用一些高级的ES6+的特性来<strong>加快开发效率或者提升安全性</strong></p>
<p>​	在开发过程中，我们希望<strong>实时监听文件的变化</strong>，并且反应到浏览器上</p>
<p>​	开发完成后，我们在部署代码之前需要<strong>压缩，丑化</strong>……</p>
<p>但是对于很多开发者而言，平常开发的时候并没有关心这些</p>
<p>​	因为目前开发的主流是react&#x2F;vue脚手架来开发，这些脚手架工具屏蔽掉了webpack的过程，提升了开发体验。vue-cli,create-react-app依赖了webpack。</p>
<h3 id="2-2-webpack到底是什么？"><a href="#2-2-webpack到底是什么？" class="headerlink" title="2.2 webpack到底是什么？"></a><strong>2.2 webpack到底是什么？</strong></h3><p>webpack is a <strong>static module bundler</strong> for <strong>modern</strong> JavaScript Applications</p>
<p>静态化模块打包工具</p>
<p>​	<strong>打包bundler</strong>:把代码压缩和丑化</p>
<p>​	<strong>静态static</strong>:可以把最终的打包的代码部署到静态服务器上运行</p>
<p>​	<strong>模块化</strong>:webpack默认支持各种模块化开发 ESModule和CJS</p>
<p>​	现代化：正是因为现在前端开发面临的各种问题，才导致了webpack的产生</p>
<h3 id="2-3-Vue项目加载的文件有哪些-了解，为vue做准备"><a href="#2-3-Vue项目加载的文件有哪些-了解，为vue做准备" class="headerlink" title="2.3 Vue项目加载的文件有哪些(了解，为vue做准备)"></a><strong>2.3 Vue项目加载的文件有哪些(了解，为vue做准备)</strong></h3><p>js的打包，css的处理,资源文件(比如img，字体…),HTML资源,处理vue项目里面的SFC文件—-.vue文件</p>
<h3 id="2-5-webpack使用的前提"><a href="#2-5-webpack使用的前提" class="headerlink" title="2.5 webpack使用的前提"></a><strong>2.5 webpack使用的前提</strong></h3><p>webpack运行是依赖node，所以电脑上必须安装好node。</p>
<p>mac:n管理不同的node版本 </p>
<p>windows:nvm管理不同的node版本</p>
<p>webpack的官方文档: <a href="https://webpack.js.org/">https://webpack.js.org/</a></p>
<p>webpack的中文文档: <a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p>
<h2 id="3-webpack的使用"><a href="#3-webpack的使用" class="headerlink" title="3.webpack的使用"></a>3.<strong>webpack的使用</strong></h2><h3 id="3-1-安装webpack"><a href="#3-1-安装webpack" class="headerlink" title="3.1 安装webpack"></a><strong>3.1 安装webpack</strong></h3><p>会发现需要安装两个东西才能正确查看版本号，使用webpack</p>
<p>webpack, webpack-cli是什么关系</p>
<p>​	执行webpack命令的时候，执行node_modules下的**.bin**下面的webpack；</p>
<p>​	webpack在执行的时候又依赖webpack-cli，所以执行webpack-cli中的代码才是真正利用webpack打包的过程 vue-service-cli</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -g #全局安装</span><br><span class="line">npm install webpack webpack-cli -D #局部安装</span><br></pre></td></tr></table></figure>

<h3 id="3-2-webpack的默认打包"><a href="#3-2-webpack的默认打包" class="headerlink" title="3.2 webpack的默认打包"></a><strong>3.2 webpack的默认打包</strong></h3><p>创建示例代码</p>
<p>src&#x2F;utils&#x2F;math.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>src&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/math&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar函数执行了～～～～～&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<p>然后在终端中打开对应目录，直接输入webpack回车，就会打包。</p>
<p>打包以后会多出来一个dist文件夹，里面放了一个main.js就是丑化压缩以后的代码。</p>
<p>实际上我们运行webpack命令的时候，默认是找src&#x2F;index.js。也可以打包的时候指定<strong>入口(entry)<strong>和</strong>出口(output)</strong> </p>
<p>npx webpack –entry .&#x2F;src&#x2F;haha.js –output-path .&#x2F;build</p>
<p>entry:也就是从那个文件开始构建依赖关系，这个文件就是入口</p>
<p>output:打包后的代码要放到哪里–出口</p>
<h3 id="3-3-使用局部的webpack打包"><a href="#3-3-使用局部的webpack打包" class="headerlink" title="3.3 使用局部的webpack打包"></a><strong>3.3 使用局部的webpack打包</strong></h3><p>第一步：创建package.json，用于管理项目相关的信息，库依赖……</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>第二步:安装局部webpack</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure>


<h3 id="3-4-webpack的配置文件"><a href="#3-4-webpack的配置文件" class="headerlink" title="3.4 webpack的配置文件"></a><strong>3.4 webpack的配置文件</strong></h3><p>老是用命令行的方式去管理一些打包配置不可取，不合理，默认的配置往往满足不了我们实际的打包需求</p>
<p>就在项目根目录下面手动创建一个webpack.config.js的文件,填写一些配置信息</p>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//导出所有配置信息给webpack打包用</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/haha.js&#x27;</span>,</span><br><span class="line">  <span class="comment">//出口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">//打包以后的文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//打包以后的代码输出路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./build&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>因为配置信息都在上述js中，所以package.json中的scripts的命令不再需要配置相关的信息</p>
<p><img src="https://docimg9.docs.qq.com/image/AgAABlP525wPyCS7SmBEvYrPw1UoRG3H.png?w=248&h=85" alt="img"></p>
<h3 id="3-5-指定配置文件"><a href="#3-5-指定配置文件" class="headerlink" title="3.5 指定配置文件"></a><strong>3.5 指定配置文件</strong></h3><p>配置文件默认是找webpack.config.js，我们也可以自定义，如果想使用自定义的配置，只需要修改脚本即可</p>
<p><img src="https://docimg6.docs.qq.com/image/AgAABlP525yUuCnRnjhN77UUF-XJiGoO.png?w=476&h=85" alt="img"></p>
<h2 id="4-编写和打包css文件"><a href="#4-编写和打包css文件" class="headerlink" title="4.编写和打包css文件"></a>4.<strong>编写和打包css文件</strong></h2><h3 id="4-1-案例代码"><a href="#4-1-案例代码" class="headerlink" title="4.1 案例代码"></a><strong>4.1 案例代码</strong></h3><p>src&#x2F;component.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在webpack 万物皆模块,所以css也可以当作模块引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  el.<span class="property">innerHTML</span> = <span class="string">&#x27;hello webpack&#x27;</span>;</span><br><span class="line">  el.<span class="property">className</span> = <span class="string">&#x27;content&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="title function_">component</span>());</span><br></pre></td></tr></table></figure>

<p>src&#x2F;css&#x2F;index.css</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">content</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: 100px;</span><br><span class="line">  <span class="attr">height</span>: 100px;</span><br><span class="line">  background-<span class="attr">color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记得修改打包配置文件,只需要修改入口文件即可</p>
<p>jack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//导出所有配置信息给webpack打包用</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/component.js&#x27;</span>,</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用的包管理工具有哪些?</title>
    <url>/2022/06/06/b35%20%E5%89%8D%E7%AB%AF%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="前端包管理工具"><a href="#前端包管理工具" class="headerlink" title="前端包管理工具"></a><strong>前端包管理工具</strong><span id="more"></span></h1><h2 id="1-npm包管理工具"><a href="#1-npm包管理工具" class="headerlink" title="1.npm包管理工具"></a>1.npm包管理工具</h2><h3 id="1-1-代码共享方案"><a href="#1-1-代码共享方案" class="headerlink" title="1.1 代码共享方案"></a><strong>1.1 代码共享方案</strong></h3><p>要理解包管理工具，就要理解代码共享方案。所谓的包管理工具就是管理依赖包(node_modules) 用的。</p>
<p>在js中我们可以通过模块化将代码划分为一个个小的结构，在以后的开发中我们可以利用模块化来封装自己的代码，并且封装成一个<strong>工具</strong>，这个工具可以让其他人通过导入的方式来使用，甚至你可以分享给世界各地的程序员来使用。</p>
<p>方案一：上传到github,其他程序员通过github下载我们的代码手动的引用</p>
<p>​	缺点要用你代码的人必须知道你的github地址，而且要手动从github上下载</p>
<p>​	需要在项目中手动的引用，而且需要手动管理相关的依赖</p>
<p>​	不需要使用了，手动删除相关的依赖</p>
<p>​	当版本升级或者切换的时候，重复上述操作 —– <strong>可以用</strong></p>
<p>方案二：使用一个<strong>专业的工具</strong>来管理我们的代码</p>
<p>​	我们通过工具把代码发布到特定的位置(npm registry)，其他使用者可以通过工具(npm)来安装，升级，删除我们的工具包 — 更好</p>
<p>具体有哪些包:<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
<h3 id="1-2-包管理工具npm"><a href="#1-2-包管理工具npm" class="headerlink" title="1.2 包管理工具npm"></a><strong>1.2 包管理工具npm</strong></h3><p>早期起名字的时候，因为他最开始出现是用于node，所以叫他Node Package Manager，node包管理器。目前很多前端项目都是用他来管理的</p>
<p><strong>npm的下载：</strong></p>
<p>​	需要先安装node，安装node的过程会自动安装npm</p>
<p><strong>npm有哪些包</strong></p>
<p>​	<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
<p><strong>npm的包放在哪里</strong></p>
<p>​	发布的包是存放在一个特殊的仓库(registry)，当我们安装一个包的时候(npm install xxx)的时候实际上是在从registry上面下载对应的包</p>
<h2 id="2-package配置文件"><a href="#2-package配置文件" class="headerlink" title="2.package配置文件"></a>2.package配置文件</h2><h3 id="2-1-npm的配置文件"><a href="#2-1-npm的配置文件" class="headerlink" title="2.1 npm的配置文件"></a><strong>2.1 npm的配置文件</strong></h3><p>对于一个项目而言，我们使用npm来管理所有的依赖包，除了依赖包之外，我们的项目还有很多信息，名称，版本号，项目描述…,有一个东西来记录这些信息，这个文件叫做**package.json ,**这个配置文件记录项目相关的所有信息</p>
<p>自动生成package.json有两种方式，</p>
<p>方式一:手动从零开始创建新的项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init #创建时填写信息 一步步填 很多信息都是默认的直接回车</span><br><span class="line">npm init -y #所有信息都用默认的</span><br></pre></td></tr></table></figure>

<p>方式二：通过脚手架创建项目，脚手架会帮我们自动生成<strong>package.json</strong></p>
<p>通过vue的脚手架创建项目,vue的记得按一下y</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create &lt;project_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-常用的属性"><a href="#2-2-常用的属性" class="headerlink" title="2.2 常用的属性"></a><strong>2.2 常用的属性</strong></h3><p><strong>必填的属性：name，version</strong></p>
<p><strong>name</strong>是项目的名称</p>
<p><strong>version</strong>是项目的版本号</p>
<p>description描述信息</p>
<p>author作者信息(发布时要用到)</p>
<p>license开源协议(发布时用到)</p>
<p>private记录当前项目是否是私有的，当为true时，无法发布，主要是防止私有项目或者模块或者工具意外的误操作发布出去。</p>
<p>main属性设置程序的入口 </p>
<p><strong>script属性</strong>：用于配置一些脚本命令，以key-value的形式</p>
<p><img src="https://docimg8.docs.qq.com/image/AgAABlP525w_UmChlVFFtb_rmEeaYcUj.png?w=467&h=153" alt="img"></p>
<p>​	某些特殊的命令可以不用npm run start 直接npm start即可 <strong>start test stop restart</strong>都可以省略run</p>
<p><strong>dependencies ：</strong>记录项目不论是开发环境还是生产环境都需要的依赖包以及对应的版本</p>
<p>默认<strong>npm i xxx</strong> 会添加进去</p>
<p>通常是项目实际开发用到的一些库&#x2F;模块 <strong>vue,vuex,vue-router,react,react-dom,axios</strong>….</p>
<p><strong>devDependencies :</strong> 记录项目的开发环境依赖，安装依赖的时候 <strong>npm install xxx –save-dev&#x2F;npm i xxx -D</strong> </p>
<p>​	通常是项目开发时需要的一些库&#x2F;模块 <strong>webpack,babel</strong></p>
<p><strong>开发依赖&#x2F;生产依赖</strong>：</p>
<p><img src="https://docimg6.docs.qq.com/image/AgAABlP525wzvansIbtJybWo0jfrATct.png?w=900&h=424" alt="img"></p>
<h3 id="2-3-依赖的版本管理-了解"><a href="#2-3-依赖的版本管理-了解" class="headerlink" title="2.3 依赖的版本管理(了解)"></a><strong>2.3 依赖的版本管理(了解)</strong></h3><p>我们在package.json中发现依赖后面有版本号，有的是^开头还有的是～</p>
<p>npm的包通常要遵循semver规范:<a href="https://semver.org/lang/zh-CN/">https://semver.org/lang/zh-CN/</a> </p>
<p>semver版本规范 X.Y.Z</p>
<p>​	X是主版本号(major):做了不兼容的API修改(不兼容之前的版本) </p>
<p>​	Y是次版本号(minor):做了兼容的功能新增</p>
<p>​	Z是修订号(patch)：没有新功能，修复以前版本的bug</p>
<h2 id="3-npm-install原理"><a href="#3-npm-install原理" class="headerlink" title="3.npm install原理"></a>3.npm install原理</h2><h3 id="3-1-npm-install-命令"><a href="#3-1-npm-install-命令" class="headerlink" title="3.1 npm install 命令"></a><strong>3.1 npm install 命令</strong></h3><p>安装npm包分两种情况</p>
<p>​	全局安装 npm install webpack -g.往往全局安装的是一些工具包yarn,webpack并不是类似dayjs,axios等库文件，不要认为你全局安装了axios，在任意项目里面都能使用axios</p>
<p>​	局部安装 npm install webpack </p>
<p>全局装一下webpack：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack -g</span><br><span class="line">npm i webpack-cli -g</span><br><span class="line">webpack --version #查看版本号</span><br></pre></td></tr></table></figure>

<h3 id="3-2-项目安装"><a href="#3-2-项目安装" class="headerlink" title="3.2 项目安装"></a><strong>3.2 项目安装</strong></h3><p>安装依赖的时候会在当前目录下生成一个node_modules的文件夹，我们在require查找细节中讲过</p>
<p>项目安装依赖的时候分为开发时的依赖和生产时候的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#默认两个环境都要</span><br><span class="line">npm install axios</span><br><span class="line">npm i axios</span><br><span class="line"># 开发依赖</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack -D</span><br><span class="line">npm i webpack -D</span><br><span class="line"># 根据package.json 自动安装依赖</span><br><span class="line">npm install</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<h3 id="3-3-npm-install-的过程"><a href="#3-3-npm-install-的过程" class="headerlink" title="3.3 npm install 的过程"></a><strong>3.3 npm install 的过程</strong></h3><p>我们会发现一些项目安装的时候会有package-lock.json，他的作用：<strong>锁版本</strong>和<strong>缓存 。</strong>这个package-lock.json在上传到git的时候尽量不要提交他，因为这个文件不同的电脑不同的设备环境生成的都不一致。</p>
<p>过程图:</p>
<p><img src="https://docimg10.docs.qq.com/image/AgAABlP525zRzGoIoF1AUbvuoocM29Ji.png?w=944&h=170" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看自己的npm镜像</span><br><span class="line">npm config get registry</span><br><span class="line"># 设置为官方的镜像</span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>

<h3 id="3-4-npm的其他命令"><a href="#3-4-npm的其他命令" class="headerlink" title="3.4 npm的其他命令"></a><strong>3.4 npm的其他命令</strong></h3><p>卸载某个依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall package_name</span><br><span class="line">npm uninstall package_name -D</span><br><span class="line">npm uninstall package_name -g</span><br><span class="line"># 清除缓存</span><br><span class="line">npm cache clean</span><br></pre></td></tr></table></figure>

<p>npm 命令 <a href="https://docs.npmjs.com/cli/v9/commands/">https://docs.npmjs.com/cli/v9/commands/</a></p>
<h2 id="4-yarn、cnpm、npx"><a href="#4-yarn、cnpm、npx" class="headerlink" title="4.yarn、cnpm、npx"></a>4.yarn、cnpm、npx</h2><h3 id="4-1-yarn"><a href="#4-1-yarn" class="headerlink" title="4.1 yarn"></a><strong>4.1 yarn</strong></h3><p>另一个包管理工具，主要是解决npm的安装依赖速度慢的问题，版本混乱的问题。虽然从npm6开始，有很多升级和改进，但是还是有很多人喜欢用yarn</p>
<p>安装yarn</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure>

<p>yarn的使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 项目内已经有yarn.lock</span><br><span class="line">yarn install</span><br><span class="line"># 使用yarn安装依赖</span><br><span class="line">yarn add package_name -D</span><br><span class="line"># yarn卸载依赖</span><br><span class="line">yarn remove package_name -g </span><br><span class="line"># yarn清除缓存</span><br><span class="line">yarn cache clean</span><br></pre></td></tr></table></figure>

<h3 id="4-2-cnpm"><a href="#4-2-cnpm" class="headerlink" title="4.2 cnpm"></a>4.2 cnpm</h3><p>由于某些特殊原因，某些情况下我们不能直接从npm的官方镜像下载依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看自己的npm镜像</span><br><span class="line">npm config get registry</span><br><span class="line"># 设置为官方的镜像</span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>

<p>方便你有一个非官方的镜像</p>
<p>安装并制定cnpm的镜像为淘宝镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装并设置为淘宝镜像</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"># 查看cnpm的镜像</span><br><span class="line">cnpm config get registry</span><br><span class="line"># 修改cnpm的镜像</span><br><span class="line">cnpm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="4-3-npx工具"><a href="#4-3-npx工具" class="headerlink" title="4.3 npx工具"></a>4.3 npx工具</h3><p>npx是npm5.2之后的自带的一个命令，他的作用非常的多.默认使用当前项目目录下的依赖而不需要<code>./node_modules/.bin/webpack --version</code></p>
<p>更简单的使用 npx webpack –version</p>
<p>npx只会查找当前目录的node_modules&#x2F;.bin 下面的命令 </p>
<h2 id="5-发布自己的包"><a href="#5-发布自己的包" class="headerlink" title="5.发布自己的包**"></a>5.发布自己的包**</h2><p>作业注册npm帐号</p>
<p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
<h2 id="6-pnpm"><a href="#6-pnpm" class="headerlink" title="6.pnpm**"></a>6.pnpm**</h2>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript模块化的概念</title>
    <url>/2022/06/04/b34%20JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="JavaScript模块化"><a href="#JavaScript模块化" class="headerlink" title="JavaScript模块化"></a>JavaScript模块化<span id="more"></span></h1><h2 id="1-认识模块化开发和模块化发展的历史"><a href="#1-认识模块化开发和模块化发展的历史" class="headerlink" title="1.认识模块化开发和模块化发展的历史"></a>1.<strong>认识模块化开发和模块化发展的历史</strong></h2><h3 id="1-1-什么是模块化"><a href="#1-1-什么是模块化" class="headerlink" title="1.1 什么是模块化"></a><strong>1.1 什么是模块化</strong></h3><p>将程序划分成<strong>一个个小的结构，</strong>在对应的结构中编写属于自己的逻辑代码，<strong>有自己的作用域</strong>，定义变量时候不会影响到其他的结构。这个结构里面可以把自己的变量&#x2F;函数给其他结构用，其他结构也可以用变量&#x2F;函数。结构—模块，这种结构划分的开发方式，就叫做模块化开发</p>
<p>以前写的一个个单独的js通过script引入，并不是模块化，只是做到了拆分，并没有自己的作用域，更加没有<strong>导入导出</strong>的功能</p>
<h3 id="1-2-模块化的历史"><a href="#1-2-模块化的历史" class="headerlink" title="1.2 模块化的历史"></a><strong>1.2 模块化的历史</strong></h3><p>早期的网页开发中，js只是用来做表单验证&#x2F;一些动画，代码很少，甚至有的网页js代码就一两行。</p>
<p>但是目前，js代码变得复杂，比如<strong>ajax</strong>的出现，前后端分离，后端返回数据前端需要通过js渲染；<strong>SPA(Single Page Application)<strong>的出现使得前端的代码更加复杂了，包括路由管理，状态的管理；以及</strong>node</strong>的出现，可以用js来编写后端代码，没有模块化是一个硬伤。</p>
<p>JS本身直到es6我们的ECMA Script才有<strong>ES Module，</strong>在此之前社区有很多规范AMD，CMD，CommonJS。</p>
<p>重点掌握<strong>ES Module，Commonjs</strong></p>
<p>早期的方案iife+return</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleRole = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;这是role模块&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">28</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>看似ok了，实际上问题很大</p>
<ol>
<li><p>我必须记住每一个模块中返回的对象命名，才能正确使用</p>
</li>
<li><p>代码写起来混乱不堪，每个模块的代码都得放在一个立即执行函数中</p>
</li>
<li><p>没有合适的规范的情况下，每个人，每个公司的命名都不一致，有时候还是会命名冲突</p>
</li>
</ol>
<p>我们实现的模块化太过简单，而且没有规范，我们就需要一定的规范来约束代码。这个规范需要核心功能如下：<strong>模块本身可以导出需要暴露的属性，方法，模块本身又可以导入其他模块的属性和方法。而且要保证命名不冲突</strong></p>
<h2 id="2-CommonJS和Node"><a href="#2-CommonJS和Node" class="headerlink" title="2.CommonJS和Node"></a>2.CommonJS和Node</h2><h3 id="2-1-CommonJS和Node的关系"><a href="#2-1-CommonJS和Node的关系" class="headerlink" title="2.1 CommonJS和Node的关系"></a><strong>2.1 CommonJS和Node的关系</strong></h3><p>CommonJS是一个规范，最初提出来是在浏览器以外的地方使用的，并且最初的命名是**ServerJS,**后来为了体现他的广泛性改为CommonJS，平常也有一种叫法–CJS</p>
<p>node是CommonJS在服务端一个具有代表性的实现</p>
<p>Browserify是CommonJS在浏览器端的一个实现(现在已经没有使用了)</p>
<p>webpack打包工具具备对CommonJS的支持和转换(webpack里面既可以使用CommonJS也可以使用ES Module)</p>
<p>最主要的两个内容：导出exports关键字，导入require关键字</p>
<p>在node中每个js文件都是一个单独的模块，exports，module.exports,require这三个关键字可以帮助我们进行模块化开发。</p>
<h3 id="2-2-案例"><a href="#2-2-案例" class="headerlink" title="2.2 案例"></a><strong>2.2 案例</strong></h3><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require是一个函数</span></span><br><span class="line"><span class="comment">//接收整个util模块 的所有导出</span></span><br><span class="line"><span class="comment">// const util = require(&#x27;./util.js&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(util); //&#123; username: &#x27;alex&#x27; &#125;</span></span><br><span class="line"><span class="comment">// console.log(util.username); //alex</span></span><br><span class="line"><span class="comment">// util.foo();</span></span><br><span class="line"><span class="comment">// console.log(util.age);</span></span><br><span class="line"><span class="comment">// console.log(util.height);</span></span><br><span class="line"><span class="comment">//解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; username, age, height, foo &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./util.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username, age, height);</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>util.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出给其他模块使用</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">username</span> = username;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">foo</span> = foo;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">height</span> = height;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-exports导出"><a href="#2-3-exports导出" class="headerlink" title="2.3 exports导出"></a>2.3 exports导出</h3><p>exports是一个对象，我们可以在这个对象里面添加多个属性，添加的属性都会导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">username</span> = username;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">foo</span> = foo;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">height</span> = height;</span><br></pre></td></tr></table></figure>

<p>在另一个文件里面可以导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; username, age, height, foo &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./util.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的exports和require完成了什么操作，<strong>引用赋值</strong></p>
<p>main中的util变量和exports对象指向同一个地址</p>
<p><img src="https://docimg4.docs.qq.com/image/AgAABlP525zF0bnLKQ5CC5HHTt5fg6Tn.png?w=636&h=293" alt="img"></p>
<h3 id="2-4-module-exports导出"><a href="#2-4-module-exports导出" class="headerlink" title="2.4 module.exports导出"></a>2.4 module.exports导出</h3><p>在node中往往我们看到的都是写的module.exports,而且开发里面用的多的也是这个</p>
<p><img src="https://docimg6.docs.qq.com/image/AgAABlP525wLKRD2N0NMwIFXqcUz7K3I.png?w=926&h=467" alt="img"></p>
<p>node导出的本质是在<strong>导出module.exports对象</strong> ，为什么exports也能导出？</p>
<p>因为module对象的exports属性是exports对象的一个引用 module.exports &#x3D;&#x3D;&#x3D; exports</p>
<p>uitl.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开发中往往使用的是module.exports</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //导出</span></span><br><span class="line"><span class="comment">// module.exports.username = username;</span></span><br><span class="line"><span class="comment">//实际写法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  username,</span><br><span class="line">  age,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>既然有了module.exports &#x3D; {}导出的写法，exports还弄出来干嘛？在CJS的规范中是没有module.exports这个概念，但是为了实现模块的导出，node中使用的是Module类，每一个模块都是Module类的实例，也就是module,所以node中真正用于导出的根本不是exports而是module.exports，只不过node做了一个操作，默认情况下exports和module.exports相等</p>
<h2 id="3-require的细节"><a href="#3-require的细节" class="headerlink" title="3.require的细节"></a>3.require的细节</h2><p>require是一个函数，可以帮助我们引入一个文件(模块)中导出的内容</p>
<p>require的查找细节，require到底是怎么找到我们的模块，按什么样的规则去找</p>
<p>我们假定都是<code>**require(X)**</code>的导入</p>
<h3 id="3-1-三种情况"><a href="#3-1-三种情况" class="headerlink" title="3.1 三种情况"></a><strong>3.1 三种情况</strong></h3><h4 id="3-1-1-情况一：X是一个Node内置的模块，比如path-路径-，fs-读取文件-，http-请求"><a href="#3-1-1-情况一：X是一个Node内置的模块，比如path-路径-，fs-读取文件-，http-请求" class="headerlink" title="3.1.1 情况一：X是一个Node内置的模块，比如path(路径)，fs(读取文件)，http(请求)"></a><strong>3.1.1 情况一：X是一个Node内置的模块，比如path(路径)，fs(读取文件)，http(请求)</strong></h4><p>直接返回内置模块，并且立即停止查找。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br></pre></td></tr></table></figure>

<h4 id="3-1-2-情况二：X是以-x2F-或者-x2F-或者-x2F-根目录-开头的"><a href="#3-1-2-情况二：X是以-x2F-或者-x2F-或者-x2F-根目录-开头的" class="headerlink" title="3.1.2 情况二：X是以.&#x2F;或者..&#x2F;或者&#x2F;(根目录)开头的"></a><strong>3.1.2 情况二：X是以.&#x2F;或者..&#x2F;或者&#x2F;(根目录)开头的</strong></h4><p> 第一步：将X当作一个文件在对应的目录下查找</p>
<ol>
<li><p>如果有后缀名(.js .html .md)按照后缀名的格式去找对应的文件</p>
</li>
<li><p>如果没有后缀名</p>
</li>
</ol>
<p> a.直接查找文件X</p>
<p> b.查找X.js文件</p>
<p> c.查找X.json文件</p>
<p> d. 查找X.node文件</p>
<p> 第二步：如果第一步都没有找到，将X当作一个目录</p>
<p>默认查找目录下的index文件</p>
<ol>
<li><p>查找X&#x2F;index.js文件</p>
</li>
<li><p>查找X&#x2F;index.json文件</p>
</li>
<li><p>查找X&#x2F;index.node文件</p>
</li>
</ol>
<p> 如果还没有找到，那就会报错:not found</p>
<h4 id="3-1-3-情况三：直接就是一个X，没有路径，没有后缀，并且X不是一个内置模块"><a href="#3-1-3-情况三：直接就是一个X，没有路径，没有后缀，并且X不是一个内置模块" class="headerlink" title="3.1.3 情况三：直接就是一个X，没有路径，没有后缀，并且X不是一个内置模块"></a>3.1.3 情况三：直接就是一个X，没有路径，没有后缀，并且X不是一个内置模块</h4><p>按照对应的路径去查找node_modules里面是否有</p>
<p><img src="https://docimg2.docs.qq.com/image/AgAABlP525xCkkiYf-ROeooPzG5HtlU1.png?w=1094&h=249" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>





<p>利用npm去registry的库里面下载axios到我们的node_modules里面</p>
<ol>
<li><p>为什么后面在webpack，vue里面我们直接 npm install xxx以后能够导入使用</p>
</li>
<li><p>什么时候能够省略后缀，什么时候直接写文件夹名字</p>
</li>
</ol>
<h3 id="3-2-模块的加载过程"><a href="#3-2-模块的加载过程" class="headerlink" title="3.2 模块的加载过程"></a>3.2 模块的加载过程</h3><p><strong>结论一：模块在第一次引入的时候，模块中的js代码会被运行一次</strong></p>
<p><strong>结论二：模块多次引入，会缓存，最终只加载(代码运行)一次</strong></p>
<p>原因：每个模块对象module上面都有一个loaded的属性，为false表明还没有加载，为true表明已经加载过了</p>
<p>结论三：如果模块之间有循环引入，那么加载顺序是什么？(了解) <strong>DFS顺序</strong></p>
<p><img src="https://docimg3.docs.qq.com/image/AgAABlP525x4B3726WpOdZHqLS4L5FtV.png?w=593&h=464" alt="img"></p>
<p>这其实是一种<strong>图结构，</strong>对于图结构的遍历，有深度优先搜索(DFS)和广度优先搜索(BFS),Node采用是深度优先。</p>
<h2 id="4-AMD和CMD"><a href="#4-AMD和CMD" class="headerlink" title="4.AMD和CMD"></a>4.AMD和CMD</h2><h3 id="4-1-CommonJS的缺点"><a href="#4-1-CommonJS的缺点" class="headerlink" title="4.1 CommonJS的缺点"></a>4.1 CommonJS的缺点</h3><p>CommonJS加载模块是同步的：只有等到对应的模块加载完毕，当前模块中的内容才能被运行，后续加载的模块才能开始加载，在服务端没问题，服务器加载js都是加载的本地文件。如果应用到浏览器，那就有问题。所以在浏览器中不使用CJS，注意webpack中使用CJS是另一种情况，webpack会把代码转成浏览器可以直接执行的代码。早期为了可以在浏览器中使用模块化，我们会使用AMD或者CMD(了解)</p>
<h3 id="4-2-AMD规范"><a href="#4-2-AMD规范" class="headerlink" title="4.2 AMD规范"></a>4.2 AMD规范</h3><p>AMD是异步模块定义的缩写，它采用的是异步加载模块。</p>
<p>AMD常用的库是require.js和curl.js</p>
<p>具体实例看压缩包</p>
<p>data-main指定入口文件</p>
<h3 id="4-3-CMD规范"><a href="#4-3-CMD规范" class="headerlink" title="4.3 CMD规范"></a>4.3 CMD规范</h3><p>CMD是通用模块定义的缩写，它也是采用异步加载模块，但是他吸收了CJS的优点</p>
<p>SeaJS库</p>
<p>如果做node开发用CJS，写html页面就用ES </p>
<h2 id="5-ES-Module"><a href="#5-ES-Module" class="headerlink" title="5.ES Module"></a>5.ES Module</h2><p>目前我们都是在node中使用模块化，如果要在浏览器里面使用，有两种办法</p>
<ol>
<li><p>使用ES module，但是在不支持ES module的浏览器上用不了</p>
</li>
<li><p>使用webpack</p>
</li>
</ol>
<h3 id="5-1-认识ES-Module"><a href="#5-1-认识ES-Module" class="headerlink" title="5.1 认识ES Module"></a>5.1 认识ES Module</h3><p>ESModule和CJS的模块化有一些不同</p>
<p>他使用了import导入，export导出</p>
<p>他采用编译期的静态分析，而且也支持动态引用</p>
<p>注意：一旦使用ES Module，将自动开启严格模式</p>
<h3 id="5-2-案例"><a href="#5-2-案例" class="headerlink" title="5.2 案例"></a>5.2 案例</h3><p>第一：记得给script标签加上type&#x3D;’module’</p>
<p>第二：记得以服务器的形式打开html，Live Server</p>
<h3 id="5-3-export导出"><a href="#5-3-export导出" class="headerlink" title="5.3 export导出"></a>5.3 export导出</h3><p>导出方式一：在语句的前面直接加上export关键字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导出方式二:将所有需要导出的标识符，放到export后面的{}里面</p>
<p>注意{}<strong>不是对象！不是对象！不是对象！</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的&#123;&#125;不是对象！不是对象！不是对象！</span></span><br><span class="line"><span class="keyword">export</span> &#123; name, age, bar &#125;;</span><br></pre></td></tr></table></figure>

<p>导出方式三:导出的时候给标识符起一个别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name <span class="keyword">as</span> fname, age, bar &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-import-关键字"><a href="#5-4-import-关键字" class="headerlink" title="5.4 import 关键字"></a><strong>5.4 import 关键字</strong></h3><p>导入方式一：import {标识符列表} from “模块”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在浏览器中使用es module必须加上后缀名</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<p>导入方式二：起别名 通过as关键字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> fname, age, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fname, age);</span><br></pre></td></tr></table></figure>

<p>导入方式三：导入的时候给整个模块起一个别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>, foo.<span class="property">age</span>);</span><br><span class="line">foo.<span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<p>用的多的方式</p>
<p>导出：export {标识符列表}，声明时直接导出</p>
<p>导入：import {需要的标识符}，起别名</p>
<h3 id="5-5-export和import结合使用-了解"><a href="#5-5-export和import结合使用-了解" class="headerlink" title="5.5 export和import结合使用(了解)"></a><strong>5.5 export和import结合使用(了解)</strong></h3><p>具体见代码02_js模块化&#x2F;06_export和import结合使用</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js浅尝</title>
    <url>/2022/05/30/b33%20%E5%88%9D%E8%AF%86node.js/</url>
    <content><![CDATA[<h1 id="初识-Node-js"><a href="#初识-Node-js" class="headerlink" title="初识 Node.js"></a>初识 Node.js<span id="more"></span></h1><h2 id="1-Node-js-是什么"><a href="#1-Node-js-是什么" class="headerlink" title="1.Node.js 是什么"></a>1.Node.js 是什么</h2><p>Node.js is an open-source, cross-platform JavaScript runtime environment.<br>Node 是一个开源的，跨平台的 js 运行环境</p>
<h2 id="2-Node-js-的应用场景"><a href="#2-Node-js-的应用场景" class="headerlink" title="2.Node.js 的应用场景"></a>2.Node.js 的应用场景</h2><p>应用一：目前前端开发的库都是以 node 包的形式进行管理<br>应用二：npm,yarn,pnpm 都是前端开发使用的很高频率的工具<br>应用三:越来越多的公司使用 node 作为 web 服务器，中间件，代理服务器<br>应用四:大量的项目需要用 node 完成前后端渲染的代码同构<br>应用五：为项目编写一些脚本工具 js<br>应用六：开发一些桌面端的应用 electron(竞品 Tauri)</p>
<h2 id="3-Node-的安装和管理"><a href="#3-Node-的安装和管理" class="headerlink" title="3. Node 的安装和管理"></a>3. Node 的安装和管理</h2><p>官网:<a href="https://nodejs.org/en">https://nodejs.org/en</a></p>
<p>LTS:长期稳定版<br>Current:最新的包含所有最新的特性</p>
<p>学习实验选 current，实际项目开发稳定版</p>
<p>windows 选择后缀为<code>.msi</code>的安装包<br>mac 选择后缀为<code>.pkg</code>的安装包</p>
<p>如果希望多个 node 版本共存，就需要一个工具来管理 node 版本<br>nvm:Node Version Manager node 版本管理器(github)<br>n:交互式的管理你的 node 版本(mac)</p>
<p>windows:<br>nvm install latest 安装 node 最新的版本<br>nvm list 列出所有版本<br>nvm use 切换版本</p>
<p>mac:<br><code>npm install -g n</code><br>n lts 查看所有版本<br>n</p>
<h2 id="4-js-代码的执行"><a href="#4-js-代码的执行" class="headerlink" title="4. js 代码的执行"></a>4. js 代码的执行</h2><ol>
<li>放到 html 里面通过 script 标签</li>
<li>交给 node 来执行<code>node 文件名</code><br>windows 终端清屏：<code>cls</code><br>mac：<code>command+k</code></li>
</ol>
<h2 id="5-Node-的输入和输出"><a href="#5-Node-的输入和输出" class="headerlink" title="5. Node 的输入和输出"></a>5. Node 的输入和输出</h2><ol>
<li><p>Node 的 REPL<br>Read-Eval-Print-Loop 读取-求值-输出-循环，就是一个最简单的交互式编程环境<br>浏览器的 console 就是<br>进入<code>node</code><br>退出<code>.exit</code> &#x2F; <code>ctrl +c</code></p>
</li>
<li><p>给 node 传递参数<br>传递环境变量 dev&#x2F;prod&#x2F;test<br><code>node index.js env=development</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(process.argv);</span></span><br><span class="line">process.<span class="property">argv</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">argv</span>[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>输出 console.log console.clear()<br>console.trace() 打印函数调用栈</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&#x27;bar的调用栈&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<h2 id="6-Node-的全局对象"><a href="#6-Node-的全局对象" class="headerlink" title="6. Node 的全局对象"></a>6. Node 的全局对象</h2><p><a href="https://nodejs.org/dist/latest-v18.x/docs/api/globals.html">https://nodejs.org/dist/latest-v18.x/docs/api/globals.html</a></p>
<h3 id="6-1-global-对象"><a href="#6-1-global-对象" class="headerlink" title="6.1 global 对象"></a>6.1 global 对象</h3><p>相当于 node 里面的 window 对象<br>node 中 var 声明的变量不会挂载到 global 上，window 里面会<br>而且 es 新标准 推出了一个变量统一 window 和 global — <strong>globalThis</strong></p>
<h3 id="6-2-process-对象"><a href="#6-2-process-对象" class="headerlink" title="6.2 process 对象"></a>6.2 process 对象</h3><p>获取当前 node 进程中的一些信息比如 运行环境，参数</p>
<p>定时器函数…</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1123</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(2222);</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"><span class="comment">//立即定时器</span></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//异步任务队列，放到下一次tick中</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4444</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-3-特殊的全局对象"><a href="#6-3-特殊的全局对象" class="headerlink" title="6.3 特殊的全局对象"></a>6.3 特殊的全局对象</h3><p>在 node 中每个 js 文件，看作一个模块，这些对象是每个模块都有的所以是特殊的全局对象<code>__dirname</code>,<code>__filename</code>,<code>exports</code>,<code>module</code>,<code>require()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前文件所在路径，不包括后面的文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dir&#x27;</span>, __dirname);</span><br><span class="line"><span class="comment">//获取当前文件所在路径，包括后面的文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;file&#x27;</span>, __filename);</span><br><span class="line"><span class="comment">//当前的模块信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前模块暴露的标识符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exports&#x27;</span>, <span class="built_in">exports</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入的函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记26-节流与防抖函数</title>
    <url>/2022/05/21/b32%20%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流 "></a>防抖与节流 <span id="more"></span></h1><h2 id="防抖的使用场景"><a href="#防抖的使用场景" class="headerlink" title="防抖的使用场景"></a>防抖的使用场景</h2><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p>
<p>给按钮添加一个防抖函数&#x3D;&gt;点击n次，事件处理只触发一次，前面n-1次都是无效点击</p>
<p>防抖函数不会影响事件处理函数任何的内容，他是一个独立的内容</p>
<p>需要注意处理事件的对象和this的指向</p>
<h3 id="一个经典的防抖函数"><a href="#一个经典的防抖函数" class="headerlink" title="一个经典的防抖函数"></a>一个经典的防抖函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">debounce</span>(handler));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 生成一个不会销毁的变量,因为闭包的关系，如果第二次调用这个函数，timer等于上一次调用的值，而不会初始化为null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 上一次的定时器还存在时，就会被清除</span></span><br><span class="line">          <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 又开了一个定时器，但是时间没走完，里面的函数不会生效</span></span><br><span class="line">          timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 要解决this的指向问题，return的函数会指向触发的对象，apply方法的第二个方法是传参数，apply后则会立即调用本函数</span></span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">          &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">		<span class="comment">//事件触发时执行的函数</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="节流的使用场景"><a href="#节流的使用场景" class="headerlink" title="节流的使用场景"></a>节流的使用场景</h2><p>节流函数：在单位时间内触发若干次</p>
<p>减少高频事件的触发</p>
<p>和防抖的区别，防抖是覆盖，节流是减少事件的触发</p>
<h3 id="一个经典的节流函数"><a href="#一个经典的节流函数" class="headerlink" title="一个经典的节流函数"></a>一个经典的节流函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">throttle</span>(handler));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">            <span class="comment">// 一面之内触发第二次，此时的temp为true，则会return</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">              temp = <span class="literal">false</span>;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高阶的一些八股文</title>
    <url>/2022/05/21/webpack%E5%85%AB%E8%82%A1%E6%96%87/</url>
    <content><![CDATA[<h2 id="1-说说-Node-是什么？和浏览器有什么区别和关系"><a href="#1-说说-Node-是什么？和浏览器有什么区别和关系" class="headerlink" title="1. 说说 Node 是什么？和浏览器有什么区别和关系"></a>1. 说说 Node 是什么？和浏览器有什么区别和关系<span id="more"></span></h2><ul>
<li><p>Node.js 是一个基于 V8 JavaScript 引擎的 JavaScript 运行时环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V8可以嵌入到任何C ++应用程序中，无论是Chrome还是Node.js，事实上都是嵌入了V8引擎来执行JavaScript代码；</span><br><span class="line">但是在Chrome浏览器中，还需要解析、渲染HTML、CSS等相关渲染引擎，另外还需要提供支持浏览器操作的API、浏览器自己的事件循环等</span><br><span class="line">在Node.js中我们也需要进行一些额外的操作，比如文件系统读/写、网络IO、加密、压缩解压文件等操作</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中，全局变量都是在 window 上的，比如有 document、setInterval、setTimeout、alert、console 等等</p>
<ul>
<li>在浏览器中执行的 JavaScript 代码，如果我们在顶级范围内通过 var 定义的一个属性，默认会被添加到 window 对象上</li>
</ul>
</li>
<li><p>在 Node 中，我们也有一个 global 属性，并且看起来它里面有很多其他对象</p>
<ul>
<li>在 node 中，我们通过 var 定义一个变量，它只是在当前模块中有一个变量，不会放到全局中</li>
</ul>
</li>
</ul>
<h2 id="2-说说你对模块化开发的理解"><a href="#2-说说你对模块化开发的理解" class="headerlink" title="2. 说说你对模块化开发的理解"></a>2. 说说你对模块化开发的理解</h2><ul>
<li><p>模块化开发最终的目的是将程序划分成一个个小的结构(模块)</p>
</li>
<li><p>这个结构中编写属于自己的逻辑代码，有自己的作用域，定义变量名词时不会影响到其他的结构</p>
</li>
<li><p>可导出变量,函数,对象等给其他模块用</p>
</li>
<li><p>也可导入其他模块中的变量,函数,对象</p>
</li>
<li><p>按照这种结构划分开发程序的过程，就是模块化开发的过程</p>
</li>
<li><p>早期是没有模块化, 带来一些问题</p>
<ul>
<li>命名冲突 -&gt; 立即执行函数 -&gt; 自定义模块 -&gt; 没有规范</li>
<li>社区中模块化规范: CommonJS&#x2F;AMD&#x2F;CMD</li>
<li>ES6 中推出模块化: ES Module</li>
</ul>
</li>
</ul>
<h2 id="3-整理-ES-Module-模块化的规则和原理-3-种导入导出的方式"><a href="#3-整理-ES-Module-模块化的规则和原理-3-种导入导出的方式" class="headerlink" title="3. 整理 ES Module 模块化的规则和原理(3 种导入导出的方式)"></a>3. 整理 ES Module 模块化的规则和原理(3 种导入导出的方式)</h2><h3 id="1-导入和导出的三种方式"><a href="#1-导入和导出的三种方式" class="headerlink" title="1. 导入和导出的三种方式"></a>1. 导入和导出的三种方式</h3><ul>
<li><p>导出的方式</p>
<ul>
<li><p>在语句声明的前面直接加上 export 关键字</p>
</li>
<li><p>将所有需要导出的标识符，放到 export 后面的 {}中</p>
<ul>
<li>这里的 {}里面不是 ES6 的对象字面量的增强写法，{}也不是表示一个对象的；</li>
<li>export {name: name}，是错误的写法；</li>
</ul>
</li>
<li><p>导出时给标识符起一个别名</p>
<ul>
<li>通过 as 取别名</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出方式一:在语句什么的前面加上export</span></span><br><span class="line"><span class="comment">// export const name = &quot;张三&quot;</span></span><br><span class="line"><span class="comment">// export const age = 89</span></span><br><span class="line"><span class="comment">// export function bar() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;bar--&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">89</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar--&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出方式二:将所有需要导出的标识符,放到export后面&#123;&#125;</span></span><br><span class="line"><span class="comment">// export &#123;</span></span><br><span class="line"><span class="comment">//   name,</span></span><br><span class="line"><span class="comment">//   age,</span></span><br><span class="line"><span class="comment">//   bar</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//导出方式三: 导出时给标识符起别名</span></span><br><span class="line"><span class="keyword">export</span> &#123; name <span class="keyword">as</span> newName, age, bar <span class="keyword">as</span> fn &#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>导入 <code>从另外一个模块中导入内容</code></p>
</li>
<li><p>导入的方式</p>
<ul>
<li>import {标识符列表} from ‘模块’<ul>
<li>注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容</li>
</ul>
</li>
<li>导入时给标识符起别名<ul>
<li>通过 as 关键字起别名</li>
</ul>
</li>
<li>通过 * 将模块功能放到一个模块功能对象（a module object）上</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入,必须在顶层,必须加后缀名js</span></span><br><span class="line"><span class="comment">//导入方式一</span></span><br><span class="line"><span class="comment">// import &#123; name, age, bar &#125; from &quot;./foo.js&quot;</span></span><br><span class="line"><span class="comment">//导入方式二 :导入时给标识符取别名</span></span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> newName, age <span class="keyword">as</span> newAge, bar <span class="keyword">as</span> fn &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="comment">//导入方式三: 通过*将模块功能放到一个模块功能对象上</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="comment">// console.log(newName, newAge, fn)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">age</span>);</span><br><span class="line">foo.<span class="title function_">bar</span>();</span><br><span class="line"><span class="comment">// console.log(name, age)</span></span><br><span class="line"><span class="comment">// bar()</span></span><br></pre></td></tr></table></figure>

<h3 id="2-默认导出-x2F-导入"><a href="#2-默认导出-x2F-导入" class="headerlink" title="2. 默认导出&#x2F;导入"></a>2. 默认导出&#x2F;导入</h3><ul>
<li><p>默认导出 export 时可以不需要指定名字</p>
</li>
<li><p>在导入时不需要使用 {}，并且可以自己来指定名字</p>
</li>
<li><p>在一个模块中，只能有一个默认导出（default export）</p>
</li>
<li><p>默认导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar--&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认导出,不需要指定名字,方式一</span></span><br><span class="line"><span class="comment">// export default bar</span></span><br><span class="line"><span class="comment">// 默认导出 方式二:定义标识符直接作为默认导出</span></span><br><span class="line"><span class="comment">// 注意:一个模块只能有一个默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;baz---&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入不用&#123;&#125;,可以自己指定名字</span></span><br><span class="line"><span class="comment">// import bar from &quot;./foo.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> baz <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="comment">// console.log(bar)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-export-和-import-结合"><a href="#3-export-和-import-结合" class="headerlink" title="3. export 和 import 结合"></a>3. export 和 import 结合</h3><p>why 这样做?</p>
<ul>
<li><p>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</p>
</li>
<li><p>这样方便指定统一的接口规范，也方便阅读；</p>
</li>
<li><p>这个时候，我们就可以使用 export 和 import 结合使用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"><span class="comment">// 先导入再导出</span></span><br><span class="line"><span class="comment">// import &#123; formatData &#125; from &quot;./format.js&quot;</span></span><br><span class="line"><span class="comment">// import &#123; sayhello &#125; from &quot;./foo.js&quot;</span></span><br><span class="line"><span class="comment">// export &#123; formatData, parseLyric &#125;</span></span><br><span class="line"><span class="comment">//优化一</span></span><br><span class="line"><span class="comment">// export &#123; formatData &#125; from &quot;./format.js&quot;</span></span><br><span class="line"><span class="comment">// export &#123; sayhello &#125; from &quot;./foo.js&quot;</span></span><br><span class="line"><span class="comment">// 优化二</span></span><br><span class="line"><span class="comment">// 导入format中的所有,导出所有</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./format.js&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-import-函数"><a href="#4-import-函数" class="headerlink" title="4. import 函数"></a>4. import 函数</h3><ul>
<li><p>通过 import 加载一个模块，是不可以在其放到逻辑代码中的</p>
</li>
<li><p>使用 import() 函数来动态加载</p>
<ul>
<li>import 函数返回一个 Promise，可以通过 then 获取结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入,必须在顶层,必须加后缀名js</span></span><br><span class="line"><span class="comment">// import &#123; name, age, bar &#125; from &quot;./foo.js&quot;</span></span><br><span class="line"><span class="comment">// 1.通过import加载一个模块,是不可以放在逻辑代码中</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="comment">// import &#123; name, age, bar &#125; from &quot;./foo.js&quot;</span></span><br><span class="line">  <span class="comment">//2.使用import函数来动态加载,返回promise</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./foo.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">name</span>, res.<span class="property">age</span>, res.<span class="property">bar</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你猜不猜&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-ESModule-原理"><a href="#5-ESModule-原理" class="headerlink" title="5. ESModule 原理"></a>5. ESModule 原理</h3><ul>
<li>ES Module 的解析过程可以划分为三个阶段：<ul>
<li>阶段一：构建（Construction），根据地址查找 js 文件，并且下载，将其解析成模块记录（Module Record）；</li>
<li>阶段二：实例化（Instantiation），对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址。</li>
<li>阶段三：运行（Evaluation），运行代码，计算值，并且将值填充到内存地址中；</li>
</ul>
</li>
</ul>
<h2 id="4-整理-npm、yarn-常用的命令以及作用"><a href="#4-整理-npm、yarn-常用的命令以及作用" class="headerlink" title="4. 整理 npm、yarn 常用的命令以及作用"></a>4. 整理 npm、yarn 常用的命令以及作用</h2><table>
<thead>
<tr>
<th align="left">npm</th>
<th>yarn</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">npm install</td>
<td>yarn install</td>
<td>根据 package.json 中的依赖包安装</td>
</tr>
<tr>
<td align="left">npm install [package]</td>
<td>yarn add [package]</td>
<td>默认安装开发和生产依赖</td>
</tr>
<tr>
<td align="left">npm install –save [package]</td>
<td>yarn add [package]</td>
<td>默认安装开发和生产依赖</td>
</tr>
<tr>
<td align="left">npm install –save-dev [package]</td>
<td>yarn add [package][–dev&#x2F;-D]</td>
<td>安装开发依赖</td>
</tr>
<tr>
<td align="left">npm rebuild</td>
<td>yarn install –force</td>
<td>强制重新 build</td>
</tr>
<tr>
<td align="left">npm uninstall [package]</td>
<td>yarn remove [package]</td>
<td>卸载某个依赖包</td>
</tr>
<tr>
<td align="left">npm cache clean</td>
<td>yarn cache clean</td>
<td>清除缓存</td>
</tr>
<tr>
<td align="left">npm update [package]</td>
<td>yarn upgrade</td>
<td>更新指定包</td>
</tr>
</tbody></table>
<h2 id="5-说出-npm-install-的安装过程"><a href="#5-说出-npm-install-的安装过程" class="headerlink" title="5. 说出 npm install 的安装过程"></a>5. 说出 npm install 的安装过程</h2><p>npm install 会检测是有 package-lock.json 文件：</p>
<ul>
<li><p>没有 lock 文件</p>
<ul>
<li>分析依赖关系，这是因为我们可能包会依赖其他的包，并且多个包之间会产生相同依赖的情况；</li>
<li>从 registry 仓库中下载压缩包（如果我们设置了镜像，那么会从镜像服务器下载压缩包）；</li>
<li>获取到压缩包后会对压缩包进行缓存（从 npm5 开始有的）；</li>
<li>将压缩包解压到项目的 node_modules 文件夹中（前面我们讲过，require 的查找顺序会在该包下面查找）</li>
</ul>
</li>
<li><p>有 lock 文件</p>
<ul>
<li>检测 lock 中包的版本是否和 package.json 中一致（会按照 semver 版本规范检测）</li>
<li>不一致，那么会重新构建依赖关系，直接会走顶层的流程</li>
<li>一致的情况下，会去优先查找缓存<ul>
<li>没有找到，会从 registry 仓库下载，直接走顶层流程</li>
<li>查找到，会获取缓存中的压缩文件，并且将压缩文件解压到 node_modules 文件夹中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6-总结-package-json-中常见字段的作用"><a href="#6-总结-package-json-中常见字段的作用" class="headerlink" title="6. 总结 package.json 中常见字段的作用"></a>6. 总结 package.json 中常见字段的作用</h2><ul>
<li><p>必须填写的属性：name、version</p>
<ul>
<li>name 是项目的名称；</li>
<li>version 是当前项目的版本号；</li>
<li>description 是描述信息，很多时候是作为项目的基本描述；</li>
<li>author 是作者相关信息（发布时用到）；</li>
<li>license 是开源协议（发布时用到）；</li>
</ul>
</li>
<li><p>private 属性：</p>
<ul>
<li><p>private 属性记录当前的项目是否是私有的；</p>
</li>
<li><p>当值为 true 时，npm 是不能发布它的，这是防止私有项目或模块发布出去的方式；</p>
</li>
</ul>
</li>
<li><p>main 属性：</p>
<ul>
<li>设置程序的入口。</li>
</ul>
</li>
<li><p>scripts 属性</p>
<ul>
<li>scripts 属性用于配置一些脚本命令，以键值对的形式存在；</li>
<li>配置后我们可以通过 npm run 命令的 key 来执行这个命令；</li>
<li>npm start 和 npm run start 的区别是什么？</li>
<li>它们是等价的；</li>
<li>对于常用的 start、 test、stop、restart 可以省略掉 run 直接通过 npm start 等方式运行；</li>
</ul>
</li>
<li><p>dependencies 属性</p>
</li>
<li><p>dependencies 属性是指定无论开发环境还是生成环境都需要依赖的包</p>
</li>
<li><p>我们项目实际开发用到的一些库模块 vue、vuex、vue-router、react、react-dom、axios 等等</p>
</li>
<li><p>devDependencies 属性</p>
<ul>
<li>一些包在生成环境是不需要的，比如 webpack、babel 等</li>
<li>这个时候我们会通过 npm install webpack –save-dev，将它安装到 devDependencies 属性中</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>^和~的区别</strong></p>
</li>
<li><p>x.y.z 是一个明确的版本号</p>
</li>
<li><p>^x.y.z 表明 x 是不变的 y 和安装最新的版本</p>
</li>
<li><p>~x.y.z 表示 x,y 不变 z 安装最新的版本</p>
</li>
<li><p>X 主版本号(major) 做了不兼容的 API 修改(可能不兼容之前的版本)</p>
</li>
<li><p>Y: 次版本号(minor) 新功能增加 但是兼容之前的版本</p>
</li>
<li><p>Z 修订号(patch) 做了向下兼容的修正 修复了之前的 bug 没有产生新功能</p>
</li>
</ul>
<h2 id="7-说说-npx-命令的作用"><a href="#7-说说-npx-命令的作用" class="headerlink" title="7. 说说 npx 命令的作用"></a>7. 说说 npx 命令的作用</h2><ul>
<li>npx 会到当前目录的 node_modules&#x2F;.bin 目录下查找对应的命令</li>
<li>如果想要局部的 webpack ,可以通过使用 npx</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack --version</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-说说-pnpm-的优化原理和用法"><a href="#8-说说-pnpm-的优化原理和用法" class="headerlink" title="8. 说说 pnpm 的优化原理和用法"></a>8. 说说 pnpm 的优化原理和用法</h2><ul>
<li>当使用 npm 或 Yarn 时，如果你有 100 个项目，并且所有项目都有一个相同的依赖包，那么， 你在硬盘上就需要保存 100 份该相同依赖包的副本</li>
<li>为了解决上面的问题,就出现了 pnpm,使用 pnpm,依赖包将被存放在一个统一的位置<ul>
<li>当安装软件包时， 其包含的所有文件都会硬链接到此位置，而不会占用 额外的硬盘空间</li>
<li>这让你可以在项目之间方便地共享相同版本的 依赖包</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>npm 命令</th>
<th>pnpm 等价命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>npm install</td>
<td>pnpm install</td>
<td>安装 package.json 中的依赖包</td>
</tr>
<tr>
<td>npm install <pcg></td>
<td>pnpm add <pcg></td>
<td>默认安装开发和生产依赖</td>
</tr>
<tr>
<td>npm uninstall <pcg></td>
<td>pnpm remove <pcg></td>
<td>卸载某个依赖包</td>
</tr>
<tr>
<td>npm run <cmd></td>
<td>pnpm <cmd></td>
<td>运行某个脚本</td>
</tr>
</tbody></table>
<h2 id="9-什么是-webpack，说说你对-webpack-的理解"><a href="#9-什么是-webpack，说说你对-webpack-的理解" class="headerlink" title="9. 什么是 webpack，说说你对 webpack 的理解"></a>9. 什么是 webpack，说说你对 webpack 的理解</h2><ul>
<li><p>webpack 是一个静态的模块化打包工具，为现代的 JavaScript 应用程序；</p>
</li>
<li><p>如下解释</p>
<ul>
<li>打包 bundler：webpack 可以将帮助我们进行打包，所以它是一个打包工具</li>
<li>静态的 static：这样表述的原因是我们最终可以将代码打包成最终的静态资源（部署到静态服务器）</li>
<li>模块化 module：webpack 默认支持各种模块化开发，ES Module、CommonJS、AMD 等</li>
<li>现代的 modern：正是因为现代前端开发面临各种各样的问题，才催生了 webpack 的出现和发展</li>
</ul>
</li>
</ul>
<h2 id="10-什么是-loader？webpack-的-loader-是什么作用？和-Plugin-有什么区别？"><a href="#10-什么是-loader？webpack-的-loader-是什么作用？和-Plugin-有什么区别？" class="headerlink" title="10. 什么是 loader？webpack 的 loader 是什么作用？和 Plugin 有什么区别？"></a>10. 什么是 loader？webpack 的 loader 是什么作用？和 Plugin 有什么区别？</h2><ul>
<li><p>loader 用来对模块的源代码进行转换,加载文件</p>
<ul>
<li><p>比如因为 webpack 不知道怎么样去加载 css 文件,所以我们需要用 css-loader 来加载 css 文件</p>
</li>
<li><p>主要通过配置方式来使用 loader 来加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 告诉webpack匹配以.css结尾的文件</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// use: [</span></span><br><span class="line">      <span class="comment">//   // 注意顺序,从下往上执行</span></span><br><span class="line">      <span class="comment">//   &#123; loader: &quot;style-loader&quot; &#125;,</span></span><br><span class="line">      <span class="comment">//   &#123; loader: &quot;css-loader&quot; &#125;</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">      <span class="comment">//简写一: 如果loader只有一个</span></span><br><span class="line">      <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line">      <span class="comment">//简写二: 多个loader不需要其他属性时,可以直接写loader字符串形式</span></span><br><span class="line">      <span class="comment">// 配置方式一</span></span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">      <span class="comment">// 配置方式二</span></span><br><span class="line">      <span class="comment">// use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &#123;</span></span><br><span class="line">      <span class="comment">//   loader: &quot;postcss-loader&quot;,</span></span><br><span class="line">      <span class="comment">//   options: &#123;</span></span><br><span class="line">      <span class="comment">//     postcssOptions: &#123;</span></span><br><span class="line">      <span class="comment">//       plugins: [</span></span><br><span class="line">      <span class="comment">//         &quot;autoprefixer&quot;</span></span><br><span class="line">      <span class="comment">//       ]</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 告诉webpack匹配以.css结尾的文件</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      <span class="comment">// use: [</span></span><br><span class="line">      <span class="comment">//   // 注意顺序,从下往上执行</span></span><br><span class="line">      <span class="comment">//   &#123; loader: &quot;style-loader&quot; &#125;,</span></span><br><span class="line">      <span class="comment">//   &#123; loader: &quot;css-loader&quot; &#125;,</span></span><br><span class="line">      <span class="comment">//   &#123; loader: &quot;less-loader&quot; &#125;,</span></span><br><span class="line">      <span class="comment">//   &#123; loader: &quot;postcss-loader&quot; &#125;</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">      <span class="comment">// 简写</span></span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>loader 和 plugin 的区别<ul>
<li>loader 是用于特定的模块类型(css,vue…)进行解析加载</li>
<li>plugin 是用于执行更多广泛的任务,比如打包优化,资源管理,环境变量注入等<ul>
<li>常见的插件<ul>
<li>CleanWebpackPlugin <strong>每次修改了一些配置，重新打包时，帮助我们删除 dist 文件夹</strong></li>
<li>HtmlWebpackPlugin <strong>对 index.html 进行打包处理,自动在 dist 文件夹中，生成了一个 index.html 的文件</strong></li>
<li>DefinePlugin <strong>允许在编译时创建配置的全局常量，是一个 webpack 内置的插件（不需要单独安装）</strong><ul>
<li>比如 BASE_URL <strong>基础路径</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="11-什么是-babel？babel-在开发中是什么作用？"><a href="#11-什么是-babel？babel-在开发中是什么作用？" class="headerlink" title="11. 什么是 babel？babel 在开发中是什么作用？"></a>11. 什么是 babel？babel 在开发中是什么作用？</h2><p>转码器</p>
<ul>
<li>Babel 是一个工具链，主要用于旧浏览器或者环境中将 ECMAScript 2015+代码转换为向后兼容版本的 JavaScript (ES6 以上的代码转成 ES5 代码)</li>
<li>作用: 语法转换,源代码转换,箭头函数转换 ,ES6 以上的代码转成 ES5 代码</li>
</ul>
<h2 id="12-webpack-的开发模式和生产模式有什么区别？"><a href="#12-webpack-的开发模式和生产模式有什么区别？" class="headerlink" title="12. webpack 的开发模式和生产模式有什么区别？"></a>12. webpack 的开发模式和生产模式有什么区别？</h2><ul>
<li>Mode: development 开发模式<ul>
<li>会将 process.env.NODE_ENV 的值设置为 development</li>
</ul>
</li>
<li>Mode: production 生产模式<ul>
<li>会将 process.env.NODE_ENV 的值设置为 production</li>
</ul>
</li>
</ul>
<h2 id="13-webpack-如何开启本地服务器，并且提高页面的更新效率（HMR）？"><a href="#13-webpack-如何开启本地服务器，并且提高页面的更新效率（HMR）？" class="headerlink" title="13. webpack 如何开启本地服务器，并且提高页面的更新效率（HMR）？"></a>13. webpack 如何开启本地服务器，并且提高页面的更新效率（HMR）？</h2><ul>
<li><p>如何开启本地服务器?</p>
<ul>
<li><p>安装 webpack-dev-server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件,启动时加上 serve</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;serve&quot;: &quot;webpack serve --config jack.config.js&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令 : npm run serve</p>
</li>
</ul>
</li>
<li><p>HMR <strong>模块热替换</strong></p>
<ul>
<li><p>模块热替换是指在 应用程序运行过程中，替换、添加、删除模块，而<strong>无需重新刷新整个页面</strong></p>
</li>
<li><p>如何使用 HMR</p>
<ul>
<li>默认情况下，webpack-dev-server 已经支持 HMR，我们只需要开启即可（默认已经开启）；</li>
<li>在不开启 HMR 的情况下，当我们修改了源代码之后，整个页面会自动刷新，使用的是 live reloading；</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高阶的一些八股文</title>
    <url>/2022/05/21/js%E9%AB%98%E9%98%B6%E5%85%AB%E8%82%A1%E6%96%87/</url>
    <content><![CDATA[<h2 id="1-this-的绑定规则"><a href="#1-this-的绑定规则" class="headerlink" title="1. this 的绑定规则"></a>1. this 的绑定规则<span id="more"></span></h2><ul>
<li><p>默认绑定：独立函数调用，函数没有被绑定到某个对象上进行调用—指向window</p>
</li>
<li><p>隐式绑定：通过某个对象发起的函数调用，在调用对象内部有一个对函数的引用。—指向调用的上一级对象,留意箭头函数</p>
</li>
<li><p>显式绑定：明确 this 指向的对象，第一个参数相同并要求传入一个对象。</p>
<ul>
<li>apply&#x2F;call—call传入的是单个变量,apply传入的是一个数组</li>
<li>bind—不会立即执行调用bind的函数</li>
</ul>
</li>
<li><p>new 绑定：</p>
<ul>
<li>创建一个全新对象</li>
<li>新对象被执行 prototype 链接</li>
<li>新对象绑定到函数调用的 this</li>
<li>如果函数没有返回其他对象，表达式会返回这个对象</li>
</ul>
</li>
</ul>
<h2 id="2-说出-apply、call、bind-函数的用法和区别"><a href="#2-说出-apply、call、bind-函数的用法和区别" class="headerlink" title="2. 说出 apply、call、bind 函数的用法和区别"></a>2. 说出 apply、call、bind 函数的用法和区别</h2><p> 用法：</p>
<ul>
<li><p>apply</p>
<p>第一个参数: 绑定 this</p>
<p>第二个参数: 传入额外的实参, 以数组的形式</p>
</li>
<li><p>call</p>
<p>第一个参数: 绑定 this</p>
<p>参数列表: 后续的参数以多参数的形式传递, 会作为实参</p>
</li>
<li><p>bind(不希望 obj 对象身上有函数)</p>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj)</span><br><span class="line">​    <span class="title function_">bar</span>() <span class="comment">// this -&gt; obj</span></span><br></pre></td></tr></table></figure>

<p>  区别：</p>
<ul>
<li><p>call、apply 和 bind 都可以改变函数的 this 指向</p>
</li>
<li><p>call、apply 和 bind 第一个参数的是 this 要指向的对象</p>
</li>
<li><p>call、apply 和 bind 都可以后续为函数传参，apply 是将参数并成一个数组，call 和 bind 是将参数依次列出</p>
</li>
<li><p>call、apply 都是直接调用，bind 生成的 this 指向改变函数需要手动调用。</p>
</li>
</ul>
<h2 id="3-说出箭头函数的各种用法和简写"><a href="#3-说出箭头函数的各种用法和简写" class="headerlink" title="3. 说出箭头函数的各种用法和简写"></a>3. 说出箭头函数的各种用法和简写</h2><ul>
<li><p>基本写法</p>
<ul>
<li><p>()：函数的参数</p>
</li>
<li><p>{}:函数的执行体</p>
</li>
<li><pre><code class="js">var foo3 = (name, age) =&gt; &#123;
  console.log(&#39;箭头函数的函数体&#39;);
  console.log(name, age);
&#125;;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 优化写法</span><br><span class="line"></span><br><span class="line">  - 只有一个参数时, 可以省略()</span><br><span class="line"></span><br><span class="line">    ```js</span><br><span class="line">    names.forEach((item) =&gt; &#123;</span><br><span class="line">      console.log(item);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>只有一行代码时, 可以省略{}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br></pre></td></tr></table></figure>
</li>
<li><p>只要一行代码时, 表达式的返回值会作为箭头函数默认返回值, 所以可以省略 return</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果箭头函数默认返回的是对象, 在省略{}的时候, 对象必须使用()包裹 () &#x3D;&gt; ({name: “alex”})</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; &#123;&#125;; <span class="comment">// 注意: 这里是&#123;&#125;执行体</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrFn</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="4-说出浏览器输入一个-URL-到页面显示的过程"><a href="#4-说出浏览器输入一个-URL-到页面显示的过程" class="headerlink" title="4. 说出浏览器输入一个 URL 到页面显示的过程"></a>4. 说出浏览器输入一个 URL 到页面显示的过程</h2><ul>
<li>首先通过 DNS 服务器进行域名解析</li>
<li>解析出对应的 IP 地址 然后从 ip 地址对应的主机发送 http 请求 获取对应的静态资源(此时会有TCP的三次握手,目的是确认服务端和客户端的发送和接受能力是否都是正常的)<ol>
<li>客户端向服务端发送请求</li>
<li>等待服务端的确认,并恢复一个指令</li>
<li>客户端再次确认,服务器就会返回数据</li>
</ol>
</li>
<li>默认情况服务器会返回 index.html 文件,拿到文件之后会有(四次挥手,与服务器断开tcp链接)</li>
<li>然后浏览器内核开始解析 HTML</li>
<li>首先 会解析对应的 html 生成 DOM Tree</li>
<li>解析过程中 如果遇到 css 的 link 标签 则会下载对应的 css 文件<ul>
<li>下载 css 文件和生成 DOM 树是同时进行</li>
</ul>
</li>
<li>下载完对应的 css 文件后会进行 css 解析 生成 CSSOM( CSS object model)</li>
<li>当 DOM Tree 和 CSSTree 都解析完成之后 会进行合并用来生成 Render Tree(渲染树)</li>
<li>初步生成的渲染树会显示节点以及部分样式 但是并不表示每个节点的尺寸 位置信息 于是进行 Layout(布局)来生成渲染树中节点的宽度 高度位置信息</li>
<li>经过 Layout 之后 浏览器内核将布局时的每个 frame 转屏幕上的每个像素点 将每个节点绘制到屏幕上</li>
</ul>
<p><code>注意: 第一次确定节点的大小位置 称之为布局(Layout) 之后对节点大小位置改变后的重新计算称之为回流</code></p>
<p>引起回流的情况:</p>
<ul>
<li>DOM 结构发生改变(节点的增删)</li>
<li>修改了节点的布局(宽度 高度 字体大小等)</li>
<li>修改窗口的尺寸</li>
<li>调用 getComputedStyle 获取位置信息</li>
</ul>
<p><code>第一次绘制节点 渲染到页面上称之为绘制(paint) 之后重新绘制 称之为重绘</code></p>
<p>引起重绘情况:</p>
<ul>
<li>修改背景色颜色 等</li>
</ul>
<p><code>回流一定会引起重绘 所以回流非常消耗性能</code></p>
<p>如何避免回流</p>
<ul>
<li>尽量一次性的修改样式<ul>
<li>通过添加 classList</li>
</ul>
</li>
<li>避免频繁的操作 DOM</li>
<li>避免通过 getComputedStyle 获取尺寸位置信息等</li>
<li>对于某些元素使用 position:absolute&#x2F;fixed<ul>
<li>开销较小 不会对其他元素造成影响</li>
</ul>
</li>
</ul>
<p>第二次访问这个url,将域名解析的ip保存在本地,浏览器会读取缓存,</p>
<h2 id="5-说说-async-和-defer-的使用以及区别"><a href="#5-说说-async-和-defer-的使用以及区别" class="headerlink" title="5. 说说 async 和 defer 的使用以及区别"></a>5. 说说 async 和 defer 的使用以及区别</h2><p>浏览器在解析构建 DOM 树的过程中 如果遇到 script 元素会停止构建 DOM 树 先下载 JavaScript 代码 执行对应的脚本</p>
<p>但是某些 JavaScript 代码中可能存在对某个节点的操作 如果等待 DOM 树构建完成 之后在进行对应的操作 则会造成大量的回流和重绘</p>
<p>同时在如果 JavaScript 代码过多 则浏览器处理的时间会过长 则会造成页面的阻塞</p>
<p>为了解决这个问题 <code>script标签</code>出现了两个属性 async defer</p>
<p>defer</p>
<ul>
<li>脚本的下载会与 DOM 树的构建同时进行</li>
<li>如果脚本提前下载好了 则会等到 DOM 树构建完成之后 在 DOMContentLoaded 事件之前执行 defer 中的代码</li>
<li>同时多个 defer 属性的 script 标签 则会按照顺序执行</li>
<li>推荐放到 head 标签中 可以早解析</li>
<li>对于 script 默认的内容 会忽略</li>
</ul>
<p>async</p>
<ul>
<li>脚本的下载会与 DOM 树的构建同时进行</li>
<li>让一个脚本完全独立 脚本的解析 运行于 DOM 的构建无关</li>
<li>多个 async 属性的脚本不保证运行顺序</li>
<li>通常用于独立的脚本 对于其他脚本 DOM 没有依赖</li>
</ul>
<h2 id="6-写出-v8-引擎执行代码的大致流程"><a href="#6-写出-v8-引擎执行代码的大致流程" class="headerlink" title="6. 写出 v8 引擎执行代码的大致流程"></a>6. 写出 v8 引擎执行代码的大致流程</h2><ul>
<li>Parse 模块 将 JavaScript 代码转成 AST Tree</li>
<li>Ignition :解释器 将 ASTTree 转换为字节码(byte Code)<ul>
<li>同时收集 TurboFan 优化需要的信息</li>
</ul>
</li>
<li>TurboFan :编译器 将字节码编译为 CPU 可以直接执行的机器码(machine code)<ul>
<li>如果某一个函数被多次调用 则会被标记为热点函数 会经过 TurBoFan 转换的优化的机器码 让 CPU 执行 提高代码性能</li>
<li>如果后续执行代码过程中 改函数调用时的参数类型发生了改变 则会逆向的转成字节码 让 CPU 执行</li>
</ul>
</li>
</ul>
<p>执行流程:</p>
<ul>
<li><p>首先会编译 JavaScript 编译过程分为三步</p>
</li>
<li><p>1 词法分析(scanner)</p>
<ul>
<li>会将对应的每一行的代码的字节流分解成有意义的代码块 代码块被称为词法单元(token 进行记号化)</li>
</ul>
</li>
<li><p>2 语法分析(parser)</p>
<ul>
<li>将对应的 tokens 分析成一个元素逐级嵌套的树 这个树称之为 抽象语法树(Abstract Syntax Tree AST)</li>
<li>这里也有对应的 pre-parser</li>
</ul>
</li>
<li><p>3 将 AST 通过 Ignition 解释器转换成对应的字节码(ByteCode) 交给 CPU 执行 同时收集信息</p>
<ul>
<li>将可优化的信息 通过 TurBoFan 编译器 编译成更好使用的机器码交给 CPU 执行</li>
<li>如果后续代码的参数类型发生改变 则会逆优化(Deoptimization)为字节码</li>
</ul>
</li>
</ul>
<h2 id="7-说一下-JavaScript-的代码的执行流程"><a href="#7-说一下-JavaScript-的代码的执行流程" class="headerlink" title="7. 说一下 JavaScript 的代码的执行流程"></a>7. 说一下 JavaScript 的代码的执行流程</h2><ul>
<li>首先在执行前会现在堆内存中开辟一块空间(GO) 存放一些初始的值 如 Number String 等等</li>
<li>还有代码中定义的一些变量 函数(在 parser 转成 AST 树的过程中存放在 GO 中的 )并没有赋值</li>
<li>同时在执行代码时在执行上下文栈(ECS)中存放一个全局执行上下文(GEC) 用于执行代码<ul>
<li>GO 中对应的函数 也会在堆内存中开辟出空间 为 Function Object 初始一些数据(name length scope chain 等)</li>
</ul>
</li>
<li>开始执行代码</li>
<li>每个 EC 中有着三个重要的内容(VO scope chain 以及 this)</li>
<li>VO 指向对应的作用域(全局作用域(GO) 函数作用域(AO))</li>
</ul>
<h2 id="8-说说你对-GO-x2F-AO-x2F-VO-的理解以及作用域和作用域链的理解"><a href="#8-说说你对-GO-x2F-AO-x2F-VO-的理解以及作用域和作用域链的理解" class="headerlink" title="8. 说说你对 GO&#x2F;AO&#x2F;VO 的理解以及作用域和作用域链的理解"></a>8. 说说你对 GO&#x2F;AO&#x2F;VO 的理解以及作用域和作用域链的理解</h2><p>GO</p>
<ul>
<li>Global Object JS 代码在执行前会现在堆内存中创建一个全局对象(GO)</li>
<li>用于存放一些定义好的变量方法等包含 Date Array String Number setTimeout 等</li>
<li>同时有一个 window 属性指向自己</li>
<li>同时在语法分析转成 AST 的过程中也会将一些变量 函数 存放在 GO 中 只是变量的初始值为 undefined</li>
</ul>
<p>AO</p>
<ul>
<li>函数在执行前会先在堆内存中创建一个 AO(Activation Object)对象 里面存放这 arguments 对应函数的形参 以及在函数中定义的变量 初始值为 undefined</li>
</ul>
<p>VO</p>
<ul>
<li>Variable Object 在执行函数时 会在执行上下文栈(ECS)中进入一个函数执行上下文(FEC)其中有三个核心 核心之一是 VO 指向的是该函数在内存中解析时创建的 AO 而在全局执行上下文中指向的是 GO</li>
</ul>
<p>作用域,作用域链</p>
<ul>
<li>当进入到一个执行上下文时 执行上下文会关联一个作用域链</li>
<li>通常作用域链在解析时就被确定 因此 作用域链域函数的定义位置有关 而与它的调用位置无关</li>
</ul>
<h2 id="9-说说-V8-引擎的内存管理以及垃圾回收器"><a href="#9-说说-V8-引擎的内存管理以及垃圾回收器" class="headerlink" title="9. 说说 V8 引擎的内存管理以及垃圾回收器"></a>9. 说说 V8 引擎的内存管理以及垃圾回收器</h2><p>内存管理</p>
<ul>
<li>JavaScript 的内存管理是自动的</li>
<li>关于原始数据类型 直接在栈内存中分配</li>
<li>关于复杂数据类型 在堆内存中分配</li>
</ul>
<p>垃圾回收(GC)</p>
<ul>
<li>因为内存大小是有限的 所以在内存不需要的时候 需要进行释放 用于腾出空间</li>
<li>GC 对于内存管理有着对应的算法</li>
<li>常见的算法<ul>
<li>引用计数(Reference Count)<ul>
<li>当一个对象有引用指向它时 对应的引用计数+1</li>
<li>当没有对象指向它时 则为 0 此时进行回收</li>
<li>但是有一个严重的问题 - 会产生循环引用</li>
</ul>
</li>
<li>标记清除(Mark-Sweep)<ul>
<li>核心思路: 可达性</li>
<li>有一个根对象 从该对象出发 开始引用到所用到的对象 对于根对象没有引用到的对象 认为是不可用的对象</li>
<li>对于不可用的对象 则进行回收</li>
<li>该算法有效的解决了循环引用的问题</li>
<li>目前 V8 引擎采用的就是该算法</li>
</ul>
</li>
</ul>
</li>
<li>V8 引擎为了优化 在采用标记清除的过程中也引用了其他的算法<ul>
<li>标记整理<ul>
<li>和标记清除相似 不同的是回收时 会将保留下来的存储对象整合到连续的内存空间 避免内存碎片化</li>
</ul>
</li>
<li>分代收集(Generational Collection)<ul>
<li>将内存中的对象分为两组 新的空间 旧的空间</li>
<li>对于长期存活的对象 会将该对象从新空间移到旧空间中 同时 GC 检查次数减少</li>
<li>将新空间分为 from 和 to 对象的 GC 查找之后从 from 移动到 to 空间中 然后 to 变为 from from 变为 to 循环几次 对于依然存在的对象 移动到旧空间中</li>
</ul>
</li>
<li>增量收集(Increment Collection)<ul>
<li>如果存在许多对象 则 GC 试图一次性遍历所有的对象 可能会对性能造成一定的影响</li>
<li>所以引擎试图将垃圾收集工作分成几部分 然后这几部分逐一处理 这样会造成微小的延迟 而不是很大的延迟</li>
</ul>
</li>
<li>闲时收集(IdIe-time Collection)<ul>
<li>GC 只会在 CPU 空闲的时候运行 减少可能对代码执行造成的影响</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="10-你是如何理解闭包的-闭包到底是什么"><a href="#10-你是如何理解闭包的-闭包到底是什么" class="headerlink" title="10. 你是如何理解闭包的,闭包到底是什么?"></a>10. 你是如何理解闭包的,闭包到底是什么?</h2><p>广义上讲 JavaScript 的函数都是闭包</p>
<p>狭义上将 JavaScript 中的函数如果访问了外层作用域中的变量 则称为闭包</p>
<p>实现上是一个函数与包含它的作用的引用绑定在了一起的组合</p>
<h2 id="11-闭包为什么会产生内存泄露以及如何解决"><a href="#11-闭包为什么会产生内存泄露以及如何解决" class="headerlink" title="11. 闭包为什么会产生内存泄露以及如何解决"></a>11. 闭包为什么会产生内存泄露以及如何解决</h2><ul>
<li><p>闭包使得原本该销毁的作用域由于内部函数的引用没有销毁 始终存在在堆内存中 因此产生了内存泄露</p>
</li>
<li><p>解决</p>
<ul>
<li>将保存着上层作用域引用的函数在使用完之后置为 null 将它的引用销毁在 GC 的下一次检查中 对应的内存就会被销毁</li>
</ul>
</li>
</ul>
<h2 id="12-理解纯函数以及编写自己的纯函数"><a href="#12-理解纯函数以及编写自己的纯函数" class="headerlink" title="12. 理解纯函数以及编写自己的纯函数"></a>12. 理解纯函数以及编写自己的纯函数</h2><p>纯函数：纯函数一般具有以下的特点：</p>
<ul>
<li>确定的输入一定会有确定的输出（外部环境的任何变化不会影响函数内部的操作产生的结果）</li>
<li>纯函数的执行不会产生副作用。（函数内部的操作也不会对函数外部产生任何影响）</li>
</ul>
<p>编写纯函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般的数学方法可以写成纯函数,例如相加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">perValue, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + item;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-理解函数柯里化以及说出柯里化的作用"><a href="#13-理解函数柯里化以及说出柯里化的作用" class="headerlink" title="13. 理解函数柯里化以及说出柯里化的作用"></a>13. 理解函数柯里化以及说出柯里化的作用</h2><p>函数的柯里化：将传入多个参数的函数转变成传入单个参数并且返回一个函数用于接收剩余的参数的函数。每一层函数都接收一个参数并对参数进行处理。</p>
<p>柯里化的作用：</p>
<ul>
<li>单一职责：每一个函数只用处理传入的单个参数，每个函数的职责单一而且确定</li>
<li>参数复用：可以拿到每一层函数执行的返回值作为一个新的函数，复用已经传入过的参数。</li>
</ul>
<h2 id="14-理解组合函数以及组合函数的作用"><a href="#14-理解组合函数以及组合函数的作用" class="headerlink" title="14. 理解组合函数以及组合函数的作用"></a>14. 理解组合函数以及组合函数的作用</h2><p>组合函数：组合函数是将多个函数组合到一起，进行依次调用的函数使用模式。</p>
<p>组合函数的作用：</p>
<ul>
<li>减少重复代码的编写，提高代码的复用性，便于开发。</li>
<li>可以对任意个函数进行组合，返回新的具有多个被组合函数功能的新函数</li>
</ul>
<h2 id="15-说说你对严格模式的理解"><a href="#15-说说你对严格模式的理解" class="headerlink" title="15. 说说你对严格模式的理解"></a>15. 说说你对严格模式的理解</h2><p>严格模式是一种 JavaScript 的限制模式，因为种种历史原因，JavaScript 语言在非严格模式下是比较松散的。在 JavaScript 不断优化和加入新特性的过程中，为了兼容早期的 JavaScript，一些错误和不规范的写法也被保留了下来。这些错误也不会被抛出。在开启了严格模式后，js 引擎会以一种更严格的规范执行 JavaScript 代码，一些不规范的写法和错误也会直接抛出。</p>
<p>开启严格模式的方法：</p>
<ul>
<li>对文件开启：在文件的开头写上”use strict”</li>
<li>对函数开启：在函数的开头写上”use strict”</li>
</ul>
<p>严格模式下的语法限制：</p>
<ul>
<li>不允许意外创建全局变量（不写 var、let、const 这种声明变量的关键字）</li>
<li>会对静默失败的赋值操作抛出异常</li>
<li>试图删除不可删除的属性</li>
<li>不允许函数参数有相同的名称</li>
<li>不允许只有 0 开头的八进制语法</li>
<li>不允许使用 with</li>
<li>无法获取 eval 中定义的变量</li>
<li>this 绑定不会默认转成对象</li>
</ul>
<h2 id="16-什么是原型、原型链？"><a href="#16-什么是原型、原型链？" class="headerlink" title="16. 什么是原型、原型链？"></a>16. 什么是原型、原型链？</h2><p>原型：在 JavaScript 中，每一个对象都会有一个属性 <code>__proto__([[prototype]])</code>，这个属性就是对象的原型，这个属性的值也是一个对象，是原对象的原型对象。访问对象中属性时，会先在对象自身进行查找，如果没有找到，那么会去对象的原型对象上查找。</p>
<p>原型链：每个对象都有自己的原型对象，原型对象也有自己的原型对象。在访问对象的属性时，会沿着对象自身&#x3D;&gt;自身的原型对象&#x3D;&gt;原型对象的原型对象……这样的链条一路查找上去，这条链式结构就叫做原型链。原型链的尽头是 Object 的原型对象的<code>__proto__([[prototype]])</code>属性，值为 null。</p>
<h2 id="17-ES5-继承的各个方案以及优缺点"><a href="#17-ES5-继承的各个方案以及优缺点" class="headerlink" title="17. ES5 继承的各个方案以及优缺点"></a>17. ES5 继承的各个方案以及优缺点</h2><p>方案一：原型继承-子类的原型指向父类的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>

<p>优点：<br>父类的构造函数体内 和 原型上的内容都能继承下来<br>缺点：<br>继承下来的属性不在自己身上，子类实例的属性分开来写，s 的属性自己身上有一部分，原型上有一部分</p>
<hr>
<p>方案二：call 继承-利用 call 调用父类构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">gender, ...args</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：<br>可以把继承来的属性 直接出现在子类的实例上<br>一个实例使用的属性可以在一个位置传递参数了<br>缺点：<br>只能继承 构造函数体内书写的内容 构造函数的 原型上的 不能继承</p>
<hr>
<p>方案三：组合继承-结合上述两种方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">arg1, arg2</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg1, arg2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>

<p>缺点：父类构造函数会被调用两次，并且子类的实例对象总是有两份相同的属性，一份在自身，一份在其原型对象上</p>
<h2 id="18-编写-ES6-的类并且实现继承"><a href="#18-编写-ES6-的类并且实现继承" class="headerlink" title="18. 编写 ES6 的类并且实现继承"></a>18. 编写 ES6 的类并且实现继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, address</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = address;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;在跑步&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">createPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// return new Person(Math.floor(Math.random() * 100));</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">this</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, height, address</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age, address);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写running方法</span></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是student里的&#x27;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">running</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">createStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// return new Person(Math.floor(Math.random() * 100));</span></span><br><span class="line">    <span class="comment">// console.log(&quot;我是student里的静态方法&quot;);</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">createPerson</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">23</span>, <span class="number">190</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line">stu.<span class="title function_">running</span>();</span><br><span class="line"><span class="keyword">var</span> createPerson1 = <span class="title class_">Student</span>.<span class="title function_">createPerson</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(createPerson1);</span><br></pre></td></tr></table></figure>

<h2 id="19-说说你对面向对象多态的理解"><a href="#19-说说你对面向对象多态的理解" class="headerlink" title="19. 说说你对面向对象多态的理解"></a>19. 说说你对面向对象多态的理解</h2><p>不同的数据类型进行同一个操作，表现出不同的行为，就是多态的体现</p>
<h2 id="20-整理-ES6-ES11-新增知识点"><a href="#20-整理-ES6-ES11-新增知识点" class="headerlink" title="20. 整理 ES6~ES11 新增知识点"></a>20. 整理 ES6~ES11 新增知识点</h2><p>ES6 :</p>
<ul>
<li>使用 class 用来定义类<ul>
<li>constructor 构造器</li>
<li>extends 实现继承</li>
<li>super 关键字代表继承的父类</li>
</ul>
</li>
<li>对象字面量的增强<ul>
<li>属性的简写</li>
<li>方法的简写</li>
<li>计算属性名</li>
</ul>
</li>
<li>解构</li>
<li>let&#x2F;const 的使用<ul>
<li>不能重复声明变量</li>
<li>不存在作用域提升</li>
<li>存在暂时性死区</li>
<li>不添加 window</li>
<li>存在块级作用域</li>
</ul>
</li>
<li>字符串模板<ul>
<li>在模板字符串中，我们可以通过 ${expression} 来嵌入动态的内容</li>
<li>标签模板字符串</li>
</ul>
</li>
<li>函数的默认参数</li>
<li>函数的剩余参数</li>
<li>箭头函数<ul>
<li>没有显式原型 prototype</li>
<li>不绑定 this、arguments、super 参数</li>
</ul>
</li>
<li>展开语法<ul>
<li>在函数调用时使用；</li>
<li>在数组构造时使用；</li>
<li>展开运算符其实是一种浅拷贝</li>
<li>在构建对象字面量时，也可以使用展开运算符，这个是在 ES2018（ES9）中添加的新特性；</li>
</ul>
</li>
<li>规范了二进制和八进制的写法</li>
<li>新增 Symbol</li>
<li>Set、WeakSet、Map、WeakMap</li>
</ul>
<p>ES7 :</p>
<ul>
<li>Array Includes<ul>
<li>通过 includes 来判断一个数组中是否包含一个指定的元素，根据情况，包含返回 true，否则返回 false。</li>
</ul>
</li>
<li>指数 exponentiation 运算符<ul>
<li>**,对数字来计算乘方。</li>
</ul>
</li>
</ul>
<p>ES8 :</p>
<ul>
<li>Object values<ul>
<li>通过 Object.values 来获取所有的 value 值</li>
</ul>
</li>
<li>Object entries<ul>
<li>通过 Object.entries 可以获取到一个数组，数组中会存放可枚举属性的键值对数组</li>
</ul>
</li>
<li>String Padding<ul>
<li>padStart 和 padEnd 方法，分别对字符串的首尾进行填充的。</li>
</ul>
</li>
<li>Trailing Commas<ul>
<li>允许在函数定义和调用时多加一个逗号：</li>
</ul>
</li>
<li>Object.getOwnPropertyDescriptors</li>
</ul>
<p>ES9 :</p>
<ul>
<li>构建对象字面量时，可以使用展开运算符</li>
</ul>
<p>ES10 :</p>
<ul>
<li>flat<ul>
<li>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li>
</ul>
</li>
<li>flatMap<ul>
<li>flatMap 是先进行 map 操作，再做 flat 的操作</li>
<li>flatMap 中的 flat 相当于深度为 1</li>
</ul>
</li>
<li>Object fromEntries<ul>
<li>Object.formEntries 将 entries 转换成一个对象</li>
</ul>
</li>
<li>trimStart trimEnd<ul>
<li>去除字符串前面或者后面的空格</li>
</ul>
</li>
</ul>
<p>ES11 :</p>
<ul>
<li>BigInt<ul>
<li>BigInt，用于表示大的整数(超过最大安全整数)</li>
<li>BitInt 的表示方法是在数值的后面加上 n</li>
</ul>
</li>
<li>空值合并操作符<ul>
<li>??当前面的值为 null 或者 undefined 时,显示??后面的值</li>
</ul>
</li>
<li>Optional Chaining<ul>
<li>可选链?.</li>
<li>当?.前面的值为空时返回 undefined</li>
</ul>
</li>
<li>Global This<ul>
<li>JavaScript 环境的全局对象</li>
</ul>
</li>
<li>for..in 标准化<ul>
<li>for…in 遍历对象时遍历的是 key</li>
</ul>
</li>
</ul>
<h2 id="21-说说-Symbol-的用法和作用"><a href="#21-说说-Symbol-的用法和作用" class="headerlink" title="21. 说说 Symbol 的用法和作用"></a>21. 说说 Symbol 的用法和作用</h2><p>用法</p>
<ul>
<li>Symbol 值是通过 Symbol 函数来生成的</li>
<li>Symbol()表示生成一个独一无二的值</li>
<li>我们也可以在创建 Symbol 值的时候,在()里面传入一个 description,描述当前的 Symbol</li>
<li>获取 Symbol,使用 Object.getOwnPropertySymbols()获取当前对象的 Symbol,结果为一个数组</li>
</ul>
<p>作用</p>
<ul>
<li>用于对象的属性名,表示一个唯一的属性名</li>
</ul>
<p>相同值的 Symbol:</p>
<ul>
<li>使用 Symbol.for()生成,当 key 一样的时候,生成表示相同的 Symbol</li>
<li>Symbol.keyFor(Symbol.for())获取对应的 key</li>
</ul>
<h2 id="22-说说你对-Set、WeakSet、Map、WeakMap-的了解"><a href="#22-说说你对-Set、WeakSet、Map、WeakMap-的了解" class="headerlink" title="22. 说说你对 Set、WeakSet、Map、WeakMap 的了解"></a>22. 说说你对 Set、WeakSet、Map、WeakMap 的了解</h2><p>Set:</p>
<ul>
<li>用来存储数据,类似于数组,</li>
<li>与数组的区别是元素不能重复,</li>
<li>可以使用 forEach 方法和使用 for…of…遍历</li>
<li>常见属性和方法<ul>
<li>size：返回 Set 中元素的个数</li>
<li>add(value)：添加某个元素，返回 Set 对象本身</li>
<li>delete(value)：从 set 中删除和这个值相等的元素，返回 boolean 类型</li>
<li>has(value)：判断 set 中是否存在某个元素，返回 boolean 类型</li>
<li>clear()：清空 set 中所有的元素</li>
<li>forEach(callback, [, thisArg])：通过 forEach 遍历 set</li>
</ul>
</li>
</ul>
<p>WeakSet:</p>
<ul>
<li>只能存储对象类型,不能存放基本数据类型,</li>
<li>对对象的引用是一个弱引用,如果没有其他对对象的引用,那么相应对象会被 GC 进行清除,</li>
<li>不能遍历</li>
<li>常见的方法<ul>
<li>add(value)：添加某个元素，返回 WeakSet 对象本身</li>
<li>delete(value)：从 WeakSet 中删除和这个值相等的元素，返回 boolean 类型</li>
<li>has(value)：判断 WeakSet 中是否存在某个元素，返回 boolean 类型</li>
</ul>
</li>
</ul>
<p>Map:</p>
<ul>
<li>用于存储映射关系,存储的为键值对,</li>
<li>每个键值对为一个数组,</li>
<li>与对象的区别是存储的 key 可以为一个对象</li>
<li>可以使用 forEach 方法和使用 for…of…遍历</li>
<li>常见属性和方法<ul>
<li>size：返回 Set 中元素的个数</li>
<li>set(key, value)：在 Map 中添加 key、value，并且返回整个 Map 对象</li>
<li>get(key)：根据 key 获取 Map 中的 value</li>
<li>has(key)：判断是否包括某一个 key，返回 Boolean 类型</li>
<li>delete(key)：根据 key 删除一个键值对，返回 Boolean 类型</li>
<li>clear()：清空所有的元素</li>
<li>forEach(callback, [, thisArg])：通过 forEach 遍历 Map</li>
</ul>
</li>
</ul>
<p>WeakMap:</p>
<ul>
<li>存储的 key 只能为对象,不允许是其他类型</li>
<li>对对象的引用是一个弱引用,如果没有其他对对象的引用,那么相应对象会被 GC 进行清除,</li>
<li>不能进行遍历</li>
<li>常见的方法<ul>
<li>set(key, value)：在 Map 中添加 key、value，并且返回整个 Map 对象</li>
<li>get(key)：根据 key 获取 Map 中的 value</li>
<li>has(key)：判断是否包括某一个 key，返回 Boolean 类型</li>
<li>delete(key)：根据 key 删除一个键值对，返回 Boolean 类型</li>
</ul>
</li>
</ul>
<h2 id="23-说一下引用赋值-浅拷贝-深拷内存情况"><a href="#23-说一下引用赋值-浅拷贝-深拷内存情况" class="headerlink" title="23. 说一下引用赋值-浅拷贝-深拷内存情况"></a>23. 说一下引用赋值-浅拷贝-深拷内存情况</h2><p>引用赋值: 将一个变量中存储的对对象的引用地址赋值给另一个变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = obj;</span><br></pre></td></tr></table></figure>

<p>浅拷贝:</p>
<ul>
<li>使用…运算符展开一个对象时是一种浅拷贝,</li>
<li>只是将对像内的内容进行简单的复制,</li>
<li>如果对象中存储的内容为另一个对象时,并不是将另一个对象进行复制,</li>
<li>而是将外面对象内存储的对里面对象的引用进行复制</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xfj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; ...obj &#125;;</span><br></pre></td></tr></table></figure>

<p>深拷贝:</p>
<ul>
<li>完完全全的创建一个和原来的对象有相同结构的新的对象,</li>
<li>如果对象中存储的有其他的对象,在拷贝后的对象中也创建一个新的和里面对象除了内存地址不同,其他完全相同的对象</li>
<li>改变新对象中的任何内容,都不会对我们进行拷贝的对象造成任何影响</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xfj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br></pre></td></tr></table></figure>

<h2 id="24-说出-Proxy-和-Object-defineProperty-的区别"><a href="#24-说出-Proxy-和-Object-defineProperty-的区别" class="headerlink" title="24. 说出 Proxy 和 Object.defineProperty 的区别"></a>24. 说出 Proxy 和 Object.defineProperty 的区别</h2><ul>
<li><p>Proxy 的设计初衷就是监听对象的改变,并且提供了 13 中方法监听对象的操作,大大方便了和丰富了对对象的监听操作</p>
<ul>
<li>拦截和监视外部对对象的访问</li>
<li>可以直接监听数组的变化</li>
</ul>
</li>
<li><p>Object.defineProperty</p>
<ul>
<li><p>该属性设计初衷是定义对象的属性,所以有些监听操作是监听不到的</p>
</li>
<li><p>对于复杂的对象,层级很深的话,需要深度监听</p>
</li>
<li><p>删除属性,添加属性是不能被监听的</p>
</li>
<li><p>不能监听数组的变化</p>
<ul>
<li>本质上是数组的 length 属性的数据属性描述符:</li>
<li>configurable: false 意味着 length 属性不能被修改,不能将 length 属性修改为存取属性描述符</li>
<li>所以数组长度的变化的不能被监听的</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="params"><span class="built_in">Object</span>.getOwnPropertyDescriptors(num)</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: &#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">length</span>: &#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">configurable</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="25-说说-Reflect-的作用和为什么需要使用它"><a href="#25-说说-Reflect-的作用和为什么需要使用它" class="headerlink" title="25. 说说 Reflect 的作用和为什么需要使用它"></a>25. 说说 Reflect 的作用和为什么需要使用它</h2><ul>
<li>Reflect<ul>
<li>是一个对象</li>
<li>提供了多种方法方便我们统一管理对象,在对对象进行操作时有些方法会有返回值,操作对象变的更加规范</li>
<li>Object 作为构造函数,操作对象的方法放在它身上不是很合适,早期的设计不规范导致的</li>
<li>在使用 Proxy 监听对象时,使用 Reflect 避免了对原对象的直接操作</li>
</ul>
</li>
</ul>
<h2 id="26-说说-Promise-的作用和使用方法（各个回调的作用）"><a href="#26-说说-Promise-的作用和使用方法（各个回调的作用）" class="headerlink" title="26. 说说 Promise 的作用和使用方法（各个回调的作用）"></a>26. 说说 Promise 的作用和使用方法（各个回调的作用）</h2><ul>
<li>Promise<ul>
<li>异步编程的一种解决方案,比传统的解决方案–回调函数-更加合理和更强大</li>
<li>是一个对象</li>
<li>对象的状态不受外界影响</li>
<li>一旦状态改变,就不会再变</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(value); <span class="comment">//该函数执行时会回调onFulfilled</span></span><br><span class="line">  <span class="title function_">reject</span>(reason); <span class="comment">//该函数执行时会回调onRejected</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个回调函数会被立即执行~&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听promise对象的状态 方式一</span></span><br><span class="line">promise.<span class="title function_">then</span>(onFulfilled).<span class="title function_">catch</span>(onRejected);</span><br><span class="line"><span class="comment">// 监听promise对象的状态 方式二</span></span><br><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>

<h2 id="27-说一下你知道的-Promise-的实例方法和类方法"><a href="#27-说一下你知道的-Promise-的实例方法和类方法" class="headerlink" title="27. 说一下你知道的 Promise 的实例方法和类方法"></a>27. 说一下你知道的 Promise 的实例方法和类方法</h2><ul>
<li>Promise 的实例方法:<ul>
<li>then(onFulfilled,onRejected)<ul>
<li>onFulfilled —-&gt;成功时的回调</li>
<li>onRejected —-&gt; 失败时的回调</li>
<li>返回值是一个新的 promise 对象 所以 promise 支持链式调用的原因</li>
</ul>
</li>
<li>catch(onRejected)<ul>
<li>onRejected —-&gt;失败时的回调</li>
</ul>
</li>
<li>finally(callback)<ul>
<li>callback —-&gt;不管 promise 最后的状态,在执行完 then 或 catch 指定的回调函数后,都会执行的回调</li>
</ul>
</li>
</ul>
</li>
<li>Promise 的类方法<ul>
<li>all()<ul>
<li>接受一个数组作为参数,数组元素是 promise 对象,返回一个新的 promise 对象</li>
<li>可以不是数组,但必须是可迭代对象,且返回的每一个成员都是 Promise 实例</li>
<li>只有数组里所以的 promise 对象都是 fulfilled 状态时,返回的 promsie 的状态是 fulfilled</li>
<li>当数组中的 promise 对象有一个的 rejected 状态时,返回的 promise 的状态时 rejected</li>
</ul>
</li>
<li>race()<ul>
<li>接受一个数组作为参数,数组元素是 promise 对象,返回一个新的 promise 对象</li>
<li>只要数组中的实例有一个率先改变,返回的 promise 对象就跟着改变</li>
</ul>
</li>
<li>allSettled()<ul>
<li>接受一个数组作为参数,数组元素是 promise 对象,返回一个新的 promise 对象</li>
<li>只有等数组中所有的 promise 对象都发生状态改变后,返回的 promsie 对象状态才会改变</li>
<li>返回的 promsie 对象,一旦状态发生改变,状态总是 fulfilled</li>
</ul>
</li>
<li>any()<ul>
<li>接受一个数组作为参数,数组元素是 promise 对象,返回一个新的 promise 对象</li>
<li>只要数组实例中有一个变成 fulfilled 状态,返回的 promise 对象就会变成 fulfilled 状态</li>
<li>只有当数组中所有的 promise 实例都变成 rejected 状态,返回的 promise 对象才变成 rejected 状态</li>
</ul>
</li>
<li>resolve()<ul>
<li>将现有对象转为 promsie 实例</li>
</ul>
</li>
<li>rejected()<ul>
<li>返回一个新的 promsie 实例,该实例的状态为 rejected</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="28-什么是迭代器？什么是可迭代对象？"><a href="#28-什么是迭代器？什么是可迭代对象？" class="headerlink" title="28. 什么是迭代器？什么是可迭代对象？"></a>28. 什么是迭代器？什么是可迭代对象？</h2><ul>
<li><p><strong>迭代器</strong></p>
<ul>
<li><p>迭代器是帮助我们对某个数据结构进行遍历的对象</p>
</li>
<li><p>迭代器也是一个具体的对象，这个对象需要符合迭代器<strong>协议</strong></p>
<ul>
<li>迭代器协议定义了产生一系列值（无论是有限还是无限个）的标准方式</li>
<li>在<code>JavaScript</code>中这个标准就是一个特定的<code>next</code>方法</li>
</ul>
</li>
<li><p><code>next</code>方法的要求</p>
<ul>
<li>一个无参数或者一个参数的函数，返回一个应当拥有以下两个属性的对象：</li>
<li><code>done</code>（<code>boolean</code>）<ul>
<li>如果迭代器可以产生序列中的下一个值，则为 <code>false</code>。（这等价于没有指定 <code>done </code>这个属性。）</li>
<li>如果迭代器已将序列迭代完毕，则为 <code>true</code>。这种情况下，<code>value </code>是可选的，如果它依然存在，即为迭代结束之后的默认返回值。</li>
</ul>
</li>
<li><code>value</code><ul>
<li>迭代器返回的任何 <code>JavaScript </code>值。<code>done </code>为 <code>true </code>时可省略</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装一个为数组创建迭代器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createArrayIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; arr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: arr[index++] &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>可迭代对象</strong></p>
<ul>
<li><p>和迭代器不是一个概念</p>
</li>
<li><p>当一个对象实现了<code>iterable protocol</code>协议时，它就是一个可迭代对象；</p>
</li>
<li><p>这个对象的要求是必须实现 <code>Symbol.iterator（@@iterator）</code>方法，在代码中我们使用 <code>Symbol.iterator </code>访问该属性</p>
</li>
<li><p>转成这样的好处</p>
<ul>
<li>当一个对象变成一个可迭代对象的时候，就可以进行某些迭代操作</li>
<li>比如 <code>for...of</code> 操作时，其实就会调用它的<code> Symbol.iterator</code> 方法</li>
</ul>
</li>
<li><p>实现可迭代协议的原生对象</p>
<ul>
<li><code>String</code>、<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>arguments</code>对象、<code>NodeList</code>集合…</li>
</ul>
</li>
<li><p>可迭代对象的应用</p>
<ul>
<li>JavaScript 中语法：<code>for ...of</code>、展开语法（<code>spread syntax</code>）、<code>yield*</code>、解构赋值（<code>Destructuring_assignment</code>）</li>
<li>创建一些对象时：<code>new Map([Iterable])、new WeakMap([iterable])、new Set([iterable])、new WeakSet([iterable])</code></li>
<li>一些方法的调用：<code>Promise.all(iterable)、Promise.race(iterable)、Array.from(iterable)</code></li>
</ul>
</li>
<li><p>迭代器的中断</p>
<ul>
<li>比如遍历的过程中通过<code>break、return、throw</code>中断了循环操作</li>
<li>比如在解构的时候，没有解构所有的值</li>
</ul>
</li>
<li><p>自定义类的迭代实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name, age, height, friends</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 实例方法</span></span><br><span class="line">      <span class="title function_">running</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">/      [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">          <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">friends</span>[index++] &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> iterator</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="29-什么是生成器？生成器和迭代器有什么关系？"><a href="#29-什么是生成器？生成器和迭代器有什么关系？" class="headerlink" title="29. 什么是生成器？生成器和迭代器有什么关系？"></a>29. 什么是生成器？生成器和迭代器有什么关系？</h2><ul>
<li><p><strong>生成器 (ES6 新增)</strong></p>
<ul>
<li><p>生成器函数也是一个函数，但是和普通的函数有一些区别</p>
<ul>
<li>首先，生成器函数需要在 function 的后面加一个符号：<code>*</code></li>
<li>其次，生成器函数可以通过 yield 关键字来控制函数的执行流程：</li>
<li>最后，生成器函数的返回值是一个（生成器）<ul>
<li>生成器事实上是一种特殊的迭代器</li>
</ul>
</li>
</ul>
</li>
<li><p>生成器函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">生成器函数:</span><br><span class="line"><span class="number">1.</span><span class="keyword">function</span>后面会跟上符号: *</span><br><span class="line"><span class="number">2.</span>代码的执行可以被<span class="keyword">yield</span>控制</span><br><span class="line"><span class="number">3.</span>生成器函数默认在执行时, 返回一个生成器对象</span><br><span class="line">    * 要想执行函数内部的代码, 需要生成器对象, 调用它的next操作</span><br><span class="line">    * 当遇到<span class="keyword">yield</span>时, 就会中断执行</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器传递参数 – next 函数</p>
<ul>
<li>调用 next 函数的时候，可以给它传递参数，那么这个参数会作为上一个 yield 语句的返回值</li>
<li>也就是说我们是为本次的函数代码块执行提供了一个值</li>
</ul>
</li>
<li><p>生成器提前结束</p>
<ul>
<li>return 传值后这个生成器函数就会结束，之后调用 next 不会继续生成值</li>
</ul>
</li>
<li><p>生成器替代迭代器</p>
<ul>
<li>使用 yield 来生产一个可迭代对象</li>
<li>这个时候相当于是一种 yield 的语法糖，只不过会依次迭代这个可迭代对象，每次迭代其中的一个值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">createArrayIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span>* arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义类迭代 – 生成器实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以Person为例  添加到实例方法</span></span><br><span class="line">*[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="variable language_">this</span>.<span class="property">friends</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="30-异步函数和普通函数的区别"><a href="#30-异步函数和普通函数的区别" class="headerlink" title="30. 异步函数和普通函数的区别"></a>30. 异步函数和普通函数的区别</h2><ul>
<li><p><strong>异步函数</strong></p>
<ul>
<li><p>使用<code>async</code>关键字声明的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async function foo() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const bar = async function() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const baz = async () =&gt; &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class Person &#123;</span></span><br><span class="line"><span class="comment">//   async running() &#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异步函数的执行流程</p>
<ul>
<li>异步函数的内部代码执行过程和普通的函数是一致的，默认情况下也是会被同步执行</li>
<li>返回值和普通函数的区别<ul>
<li>情况一：异步函数也可以有返回值，但是异步函数的返回值相当于被包裹到<code>Promise.resolve</code>中</li>
<li>情况二：如果我们的异步函数的返回值是<code>Promise</code>，状态由会由<code>Promise</code>决定；</li>
<li>情况三：如果我们的异步函数的返回值是一个对象并且实现了<code>thenable</code>，那么会由对象的方<code>then</code>法来决定</li>
</ul>
</li>
<li>如果在<code>async</code>函数中抛出异常<ul>
<li>并不会报错, 而是作为<code>Promise</code>的<code>reject</code>来传递</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="31-说说线程和进程的区别以及关系"><a href="#31-说说线程和进程的区别以及关系" class="headerlink" title="31. 说说线程和进程的区别以及关系"></a>31. 说说线程和进程的区别以及关系</h2><ul>
<li><p><strong>进程</strong></p>
<ul>
<li>是<code>cpu</code>分配资源的最小单位；（是能拥有资源和独立运行的最小单位）</li>
<li>计算机已经运行的程序，是操作系统管理程序的一种方式 (<strong>官方说法</strong>)</li>
<li>可以认为启动一个应用程序，就会默认启动一个进程（也可能是多个进程）**(个人解释)**</li>
<li>也可以说进程是线程的容器</li>
</ul>
</li>
<li><p><strong>线程</strong></p>
<ul>
<li>是<code>cpu</code>调度的最小单位；（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</li>
<li>操作系统能够运行运算调度的最小单位，通常情况下它被包含在进程中 <strong>(官方说法)</strong></li>
<li>每一个进程中，都会启动至少一个线程用来执行程序中的代码，这个线程被称之为主线程</li>
</ul>
</li>
<li><p><strong>操作系统的工作方式</strong></p>
<ul>
<li>如何做到同时让多个进程同时工作?<ul>
<li>因为<code>CPU</code>的运算速度非常快, 可以快速的在多个进程之间迅速的切换</li>
<li>当进程中的线程获取到世间片时, 就可以快速执行我们编写的代码</li>
<li>由于<code>CPU</code>执行速度过于变态, 对于用户来说是感受不到这种快速切换的</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>浏览器中<code>JavaScript</code>线程</strong></p>
<ul>
<li><p><strong><code>JavaScript</code>为什么是单线程的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这主要和js的用途有关，js是作为浏览器的脚本语言，主要是实现用户与浏览器的交互，以及操作dom;这决定了它只能是单线程，否则会带来很复杂的同步问题。举个例子：如果js被设计了多线程，如果有一个线程要修改一个dom元素，另一个线程要删除这个dom元素，此时浏览器就会一脸茫然，不知所措。所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进程容器是浏览器或者<code>Node</code></li>
</ul>
</li>
<li><p><strong>浏览器是多进程的?</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  放在浏览器中，每打开一个tab页面，其实就是新开了一个进程，在这个进程中，还有ui渲染线程，js引擎线程，http请求线程等。所以，浏览器是一个多进程的。为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM.所以，这个新标准并没有改变JavaScript单线程的本质。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>目前多数浏览器都是多进程的, 打开一个<code>tab</code>页面就会开启一个新的进程, 防止因为一个页面的卡死导致浏览器的强制退出</li>
<li>每个进程中又有很多的线程，其中包括执行<code>JavaScript</code>代码的线程</li>
</ul>
</li>
<li><p>线程中<code>JavaScript</code>代码的执行</p>
<ul>
<li>它是在一个单独的线程中执行的, 意味着<code>JavaScript</code>代码在同一时刻只能做一件事</li>
<li>这<strong>非常耗时</strong>, 意味着当前线程会被阻塞</li>
</ul>
</li>
<li><p>所以耗时的操作并不是在<code>JavaScript</code>线程中执行的</p>
<ul>
<li>浏览器的每个进程是多线程的，那么其他线程可以来完成这个耗时的操作</li>
<li>比如网络请求、定时器，只需要在特性的时候执行应该有的回调即可</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="32-说说你对事件队列、微任务、宏任务的理解"><a href="#32-说说你对事件队列、微任务、宏任务的理解" class="headerlink" title="32. 说说你对事件队列、微任务、宏任务的理解"></a>32. 说说你对事件队列、微任务、宏任务的理解</h2><ul>
<li><strong>事件队列</strong><ul>
<li>事件队列是一种数据结构，可以存放要执行的任务。它符合<strong>队列</strong>“<strong>先进先出</strong>”的特点</li>
</ul>
</li>
<li><strong>宏&#x2F;微任务</strong><ul>
<li>首先它们都是异步任务</li>
<li>宏任务列队<ul>
<li>用来保存待执行的宏任务（回调）</li>
<li>如: <code>ajax、setTimeout、setInterval、DOM</code>监听、<code>UI Rendering</code>等 会被加入到宏列队</li>
</ul>
</li>
<li>微任务列队<ul>
<li>用来保存待执行的微任务（回调）</li>
<li>如: <code>Promise</code>的<code>then</code>回调、 <code>Mutation Observer API、queueMicrotask()</code>等 会被加入到微列队</li>
</ul>
</li>
<li><code>JS</code>执行时会区别这两个队列<ul>
<li><code>JS</code>引擎首先必须先执行所有的初始化同步任务代码</li>
<li>每次准备取出第一个宏任务执行前，都要将所有的微任务一个一个取出来执行，</li>
<li>也就是优先级比宏任务高，且与微任务所处的代码位置无关</li>
<li>也就是宏任务执行之前，必须保证微任务队列是空的；</li>
<li>如果不为空，那么就优先执行微任务队列中的任务（回调）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="33-LocalStorage-和-SessionStorage-的区别"><a href="#33-LocalStorage-和-SessionStorage-的区别" class="headerlink" title="33. LocalStorage 和 SessionStorage 的区别"></a>33. LocalStorage 和 SessionStorage 的区别</h2><ul>
<li>LocalStorage 提供一种永久性存储的方法 在网页关闭打开时 依然保留</li>
<li>SessionStorage: 会话存储 再关闭该网页时 存储的内容被清除</li>
<li>区别:<ul>
<li>localStorage 永久性存储 SessionStorage 在关闭当前页面时存储的内容就会失效</li>
<li>SessionStorage 只能被同一个窗口的同源页面共享 localStorage 除非手动删除 否则一直存在</li>
</ul>
</li>
</ul>
<h2 id="34-说说你对防抖、节流的理解，他们的区别，应用场景"><a href="#34-说说你对防抖、节流的理解，他们的区别，应用场景" class="headerlink" title="34. 说说你对防抖、节流的理解，他们的区别，应用场景"></a>34. 说说你对防抖、节流的理解，他们的区别，应用场景</h2><p>防抖: 将多次执行函数变成最后一次执行 等待固定时间还没有事件触发时执行的函数</p>
<ul>
<li><p>应用场景</p>
<ul>
<li>按钮的点击</li>
<li>屏幕滚动时的复杂计算</li>
<li>输入框输入时进行搜索</li>
<li>用户缩放浏览器的 resize 事件</li>
</ul>
</li>
<li><p>简单的防抖函数实现</p>
</li>
<li><pre><code class="js">function myDebounce(execFn, delay) &#123;
  let timer = 0;

  function _debounce(...args) &#123;
    if (timer) clearTimeout(timer);
    timer = setTimeout(() =&gt; &#123;
      execFn.apply(this, args);
      timer = null;
    &#125;, delay);
  &#125;

  return _debounce;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">节流: 按照固定的时间频率(间隔)来执行对应的函数</span><br><span class="line"></span><br><span class="line">- 应用场景:</span><br><span class="line"></span><br><span class="line">  - 监听页面的滚动事件 通过节流来降低事件调用的频率</span><br><span class="line">  - 鼠标移动</span><br><span class="line">  - 用户频繁点击按钮的操作</span><br><span class="line"></span><br><span class="line">- 简单实现</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  function myThrottle(execFn, interval) &#123;</span><br><span class="line">    let initTime = 0;</span><br><span class="line">  </span><br><span class="line">    function throttle(...args) &#123;</span><br><span class="line">      let nowTime = Date.now();</span><br><span class="line">      const waitTime = interval - (nowTime - initTime);</span><br><span class="line">      if (waitTime &lt;= 0) &#123;</span><br><span class="line">        execFn.apply(this, args);</span><br><span class="line">        initTime = nowTime;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return throttle;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h2 id="35-说说对象的引用赋值、浅拷贝、深拷贝的区别"><a href="#35-说说对象的引用赋值、浅拷贝、深拷贝的区别" class="headerlink" title="35. 说说对象的引用赋值、浅拷贝、深拷贝的区别"></a>35. 说说对象的引用赋值、浅拷贝、深拷贝的区别</h2><p>对象的引用赋值</p>
<ul>
<li>把源对象指向自身所在堆内存空间的指针给了新对象 两个对象所指向的内存空间是一样的 修改其中一个的值 另一个也会发生改变</li>
</ul>
<p>对象的浅拷贝</p>
<ul>
<li>可以通过{…obj}的方式进行对象的浅拷贝 (Object.assign({},obj))</li>
<li>对于 obj 中的值是原始数据类型的 将对应的值赋值给了 newObj 中对应的属性</li>
<li>对于 obj 中是复杂数据类型的值 把对应在内存中的指针赋值给了 newObj 中对应的 key 对于复杂数据类型的 value 修改其中一个另一个也发生改变</li>
</ul>
<p>对象的深拷贝(真实开发中使用非常少)</p>
<ul>
<li><p>newObj 与 obj 中的属性值一样 但是是一个全新的对象 与元对象没有任何关系</p>
</li>
<li><p>默认情况下 js 没有提供对应的深拷贝的方式 因为深拷贝是非常消耗内存的</p>
</li>
<li><p>有对应的库实现了深拷贝</p>
</li>
<li><p>实现深拷贝</p>
<ul>
<li><p>JSON.parse(JSON.stringfy(obj))</p>
<ul>
<li>缺点: 对于某些属性如 undefined,Symbol,function,Symbol 会自动忽略; 对于 set map 会转成对象</li>
</ul>
</li>
<li><p>自己实现</p>
<ul>
<li><pre><code class="js">//判断一个变量是不是对象类型的
function isObject(obj) &#123;
  const objType = typeof obj;
  return obj !== null &amp;&amp; objType === &#39;object&#39;;
&#125;

//自己编写一个深拷贝函数
function deepClone(data) &#123;
  //不是对象类型
  if (!isObject(data)) return data;
  //对象类型
  const newObj = Array.isArray(data) ? [] : &#123;&#125;;
  for (const k in data) &#123;
    newObj[k] = deepClone(data[k]);
  &#125;
  return newObj;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 36. 事件总线的基本实现和使用</span><br><span class="line"></span><br><span class="line">利用对象存储所有的事件，然后通过 set 保证事件的唯一</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">class myEventBus &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.eventBus = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(eventName, eventFn) &#123;</span><br><span class="line">    let eventSet = this.eventBus[eventName];</span><br><span class="line">    if (!eventSet) &#123;</span><br><span class="line">      eventSet = new Set();</span><br><span class="line">      this.eventBus[eventName] = eventSet;</span><br><span class="line">    &#125;</span><br><span class="line">    this.eventBus[eventName].add(eventFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off(eventName, eventFn) &#123;</span><br><span class="line">    if (!this.eventBus[eventName]) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const eventSet = this.eventBus[eventName];</span><br><span class="line">    if (eventSet.has(eventFn)) this.eventBus[eventName].delete(eventFn);</span><br><span class="line">    if (!this.eventBus[eventName].size) &#123;</span><br><span class="line">      delete this.eventBus[eventName];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(eventName, ...payload) &#123;</span><br><span class="line">    if (!this.eventBus[eventName]) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (const item of this.eventBus[eventName]) &#123;</span><br><span class="line">      item(...payload);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mitt = new myEventBus();</span><br><span class="line">mitt.on(&#x27;alex&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;123&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">const fn = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;456&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">mitt.on(&#x27;alex&#x27;, fn);</span><br><span class="line">mitt.on(&#x27;alex&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;789&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  mitt.off(&#x27;alex&#x27;, fn);</span><br><span class="line">&#125;, 1000);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  mitt.emit(&#x27;alex&#x27;);</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="37-说说服务端渲染和前后端分离的区别"><a href="#37-说说服务端渲染和前后端分离的区别" class="headerlink" title="37. 说说服务端渲染和前后端分离的区别"></a>37. 说说服务端渲染和前后端分离的区别</h2><p>SSR(server side rendering) 服务端渲染</p>
<ul>
<li>优点:<ul>
<li>更快的响应时间 不用等待所有的 js 加载完成 也能显示比较完整的页面</li>
<li>更好的 SEO 可以将 SEO 的关键信息直接在后台渲染成 html 保证了搜索引擎能爬取到关键数据</li>
<li>无需占用客户端资源 解析模板交给后端工作 对于客户端的资源占用更少</li>
</ul>
</li>
<li><h2 id="缺点-占用服务器资源-一个小小的页面的改动-都需要请求一次完整的-html-页面-有悖于程序员的-x3D-x3D-”DRY-Don-96-t-repeat-yourself-”-x3D-x3D-原则-如果短时间访问过多-对服务器造成一定的访问压力"><a href="#缺点-占用服务器资源-一个小小的页面的改动-都需要请求一次完整的-html-页面-有悖于程序员的-x3D-x3D-”DRY-Don-96-t-repeat-yourself-”-x3D-x3D-原则-如果短时间访问过多-对服务器造成一定的访问压力" class="headerlink" title="缺点- 占用服务器资源 一个小小的页面的改动 都需要请求一次完整的 html 页面 有悖于程序员的&#x3D;&#x3D;”DRY(Don&#96;t repeat yourself)”&#x3D;&#x3D;原则 如果短时间访问过多 对服务器造成一定的访问压力"></a>缺点<br>- 占用服务器资源 一个小小的页面的改动 都需要请求一次完整的 html 页面 有悖于程序员的&#x3D;&#x3D;”DRY(Don&#96;t repeat yourself)”&#x3D;&#x3D;原则 如果短时间访问过多 对服务器造成一定的访问压力</h2><ul>
<li>一些常见的 api 需要先对运行环境判断再使用</li>
</ul>
</li>
</ul>
<p>前后端分离</p>
<ul>
<li>优点:<ul>
<li>前端专注于 ui 界面的开发 后端专注于 api 的开发 单一</li>
<li>体验更好</li>
</ul>
</li>
<li>缺点:<ul>
<li>第一次响应内容较慢 不如服务端渲染快</li>
<li>不利于 SEO 优化 只是记录一个页面 对于 SEO 较差</li>
</ul>
</li>
</ul>
<h2 id="38-说说你对-HTTP-协议的理解"><a href="#38-说说你对-HTTP-协议的理解" class="headerlink" title="38. 说说你对 HTTP 协议的理解"></a>38. 说说你对 HTTP 协议的理解</h2><p>http</p>
<ul>
<li>HyperText Transfer Protocol 超文本传输协议</li>
<li>超文本传输协议是一种用于分布式协作式的应用层协议</li>
<li>定义了客户端和服务器之间交换报文的格式和方式 默认为 80 端口</li>
<li>使用 tcp 作为传输层协议 保证了数据的可靠性</li>
</ul>
<p>组成:<code>一个HTTP请求主要包括: 请求和响应</code></p>
<ul>
<li><p>请求</p>
<ul>
<li><p>主要包含: 请求行 请求头 请求体</p>
</li>
<li><p>请求行:</p>
<ul>
<li><p>请求方法字段</p>
</li>
<li><p>URL 字段</p>
</li>
<li><p>HTTP 协议版本字段</p>
</li>
<li><pre><code class="js">GET/index.html HTTP/1.1
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 请求头:</span><br><span class="line"></span><br><span class="line">    - 键值对组成</span><br><span class="line">    - User-Agent: 对应展示的浏览器的类型</span><br><span class="line">    - Content-type: 对应的请求内容的数据类型</span><br><span class="line">      - application/x-www-form-urlencoded 数据以&amp;分割 的键值对 键值对用=分割</span><br><span class="line">      - application/json json 类型</span><br><span class="line">      - application/xml xml 类型</span><br><span class="line">      - text/plain 文本类型</span><br><span class="line">      - multipart/form-data 表示上传文件</span><br><span class="line">    - keep-alive</span><br><span class="line"></span><br><span class="line">  - 请求体: get/post 所带的内容</span><br><span class="line"></span><br><span class="line">- 响应</span><br><span class="line"></span><br><span class="line">  - 响应行</span><br><span class="line"></span><br><span class="line">    - 由协议版本 状态码 状态码的原因短语组成</span><br><span class="line"></span><br><span class="line">    - ```js</span><br><span class="line">      HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>响应头</p>
</li>
<li><p>响应体</p>
</li>
</ul>
</li>
</ul>
<p>请求方法</p>
<ul>
<li>get 向服务器获取数据</li>
<li>post 将响应实体交给指定的资源</li>
<li>head 请求一个与 get 请求响应相同的响应 没有实体</li>
<li>put 上传文件 用于替换目标资源的所有</li>
<li>patch 用于对资源的部分修改</li>
<li>delete 删除指定的资源</li>
<li>connect: 建立一个到目标资源标识的服务器的隧道 通常用于代理服务器</li>
<li>track: 回显服务器收到的请求 主要用于测试和诊断</li>
</ul>
<p>响应状态码</p>
<ul>
<li>200 表示请求被服务器端正常处理</li>
<li>201 post 请求 创建新的资源</li>
<li>301 永久重定向 表示资源被分配了新的 URI 并返回该 URI</li>
<li>4xx 表示客户端发生错误<ul>
<li>400 请求报文存在语法错误</li>
<li>401 未授权的错误 必须携带身份信息</li>
<li>403 没有权限访问</li>
<li>404 服务器找不到请求资源</li>
</ul>
</li>
<li>5xx 服务器错误<ul>
<li>500</li>
<li>503 服务器不可用 处于维护或重载状态</li>
</ul>
</li>
</ul>
<h2 id="39-封装-XMLHttpRequest-网络请求"><a href="#39-封装-XMLHttpRequest-网络请求" class="headerlink" title="39. 封装 XMLHttpRequest 网络请求"></a>39. 封装 XMLHttpRequest 网络请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理urlencoded字符串格式问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryStringify</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) str += <span class="string">`<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;obj[k]&#125;</span>&amp;`</span>;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 ajax</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">//默认配置</span></span><br><span class="line">  <span class="keyword">let</span> defaultoptions = &#123;</span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="comment">//是否异步</span></span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//请求携带的信息</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">//请求头</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">//请求成功的回调</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">//请求失败的回调</span></span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//从你传进来的options配置对象中，解构赋值</span></span><br><span class="line">  <span class="keyword">let</span> &#123; url, method, <span class="keyword">async</span>, data, headers, success, error &#125; = &#123;</span><br><span class="line">    ...defaultoptions,</span><br><span class="line">    ...options,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="comment">//?.先判断？前的变量是否存在，存在则执行后续操作，不存在则不执行</span></span><br><span class="line">    <span class="comment">//请求头是否设置了Content-type 如果设置了再判断是否有json</span></span><br><span class="line">    headers[<span class="string">&#x27;Content-type&#x27;</span>]?.<span class="title function_">indexOf</span>(<span class="string">&#x27;json&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">//如果请求的信息为对象且请求头设置了链接类型 表明是post请求而且是json字符串的数据发送</span></span><br><span class="line">    data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//否则用urlencoded 查询字符串格式</span></span><br><span class="line">    data = <span class="title function_">queryStringify</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是 get 请求, 并且有参数, 那么直接组装一下 url 信息</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^get$/i</span>.<span class="title function_">test</span>(method) &amp;&amp; data) url += <span class="string">&#x27;?&#x27;</span> + data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 发送请求</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(method, url, <span class="keyword">async</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">      <span class="title function_">error</span>(<span class="string">`错误状态码:<span class="subst">$&#123;xhr.status&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行解析</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">      <span class="title function_">success</span>(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">error</span>(<span class="string">&#x27;解析失败 ! 因为后端返回的结果不是 json 格式字符串&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置请求头内的信息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> headers) xhr.<span class="title function_">setRequestHeader</span>(k, headers[k]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^get$/i</span>.<span class="title function_">test</span>(method)) &#123;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr.<span class="title function_">send</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Pajax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">// const p = new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   ajax(&#123;</span></span><br><span class="line">  <span class="comment">//     ...options,</span></span><br><span class="line">  <span class="comment">//     success: function (res) &#123;</span></span><br><span class="line">  <span class="comment">//       resolve(res);</span></span><br><span class="line">  <span class="comment">//     &#125;,</span></span><br><span class="line">  <span class="comment">//     error: function (err) &#123;</span></span><br><span class="line">  <span class="comment">//       reject(err);</span></span><br><span class="line">  <span class="comment">//     &#125;,</span></span><br><span class="line">  <span class="comment">//   &#125;);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="comment">// return p;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      ...options,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Pajax</span> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="40-说说-XMLHttpRequest-和-Fetch-请求的异同"><a href="#40-说说-XMLHttpRequest-和-Fetch-请求的异同" class="headerlink" title="40. 说说 XMLHttpRequest 和 Fetch 请求的异同"></a>40. 说说 XMLHttpRequest 和 Fetch 请求的异同</h2><p>Fecth 提供了一种更加现代的处理方案</p>
<ul>
<li>比如返回一个值是<code>Promise</code><ul>
<li>在请求成功时调用 resolve 回调</li>
</ul>
</li>
<li>与 XMLHttpRequest 不同 不用把所有操作放在同一个对象上</li>
<li>语法简单 更加语义化</li>
<li>基于标准的 promise 实现 支持 async&#x2F;await</li>
<li>更加底层</li>
</ul>
<p>Fetch 缺点</p>
<ul>
<li>不支持 abort(超时取消请求) 不支持超时控制</li>
<li>没有办法检测请求进度 XHR 可以</li>
<li>默认不会携带 cookie</li>
</ul>
<p>ajax 缺点</p>
<ul>
<li>使用起来比较繁琐</li>
</ul>
<h2 id="41-从哪些点进行性能优化"><a href="#41-从哪些点进行性能优化" class="headerlink" title="41.从哪些点进行性能优化?"></a>41.从哪些点进行性能优化?</h2><p>加载:</p>
<ol>
<li>减少http请求(精灵图)</li>
<li>减少文件大小(资源压缩,图片压缩,代码压缩)</li>
<li>CDN(第三方库,大文件,大图)</li>
<li>预加载,ssr服务端渲染</li>
<li>懒加载</li>
<li>分包(按需加载)</li>
</ol>
<p>性能:</p>
<p>1.减少dom操作,避免回流,文档碎片</p>
<p>性能分析:</p>
<ol>
<li>页面加载性能</li>
<li>动画与操作性能</li>
<li>内存占用</li>
<li>电量消耗</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记25-迭代器与生成器</title>
    <url>/2022/05/19/b31%20%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8%20/</url>
    <content><![CDATA[<h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器 "></a>迭代器和生成器 <span id="more"></span></h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器就是帮助我们对某种数据结构进行遍历的<strong>对象</strong><br>在 js 中，迭代器是一个对象，这个对象要符合迭代器协议(iterator protocol):定义产生一系列值的标准方式，在 js 中就是一个特定的 next 方法。而且这个方法有如下要求</p>
<ol>
<li>无参数或者一个参数的函数，</li>
<li>返回一个应当有以下两个属性的对象<br>done(boolean)<br>是否迭代完成 true 已经迭代完成 false 没有完成<br>value<br>迭代器返回的值，done 为 true 的时候可以省略</li>
</ol>
<h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h2><p>当一个对象实现了 iterator protocol 协议(接口)，他就是一个可迭代对象，这个对象要求必须实现<code>[Symbol.iterator]</code>方法，而且这个方法要返回一个迭代器。那么这个对象才叫可迭代对象，目前可迭代对象的用处，可以 for…of</p>
<h3 id="创建一个可迭代对象"><a href="#创建一个可迭代对象" class="headerlink" title="创建一个可迭代对象"></a>创建一个可迭代对象</h3><p>infos变成可迭代对象 迭代器+容器放到一个对象里面</p>
<ol>
<li><p>必须实现特定的函数: [Symbol.iterator]</p>
</li>
<li><p>这个函数要返回一个迭代器，这个迭代器用于迭代当前对象</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> infos = &#123;</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;双面龟&#x27;</span>, <span class="string">&#x27;沸羊羊&#x27;</span>, <span class="string">&#x27;黑小虎&#x27;</span>],</span><br><span class="line">  <span class="comment">//这个属性名，叫做[Symbol.iterator]</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> infosIterator = &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; infos.<span class="property">friends</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: infos.<span class="property">friends</span>[index++] &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> infosIterator;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="可迭代对象的优化"><a href="#可迭代对象的优化" class="headerlink" title="可迭代对象的优化"></a>可迭代对象的优化</h3><ol>
<li><p>不使用对象的标识符，而是使用this,需要改</p>
</li>
<li><p>函数的名字必须是[Symbol.iterator]</p>
</li>
<li><p>不仅仅只能迭代friends，还可以迭代key&#x2F;value…取决于需求</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> infos = &#123;</span><br><span class="line">        <span class="attr">friends</span>: [<span class="string">&#x27;双面龟&#x27;</span>, <span class="string">&#x27;沸羊羊&#x27;</span>, <span class="string">&#x27;黑小虎&#x27;</span>],</span><br><span class="line"></span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">          <span class="comment">// console.log(this);</span></span><br><span class="line">          <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">const</span> infosIterator = &#123;</span><br><span class="line">              <span class="comment">//使用箭头函数将改变this变成当前的对象</span></span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// console.log(this);</span></span><br><span class="line">              <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">friends</span>[index++] &#125;;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">return</span> infosIterator;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> objDDQ = infos[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">          <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">          <span class="comment">// const keys = Object.keys(this)</span></span><br><span class="line">          <span class="comment">// const values = Object.values(this)</span></span><br><span class="line">            <span class="comment">//使用object.entries()将对象内的键值对转成数组</span></span><br><span class="line">          <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="variable language_">this</span>);</span><br><span class="line">          <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (index &lt; entries.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: entries[index++] &#125;;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">return</span> iterator;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="comment">//将返回的数组用解构拿到</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> [key, value] = item;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;---&#x27;</span> + value);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<h3 id="原生可迭代对象"><a href="#原生可迭代对象" class="headerlink" title="原生可迭代对象"></a>原生可迭代对象</h3><ol>
<li><p>String</p>
</li>
<li><p>Array</p>
</li>
<li><p>Map</p>
</li>
<li><p>Set</p>
</li>
<li><p>arguments</p>
</li>
<li><p>NodeList</p>
</li>
</ol>
<p>这些对象自带迭代方法,也就是可以用<code>for...of</code>方法</p>
<h3 id="可迭代对象的应用"><a href="#可迭代对象的应用" class="headerlink" title="可迭代对象的应用"></a>可迭代对象的应用</h3><ol>
<li><p>在js的语法<code>for...of  </code>展开语法<code>(spread syntax)  yield*  </code>解构赋值</p>
</li>
<li><p>创建一些对象 Map，WeakMap ，Set，WeakSet</p>
</li>
<li><p>一些方法的调用 <code>Promise.all(iterable),Promise.race,Array.from()</code></p>
</li>
</ol>
<h3 id="自定义类的迭代"><a href="#自定义类的迭代" class="headerlink" title="自定义类的迭代"></a>自定义类的迭代</h3><p>基本上类的迭代和可迭代对象的生成一致,注意方法不要放在constructer里面,单独拿出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个classroom类，教室有自己的位置，名称，当前的学生，这个教室可以进来新的学生(pushStu),创建的教室是可迭代对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassRoom</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address, name, students</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = address;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span> = students;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pushStu</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">push</span>(stu);</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">students</span>[index++] &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> iterator;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c1 = <span class="keyword">new</span> <span class="title class_">ClassRoom</span>(<span class="string">&#x27;2401&#x27;</span>, <span class="string">&#x27;龙虎班&#x27;</span>, [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;黑小虎&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="property">students</span>);</span><br><span class="line">c1.<span class="title function_">pushStu</span>(<span class="string">&#x27;alex2222&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="property">students</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> stu <span class="keyword">of</span> c1) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="设置生成器"><a href="#设置生成器" class="headerlink" title="设置生成器"></a>设置生成器</h3><p>生成器是 es6 新增的一种<strong>函数控制、使用</strong>的方案，它可以让我们更加灵活的去控制函数什么时候<strong>继续执行，什么时候暂停执行</strong>。</p>
<p>生成器函数</p>
<ol>
<li>生成器函数需要在 function 后面加一个<code>*</code>号</li>
<li>生成器函数可以通过<strong>yield</strong>关键字来控制执行</li>
<li>生成器函数的返回值是一个生成器<br>生成器实际上是一种特殊的迭代器</li>
</ol>
<p>例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">yield</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">yield</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//调用生成器函数，返回一个生成器对象给你，而不会执行函数体内任何一行代码</span></span><br><span class="line">      <span class="keyword">const</span> generator = <span class="title function_">foo</span>();</span><br><span class="line">      generator.<span class="title function_">next</span>();</span><br><span class="line">      generator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure>

<h3 id="生成器的参数返回值"><a href="#生成器的参数返回值" class="headerlink" title="生成器的参数返回值"></a>生成器的参数返回值</h3><p>Yeild可以理解成是一个小return,yeild可以像return一样返回参数</p>
<p>而且,在使用next的时候也会像向yield传递参数作为下一次生成的的参数,但是要定义一个变量去接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">name1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, name1);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>, name1);</span><br><span class="line">        <span class="comment">//跟在yield后面的值 就会传递给next返回的对象的value</span></span><br><span class="line">        <span class="keyword">const</span> name2 = <span class="keyword">yield</span> <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>, name2);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>, name2);</span><br><span class="line">        <span class="comment">// return &#x27;bbb&#x27;;</span></span><br><span class="line">        <span class="keyword">const</span> name3 = <span class="keyword">yield</span> <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>, name3);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>, name3);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> generator = <span class="title function_">foo</span>(<span class="string">&#x27;第一次调用next&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>());</span><br><span class="line">      <span class="comment">// console.log(generator.return(&#x27;第二次调用next～～～结束&#x27;));</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>(<span class="string">&#x27;第三次调用next~~~&#x27;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="生成器代替迭代器"><a href="#生成器代替迭代器" class="headerlink" title="生成器代替迭代器"></a>生成器代替迭代器</h3><p>生成器就是一种特殊的迭代器,上面说到yeild有返回值的</p>
<p>也就是每一次使用<code>next()</code>,都会做一次迭代的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">createArrayIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// yield arr[0];</span></span><br><span class="line">  <span class="comment">// yield arr[1];</span></span><br><span class="line">  <span class="comment">// yield arr[2];</span></span><br><span class="line">  <span class="comment">// let index = 0;</span></span><br><span class="line">  <span class="comment">// return &#123;</span></span><br><span class="line">  <span class="comment">//   next() &#123;</span></span><br><span class="line">  <span class="comment">//     if (index &lt; arr.length) &#123;</span></span><br><span class="line">  <span class="comment">//       return &#123; done: false, value: arr[index++] &#125;;</span></span><br><span class="line">  <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//       return &#123; done: true &#125;;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>甚至乎,我们可以将for循环也省略掉,因为js给我们提供了一个语法糖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成器就是一种特殊的迭代器</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">createArrayIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// for (let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line">  <span class="comment">//   yield arr[i];</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//每次next的时候自动迭代一个可迭代对象</span></span><br><span class="line">  <span class="comment">//yield* 后面必须是一个可迭代对象</span></span><br><span class="line">  <span class="keyword">yield</span>* arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记24-promise详解</title>
    <url>/2022/05/17/b30%20promise/</url>
    <content><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise<span id="more"></span></h1><h2 id="Promise-的概念"><a href="#Promise-的概念" class="headerlink" title="Promise 的概念"></a>Promise 的概念</h2><p>Promise 是一个类，承诺，许诺<br>当我们需要的时候，给予调用者一个承诺，待会给你回调的数据，就可以来创建一个 promise 的实例<br>通过 new 创建 Promise 对象的时候，传入了一个回调函数，称为<strong>executor</strong></p>
<ul>
<li>这个回调函数会被立即执行，并且接受另外的两个回调函数 resolve，reject</li>
<li>当我们调用 resolve 时，会<strong>执行</strong> promise 对象的 then 方法传入的<strong>回调函数</strong></li>
<li>当我们调用 reject 时,会<strong>执行</strong> promise 对象的 catch 方法传入的<strong>回调函数</strong></li>
</ul>
<h3 id="异步代码的困境"><a href="#异步代码的困境" class="headerlink" title="异步代码的困境"></a>异步代码的困境</h3><p>没用promise之前，我们需要给一个异步函数传入成功后的回调函数以及失败后的回调函数。</p>
<p>那么，每个人的编码习惯不同，有的时候回调函数并不是自己写的,没有一个统一的规范，设计和调用的时候都需要小心翼翼</p>
<p>在异步函数传参的时候就需要小心翼翼，不然就会出错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">order</span>(<span class="params">money, good, bad</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="title function_">bad</span>(<span class="string">&#x27;请付款后再食用&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;餐好了&#x27;</span>);</span><br><span class="line">                        <span class="comment">//积分</span></span><br><span class="line">                        <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; money; i++) &#123;</span><br><span class="line">                            total += i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//只需要在某个时刻调用你的函数即可</span></span><br><span class="line">                        <span class="title function_">good</span>(total);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>而且，异步函数调用时，代码数量非常多，不利于阅读和维护</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">order</span>(</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="string">&#x27;alex的🍗好了&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;本次消费获得了&#x27;</span> + value + <span class="string">&#x27;积分&#x27;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下单失败，原因是:&#x27;</span> + err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="使用promise来解决异步的回调问题"><a href="#使用promise来解决异步的回调问题" class="headerlink" title="使用promise来解决异步的回调问题"></a>使用promise来解决异步的回调问题</h3><blockquote>
<p>一个标准的promise结构，所谓 Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">order</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= value; i++) &#123;</span><br><span class="line">                                total = i;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="title function_">resolve</span>(<span class="string">&#x27;点餐成功，你还有&#x27;</span> + total + <span class="string">&#x27;分&#x27;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(<span class="string">&#x27;点餐失败，你的钱不够&#x27;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">order</span>(<span class="number">100</span>)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>

<p>promise接受两个参数，一个是操作完成（已兑现<code>resolve</code>）的时候将会执行的回调函数，一个是操作失败（已失败<code>reject</code>）的时候将会执行的回调函数。</p>
<p>创建promise实例对象后，要使用它的时候，可以在后面<code>.then(resolve)</code>代表接受函数兑现后返回的参数，再做进一步操作。<code>.catch（reject）</code>则是接受失败时传来的参数，再做进一步操作。</p>
<h2 id="promise-的三个状态"><a href="#promise-的三个状态" class="headerlink" title="promise 的三个状态"></a>promise 的三个状态</h2><ul>
<li>待定(pending):初始状态，即没有被兑现，也没有被拒绝；当执行 executor 中的代码时，处于该状态。</li>
<li>已兑现(fulfilled):意味着操作完成，执行了 resolve，处于该状态的话 promise 已经被兑现了</li>
<li>已拒绝(rejected):意味着操作失败，执行了 reject，处于该状态的话 promise 已经被拒绝了</li>
</ul>
<h3 id="executor"><a href="#executor" class="headerlink" title="executor"></a>executor</h3><p>我们往往会在 executor 中确定 promise 的状态-叫已决议<br>注意：<strong>一旦状态被确定下来，Promise 状态就会被锁死 🔒，该 Promise 的状态就不可变</strong>，在我们调用 resolve 的时候，如果 resolve 的值不是一个 Promise，那么会将该 Promise 的状态变成成功。resolve 调用之后再 reject 调用，reject 的代码会执行，但是不会改变 Promise 的状态，并不是不执行代码.</p>
<p>promise的状态一旦被确定下来，就不会再更改，也不能再执行某一个回调函数来改变状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//细节</span></span><br><span class="line">      <span class="comment">// //创建一个promise对象</span></span><br><span class="line">      <span class="comment">// const promise = new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   //细节一:多次resolve会怎么样 只走一次then</span></span><br><span class="line">      <span class="comment">//   // resolve();</span></span><br><span class="line">      <span class="comment">//   // resolve();</span></span><br><span class="line">      <span class="comment">//   // resolve();</span></span><br><span class="line">      <span class="comment">//   // reject();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//   //细节二:resolve以后我再reject 先走那个状态就已经确定了</span></span><br><span class="line">      <span class="comment">//   reject();</span></span><br><span class="line">      <span class="comment">//   // resolve();</span></span><br><span class="line">      <span class="comment">//   // console.log(&#x27;123123123&#x27;);</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">      <span class="comment">// //调用对象里面方法,只不过这个方法比较特殊，是一个回调函数</span></span><br><span class="line">      <span class="comment">// promise</span></span><br><span class="line">      <span class="comment">//   .then((value) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//     console.log(&#x27;成功&#x27;);</span></span><br><span class="line">      <span class="comment">//   &#125;)</span></span><br><span class="line">      <span class="comment">//   .catch(() =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//     console.log(&#x27;失败&#x27;);</span></span><br><span class="line">      <span class="comment">//   &#125;);</span></span><br></pre></td></tr></table></figure>





<h2 id="resolve-参数的三种情况"><a href="#resolve-参数的三种情况" class="headerlink" title="resolve 参数的三种情况"></a>resolve 参数的三种情况</h2><p>resolve里的值会有三种情况，分别是普通值、<code>promise</code>以及thenable对象</p>
<ol>
<li>promise对象，如果你resolve中回调是一个promise对象，当前的promise的状态就由回调的<code>promise</code>的状态来决定</li>
<li>thenable对象，传入的是一个对象，只不过这个对象自己有then方法,promise状态就根据then里面的操作来决定</li>
</ol>
<h2 id="promise的then方法"><a href="#promise的then方法" class="headerlink" title="promise的then方法"></a>promise的then方法</h2><ol>
<li><p>then 方法是返回一个<strong>全新的 promise</strong>，这个 promise 他的状态是等到 then 传入的回调函数有返回值时，再进行决议。</p>
</li>
<li><p>由于then是返回一个promise，所以then又可以接收<code>resolve</code>, 又可以接收<code>reject</code></p>
</li>
</ol>
<blockquote>
<p>一个promise要接收两个回调函数（resolve和reject）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>, res);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p>当一个<code>promise</code>的状态发生改变，then设置的回调函数就会同步执行（如果采用的是链式调用,即<code>.then(a).then(b)</code>那当然后一个then要等前一个then执行后返回的参数过来，他才开始执行，如果前一个then里的promise的状态是<code>rejected</code>那么后面的then则都不会执行。</p>
</li>
<li><p>如果在一堆的then的链式调用后跟了一个catch，即<code>.then(a).then(b).catch(c)</code>这个catch则会响应最早返回<code>reject</code>的then或者初始的<code>promise</code></p>
</li>
<li><p>then 方法是返回一个<strong>全新的 promise</strong>，这个新的promise resolve后<code>return</code>的值的会传递给下一个then的回调</p>
</li>
</ol>
<h2 id="promise的catch方法"><a href="#promise的catch方法" class="headerlink" title="promise的catch方法"></a>promise的catch方法</h2><ol>
<li>和then方法一样，catch也会返回一个全新的promise</li>
<li>catch方法的执行时机 catch会找最先reject的promise 捕获他</li>
</ol>
<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>ES9(ES2018)中新增的一个特性，无论你的 promise 对象是 fulfilled 还是 rejected 状态，最终都要执行的代码。finally 不接收参数。</p>
<h2 id="promise的类方法"><a href="#promise的类方法" class="headerlink" title="promise的类方法"></a>promise的类方法</h2><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><p>最大的作用，就是把一个<strong>现成的内容转成 Promise</strong>来使用,就可以使用 Promise.resolve。<br>作为 resolve 来说，他的参数是有三种情况,如上文所述</p>
<h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h3><p>reject 方法类似于 resolve<br><strong>注意:不管传入 Promise.reject 的参数是何种形式，都会直接作为 rejected 状态给到 catch 的回调</strong></p>
<h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>它的作用是将多个 promise 包裹在一起，形成一个新的 promise；新的 Promise 状态由包裹所有 promise 的状态共同决定；<br>所有的 promise fulfilled -&gt;all fulfilled 并且会将所有 promise 的返回值组成一个数组<br>当有一个 reject -&gt; all rejected,并且会将第一个 reject 的当作参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有的promise 都成功&#x27;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个失败了，原因&#x27;</span> + err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled"></a>allSettled</h3><p>all 的缺陷，多个 promise 只要有一个失败，整个 all 的 promise 就会 rejected。那么对于其他可能 resolved 请求或者仍然处于 pending 状态的请求，拿不到结果了。</p>
<p>ES11 出现的,该方法会在所有的 promise 都有结果(settled)，无论你是失败还是成功，才会有最终的状态，并且这个状态一定是成功 fulfilled 的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xp = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2, p3])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有的promise 都成功&#x27;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有一个失败了，原因&#x27;</span> + err);</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xp);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><p>如果多个 promise 中，有一个有了结果，我们就希望用这个来决定最终的 promise 的状态，那就用 race。<br>谁的结果先出来，我就用谁的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>, err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>



<h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>race 永远拿最先的，可能是好的也可能是坏的。有些时候我们想要只拿好的<br>ES12,any 方法会等到一个 fulfilled 状态，才来决定新的 promise 的状态<br>如果所有的 promise 都是坏的，那他也会等所有的都 rejected</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([p1, p2, p3])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//内部报一个错误</span></span><br><span class="line">          <span class="comment">//AggregateError: All promises were rejected</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>, err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记22-ES7~ES13的功能</title>
    <url>/2022/05/15/b28%20ES7-ES13/</url>
    <content><![CDATA[<h2 id="1-ES7"><a href="#1-ES7" class="headerlink" title="1. ES7"></a>1. ES7<span id="more"></span></h2><h3 id="1-1-Array-includes"><a href="#1-1-Array-includes" class="headerlink" title="1.1 Array includes"></a>1.1 Array includes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;fish&#x27;</span>];</span><br><span class="line">pets.<span class="title function_">includes</span>(<span class="string">&#x27;cat&#x27;</span>); <span class="comment">//true</span></span><br><span class="line">pets.<span class="title function_">includes</span>(<span class="string">&#x27;alex&#x27;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-指数运算符"><a href="#1-2-指数运算符" class="headerlink" title="1.2 指数运算符"></a>1.2 指数运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res1 = math.<span class="title function_">pow</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = <span class="number">3</span> ** <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-ES8"><a href="#2-ES8" class="headerlink" title="2.ES8"></a>2.ES8</h2><h3 id="2-1-对象相关的"><a href="#2-1-对象相关的" class="headerlink" title="2.1 对象相关的"></a>2.1 对象相关的</h3><p>Object.values - Object.keys<br>Object.entries 获取到一个数组，数组里面存放 key-value 数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&#x27;天河阔少&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entries);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entries) &#123;</span><br><span class="line">  <span class="comment">// console.log(entry);</span></span><br><span class="line">  <span class="keyword">const</span> [key, value] = entry;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对数组，字符串用(了解)</span></span><br><span class="line"><span class="comment">// [&#x27;abc&#x27;,&#x27;cba&#x27;]-&gt;[[0,&#x27;abc&#x27;],[1,&#x27;cba&#x27;]]</span></span><br><span class="line"><span class="comment">// &#x27;abc&#x27;-&gt;[[0,&#x27;a&#x27;],[1,&#x27;b&#x27;],[2,&#x27;c&#x27;]]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-字符串填充方法"><a href="#2-2-字符串填充方法" class="headerlink" title="2.2 字符串填充方法"></a>2.2 字符串填充方法</h3><p>某些字符串需要我们来前后填充-实现格式化的效果 padStart,padEnd</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">padStart</span>(targetLength [, padString])</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//padStart padEnd</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.对时间格式化</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> minute = <span class="string">&#x27;15&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> second = <span class="string">&#x27;6&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//敏感数据隐藏</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> cardNumber = <span class="string">&#x27;1231231231219991223&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> sliceNumber = cardNumber.<span class="title function_">slice</span>(-<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">  cardNumber = sliceNumber.<span class="title function_">padStart</span>(cardNumber.<span class="property">length</span>, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> card = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.card&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  card.<span class="property">textContent</span> = cardNumber;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-尾部逗号添加"><a href="#2-3-尾部逗号添加" class="headerlink" title="2.3 尾部逗号添加"></a>2.3 尾部逗号添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function foo(num1,num2,)&#123;</span></span><br><span class="line"><span class="comment">//   console.log(num1,num2)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// foo(10,20,)</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-Async-Function"><a href="#2-4-Async-Function" class="headerlink" title="2.4 Async Function"></a>2.4 Async Function</h3><p>讲完 Promise 再讲 async…await</p>
<h2 id="3-ES9-新增知识点"><a href="#3-ES9-新增知识点" class="headerlink" title="3. ES9 新增知识点"></a>3. ES9 新增知识点</h2><p>Iterator:迭代器<br>展开运算符:讲过了<br>Promise finally:放到 promise</p>
<h2 id="4-ES10"><a href="#4-ES10" class="headerlink" title="4. ES10"></a>4. ES10</h2><h3 id="4-1-ES10-flat-和-flatMap"><a href="#4-1-ES10-flat-和-flatMap" class="headerlink" title="4.1 ES10 flat 和 flatMap"></a>4.1 ES10 flat 和 flatMap</h3><p>flat 数组扁平化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flat</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>()); <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">flat</span>()); <span class="comment">//[1, 2, 3, 4,[5,6]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">flat</span>(<span class="number">2</span>)); <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)); <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="comment">//思考题,能够拍扁任意纬度的数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFlat</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>flatMap()方法首先使用映射函数映射每个元素，然后将结果压成一个新数组。</p>
<p>注意一:先 map，然后 flat<br>注意二:flatMap 中的深度相当于 flat(1)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msgs = [<span class="string">&#x27;hello world aaaaa&#x27;</span>, <span class="string">&#x27;hello alex&#x27;</span>, <span class="string">&#x27;你好 我好&#x27;</span>];</span><br><span class="line"><span class="comment">//我想得到[Array(3),Array(2),Array(2)]</span></span><br><span class="line"><span class="comment">//再展开[&#x27;hello&#x27;,&#x27;world&#x27;,&#x27;aaaaa&#x27;,&#x27;hello&#x27;,&#x27;alex&#x27;,&#x27;你好&#x27;,&#x27;我好&#x27;]</span></span><br><span class="line"><span class="keyword">const</span> infoMsg = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> msgs) &#123;</span><br><span class="line">  <span class="keyword">const</span> infos = item.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> info <span class="keyword">of</span> infos) &#123;</span><br><span class="line">    infoMsg.<span class="title function_">push</span>(info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(infoMsg);</span><br><span class="line"><span class="comment">//2. flatMap</span></span><br><span class="line"><span class="comment">// const newMsgs = msgs.map((ele) =&gt; ele.split(&#x27; &#x27;));</span></span><br><span class="line"><span class="comment">// const finalMsgs = newMsgs.flat(1);</span></span><br><span class="line"><span class="comment">// console.log(finalMsgs);</span></span><br><span class="line"><span class="keyword">const</span> finalMsgs = msgs.<span class="title function_">flatMap</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalMsgs);</span><br><span class="line"><span class="comment">//删除所有负数，并且把奇数拆成偶数+1</span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">5</span>, <span class="number">4</span>, -<span class="number">3</span>, <span class="number">20</span>, <span class="number">17</span>, -<span class="number">33</span>, -<span class="number">4</span>, <span class="number">18</span>];</span><br><span class="line"><span class="comment">//         |\  \  x   |  | \   x   x   |</span></span><br><span class="line"><span class="comment">//        [4,1, 4,   20, 16, 1,       18]</span></span><br><span class="line"><span class="comment">//[1,[]].flat(1) =&gt;[1]</span></span><br><span class="line"><span class="keyword">const</span> res = a.<span class="title function_">flatMap</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// if (ele &lt; 0) &#123;</span></span><br><span class="line">  <span class="comment">//   return [];</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//   //ele是删除负数以后的数组</span></span><br><span class="line">  <span class="comment">//   if (ele % 2 === 0) &#123;</span></span><br><span class="line">  <span class="comment">//     return [ele];</span></span><br><span class="line">  <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     return [ele - 1, 1];</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//删除负数</span></span><br><span class="line">  <span class="keyword">if</span> (ele &lt; <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="comment">//判断奇偶</span></span><br><span class="line">  <span class="keyword">return</span> ele % <span class="number">2</span> === <span class="number">0</span> ? [ele] : [ele - <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h3 id="4-2-Object-fromEntries"><a href="#4-2-Object-fromEntries" class="headerlink" title="4.2 Object.fromEntries"></a>4.2 Object.fromEntries</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&#x27;敏感肌也能用&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entries);</span><br><span class="line"><span class="keyword">const</span> originObj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(entries);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originObj);</span><br><span class="line"><span class="comment">//应用场景，搜索字符串</span></span><br><span class="line"><span class="keyword">const</span> searchString = <span class="string">`?name=alex&amp;age=18&amp;height=1.88`</span>;</span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(searchString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span><br><span class="line"><span class="comment">//obj.name obj.age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> paramsObj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(params);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paramsObj);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-trimStart、trimEnd"><a href="#4-3-trimStart、trimEnd" class="headerlink" title="4.3 trimStart、trimEnd"></a>4.3 trimStart、trimEnd</h3><p>去除字符串首尾空格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;         alex         &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">trim</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">trimStart</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">trimEnd</span>());</span><br></pre></td></tr></table></figure>

<h3 id="4-4-其他知识点"><a href="#4-4-其他知识点" class="headerlink" title="4.4 其他知识点"></a>4.4 其他知识点</h3><p>Symbol 的描述符 - 讲过<br>catch 操作- 后面 try catch 讲</p>
<h2 id="5-ES11"><a href="#5-ES11" class="headerlink" title="5.ES11"></a>5.ES11</h2><h3 id="5-1-BigInt-大数字"><a href="#5-1-BigInt-大数字" class="headerlink" title="5.1 BigInt 大数字"></a>5.1 BigInt 大数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>); <span class="comment">//9007199254740991</span></span><br><span class="line"><span class="keyword">const</span> num1 = <span class="number">9007199254740991123123123123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="number">9007199254740991123123123123n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">9007199254740991</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9007199254740991</span>;</span><br><span class="line"><span class="comment">//思考题2:数组/字符串 位运算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a * b);</span><br></pre></td></tr></table></figure>

<h3 id="5-2-空值合并运算符"><a href="#5-2-空值合并运算符" class="headerlink" title="5.2 空值合并运算符??"></a>5.2 空值合并运算符??</h3><p>如果左侧为null或者undefined,那么就会返回右侧的默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> info = <span class="literal">null</span>;</span><br><span class="line">info = info || <span class="string">&#x27;默认值&#x27;</span>;</span><br><span class="line">info = info ?? <span class="string">&#x27;默认值&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-可选链"><a href="#5-3-可选链" class="headerlink" title="5.3 可选链 ?."></a>5.3 可选链 ?.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="comment">// running() &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;狂奔&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可以调用 但是非常危险</span></span><br><span class="line"><span class="comment">// obj.friend.running();</span></span><br><span class="line"><span class="keyword">if</span> (obj.<span class="property">friend</span> &amp;&amp; obj.<span class="property">friend</span>.<span class="property">running</span>) &#123;</span><br><span class="line">  obj.<span class="property">friend</span>.<span class="title function_">running</span>();</span><br><span class="line">&#125;</span><br><span class="line">obj?.<span class="property">friend</span>?.<span class="property">running</span>?.();</span><br></pre></td></tr></table></figure>

<h3 id="5-4-Global-This"><a href="#5-4-Global-This" class="headerlink" title="5.4 Global This"></a>5.4 Global This</h3><p>统一浏览器(this)和 node(global）中的全局对象-globalThis</p>
<h3 id="5-5-其他知识点"><a href="#5-5-其他知识点" class="headerlink" title="5.5 其他知识点"></a>5.5 其他知识点</h3><p>动态引入:放在模块化<br>Promise.allSettled:promise 讲解<br>import meta：放模块化</p>
<h2 id="6-ES12"><a href="#6-ES12" class="headerlink" title="6. ES12"></a>6. ES12</h2><h3 id="6-1-FinalizationRegistry"><a href="#6-1-FinalizationRegistry" class="headerlink" title="6.1 FinalizationRegistry"></a>6.1 FinalizationRegistry</h3><p>可以让你在对象被垃圾回收的时候请求一个回调<br>FinalizationRegistry 提供一个方法，当注册的对象被回收时，你可以调用一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强引用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="keyword">const</span> fr = <span class="keyword">new</span> <span class="title class_">FinalizationRegistry</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象被回收啦～～～:&#x27;</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">fr.<span class="title function_">register</span>(obj, <span class="string">&#x27;alex&#x27;</span>);</span><br><span class="line">fr.<span class="title function_">register</span>(info, <span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line">info = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-WeakRefs-弱引用"><a href="#6-2-WeakRefs-弱引用" class="headerlink" title="6.2 WeakRefs 弱引用"></a>6.2 WeakRefs 弱引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">name</span>: <span class="string">&#x27;aaa&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(info);</span><br><span class="line"><span class="keyword">const</span> fr = <span class="keyword">new</span> <span class="title class_">FinalizationRegistry</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象被回收啦～～～:&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line"></span><br><span class="line">fr.<span class="title function_">register</span>(info);</span><br><span class="line">info = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// console.log(obj.deref().name);</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-逻辑赋值运算符"><a href="#6-3-逻辑赋值运算符" class="headerlink" title="6.3 逻辑赋值运算符"></a>6.3 逻辑赋值运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">100</span>;</span><br><span class="line">count = count + <span class="number">100</span>;</span><br><span class="line">count += <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> msg;</span><br><span class="line">msg = msg || <span class="string">&#x27;默认值&#x27;</span>;</span><br><span class="line">msg ||= <span class="string">&#x27;默认值&#x27;</span>;</span><br><span class="line"><span class="comment">// &amp;&amp;=</span></span><br><span class="line"><span class="comment">// ??=</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-其他知识点"><a href="#6-4-其他知识点" class="headerlink" title="6.4 其他知识点"></a>6.4 其他知识点</h3><p>数字分割符号:<code>1_0000_0000</code><br>replaceAll</p>
<h2 id="7-ES13"><a href="#7-ES13" class="headerlink" title="7.ES13"></a>7.ES13</h2><h3 id="7-1-at"><a href="#7-1-at" class="headerlink" title="7.1 at()"></a>7.1 at()</h3><p>实际开发不要用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">names.<span class="title function_">at</span>(<span class="number">1</span>); <span class="comment">//b</span></span><br><span class="line">names.<span class="title function_">at</span>(-<span class="number">1</span>); <span class="comment">//&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str.<span class="title function_">at</span>(<span class="number">1</span>); <span class="comment">//e</span></span><br><span class="line">str.<span class="title function_">at</span>(-<span class="number">1</span>); <span class="comment">//o</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-hasOwn"><a href="#7-2-hasOwn" class="headerlink" title="7.2 hasOwn"></a>7.2 hasOwn</h3><p>hasOwnProperty</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以前判断原型上的东西</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="comment">//1.hasOwn防止对象中有一个自己的hasOwnProperty方法</span></span><br><span class="line">  <span class="title function_">hasOwnProperty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">__proto__</span>: &#123;</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;天河&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>, obj.<span class="property">address</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;address&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//es13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&#x27;address&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//2. 对于隐式原型指向null的对象，hasOwnProperty判断不了</span></span><br><span class="line"><span class="keyword">const</span> info = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">info.<span class="property">name</span> = <span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info); <span class="comment">//原型到头了 &#123;name:&#x27;jack&#x27;&#125;</span></span><br><span class="line"><span class="comment">// console.log(info.hasOwnProperty(&#x27;name&#x27;));</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(info, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-class-新增"><a href="#7-3-class-新增" class="headerlink" title="7.3 class 新增"></a>7.3 class 新增</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//实例对象的属性</span></span><br><span class="line">  <span class="comment">//创建出来的所有对象都有属性</span></span><br><span class="line">  <span class="comment">//public 公共的属性 public instance fields 公共实例字段</span></span><br><span class="line">  height = <span class="number">1.88</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对象属性 约定好的你不要动 私有的 private</span></span><br><span class="line">  <span class="comment">// _info = &#x27;name is alex&#x27;;</span></span><br><span class="line">  #info = <span class="string">&#x27;name is alex&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//类的公有属性</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title class_">Total</span> = <span class="string">&#x27;999999&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//类的私有属性</span></span><br><span class="line">  <span class="keyword">static</span> #mytotal = <span class="string">&#x27;88888&#x27;</span>;</span><br><span class="line">  <span class="comment">//以前写对象中的属性</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态代码块</span></span><br><span class="line">  <span class="comment">//解析你的代码的时候就执行一次</span></span><br><span class="line">  <span class="comment">//一般我们会在静态代码块里面做一些初始化的操作</span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">456</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(Person.Total, Person.#mytotal);</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// p._info = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(p.#info);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记23-Proxy与Reflect</title>
    <url>/2022/05/15/b29%20proxy_reflect/</url>
    <content><![CDATA[<h1 id="Proxy-Reflect"><a href="#Proxy-Reflect" class="headerlink" title="Proxy-Reflect"></a>Proxy-Reflect<span id="more"></span></h1><h2 id="监听对象的操作-ES5"><a href="#监听对象的操作-ES5" class="headerlink" title="监听对象的操作 ES5"></a>监听对象的操作 ES5</h2><p>首先<code>Object.defineProperty</code>设计的初衷，不是为了数据劫持和数据代理，也就是不是为了监听对象中所有的属性，详细地定义对象的属性，只不过我们的操作强行让它能够监听而已。其次我们想监听一些更加丰富的操作的时候，没办法。所以 ES6 给我们提供了 proxy</p>
<h3 id="ES5的操作"><a href="#ES5的操作" class="headerlink" title="ES5的操作"></a>ES5的操作</h3><p>使用<code>Object.defineProperty</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">      <span class="comment">//给那个对象，设置那个属性，什么值</span></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">target, key, newValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听:监听<span class="subst">$&#123;key&#125;</span>的设置值`</span>, newValue);</span><br><span class="line">        target[key] = newValue;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//我要获取那个的对象的 那个属性</span></span><br><span class="line">      <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听:监听<span class="subst">$&#123;key&#125;</span>的获取`</span>);</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//监听对象删除某个属性</span></span><br><span class="line">      <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听:删除了<span class="subst">$&#123;key&#125;</span>属性`</span>);</span><br><span class="line">        <span class="keyword">delete</span> target[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//监听对象属性in的判断</span></span><br><span class="line">      <span class="title function_">has</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听:监听<span class="subst">$&#123;key&#125;</span>，in的判断`</span>);</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>但是这样的方法无法进行复杂的操作，例如监听对象删除或者修改的话，就无法实时更新了</p>
<h2 id="监听对象的操作-ES6"><a href="#监听对象的操作-ES6" class="headerlink" title="监听对象的操作 ES6"></a>监听对象的操作 ES6</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,&#123;&#125;)</span><br></pre></td></tr></table></figure>



<p>Proxy 类，用于帮助我们创建一个代理，监听对象的时候，我们可以先创建一个代理对象(proxy)，之后所有对该对象的操作都通过代理对象来完成。<br><code>const p = new Proxy(target,handler)</code></p>
<h4 id="proxy相关知识"><a href="#proxy相关知识" class="headerlink" title="proxy相关知识"></a>proxy相关知识</h4><p>传入的参数</p>
<ul>
<li>target:你要代理的目标对象</li>
<li>hanlder:你需要做那些处理（事件处理函数的回调）</li>
</ul>
<p><strong>handler常用的事件处理函数的方法</strong></p>
<ol>
<li><p><code>set()</code>: 在监听对象内的属性被定义时执行，可以传入四个参数<br>target 目标对象<br>property 属性<br>value 值<br>receiver 调用的代理对象</p>
</li>
<li><p><code>get()</code>:在外部函数访问监听对象的属性时执行, 三个参数<br>target 目标对象<br>property 属性<br>receiver 调用的代理对象</p>
</li>
<li><p><code>apply()</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">apply</span>(<span class="params">target, thisArg, otherArgs</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听了apply操作&#x27;</span>);</span><br><span class="line">          target.<span class="title function_">apply</span>(thisArg, otherArgs);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>construct()</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">construct</span>(<span class="params">target, otherArgs</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了new操作&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">target</span>(...otherArgs);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>





<h2 id="Reflect-和-Object"><a href="#Reflect-和-Object" class="headerlink" title="Reflect 和 Object"></a>Reflect 和 Object</h2><p>Reflect(反射)也是 ES6 新增的 API，它是一个对象。提供了操作对象的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//确实可以这样做，但是不符合ecma标准</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>);</span><br><span class="line"><span class="comment">//按照ecma的标准</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以用reflect</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">getPrototypeOf</span>(obj));</span><br></pre></td></tr></table></figure>

<p>明明已经有 Object 可以做这些操作，为什么还要有 Reflect？这是因为早期 ECMA 规范没有考虑到对对象本身的操作如何设计 更加好。Object 在 js 内属于顶级的类，Array,Function,Number,String…都继承于他，从语言设计层面来说，作为所有类的父类，你本身不应该包含太多东西。</p>
<p>ES6 新增的 Reflect 就把一些操作集中到了 Reflect 对象上。Reflect 就是专门来做对象的操作用的,Proxy 也可以不操作原对象</p>
<h4 id="reflect与Object的区别"><a href="#reflect与Object的区别" class="headerlink" title="reflect与Object的区别"></a>reflect与Object的区别</h4><p>使用Object的对象方法，如果要判断删除一个属性删除成功没有，像这样判断就会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line">     <span class="keyword">const</span> obj = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">       <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">       <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="comment">//删除obj的name，判断删除的操作有没有成功</span></span><br><span class="line">     <span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line">     <span class="keyword">if</span> (obj.<span class="property">name</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有权限,请联系开发大哥&#x27;</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;alex忘记了自己的姓名&#x27;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>reflect相当于是Object的一个小替身，他上面放了一些Object的方法，使用他的方法不会影响原对象，自然也不会报错</p>
<p><strong>使用reflect的对象方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;alex忘记了自己的姓名&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有权限,请联系开发大哥&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用relfect和proxy共同完成代理</strong></p>
<p>使用proxy的目的就是不再操作原对象，通过代理拦截</p>
<p>再使用reflect对对象进行一些验证的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> nameH2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.name&#x27;</span>);</span><br><span class="line">      nameH2.<span class="property">textContent</span> = obj.<span class="property">name</span>;</span><br><span class="line">      <span class="comment">//1.创建代理对象</span></span><br><span class="line">      <span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">          <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue, receiver);</span><br><span class="line">          nameH2.<span class="property">textContent</span> = obj.<span class="property">name</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line">          <span class="comment">// return target[key];</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(objProxy.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>





<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="1-说出-Proxy-和-Object-defineProperty-的区别"><a href="#1-说出-Proxy-和-Object-defineProperty-的区别" class="headerlink" title="1. 说出 Proxy 和 Object.defineProperty 的区别"></a>1. 说出 Proxy 和 Object.defineProperty 的区别</h2><p>Object.defineProperty的使用初衷并不是用来监听对象，只是在es5中用了特殊的方法让他能够监听到对象，但是想通过他执行一些特殊的操作，就没有办法了。虽然<code>Object.defineProperty</code>能够劫持对象的属性，但是需要对对象的每一个属性进行遍历劫持；如果对象上有新增的属性，则需要对新增的属性再次进行劫持；如果属性是对象，还需要深度遍历。</p>
<p>proxy是对整个对象进行劫持，可以理解成外界要对这个对象进行读取或者更改，都被这个代理拦截，处理后返回一整个新的对象。</p>
<blockquote>
<p>Proxy 设计的初衷就是监听对象的改变，并且提供了 13 种监听的操作</p>
<ul>
<li>监听和拦截外部对于对象的访问</li>
<li>可以直接监听数组的变化</li>
</ul>
<p>Object.defineProperty</p>
<ul>
<li>设计的初衷是定义对象的属性，所以有些操作监听不了，新增删除属性…</li>
<li>对于复杂的对象，层级很深的，需要采用递归</li>
<li>不能监听数组的变化</li>
</ul>
</blockquote>
<h2 id="2-说出-Reflect-的作用和为什么需要他"><a href="#2-说出-Reflect-的作用和为什么需要他" class="headerlink" title="2. 说出 Reflect 的作用和为什么需要他"></a>2. 说出 Reflect 的作用和为什么需要他</h2><p>一句话，Reflect没什么用，除了装装逼，让人看起来高大上以外，并不具有什么牛逼之处。</p>
<p>准确讲应该是这样的，Reflect更像是一种语法变体，其挂在的所有方法都能找到对应的原始语法，也就是Reflect的替代性非常强。</p>
<p>其实从Reflect这个单词本身字面意思就能体会出Reflect的神韵，Reflect的中文意思是“反射”，阳光照在镜子上反射，其实光子还是那些光子，只是变化了方向。</p>
<p>如果Reflect仅仅是换了种语法，存在的意义并不大，很显然，Reflect对象的出现必然有其他的考量。</p>
<p>对于某个对象，赋值并不总是成功的。</p>
<p>例如，我们把 <code>input</code> 的<code>type</code>属性设置为只读，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(input, <span class="string">&#x27;type&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.getAttribute(<span class="string">&#x27;type&#x27;</span>) || <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>传统的使用等于号进行的属性赋值并不能知道最后是否执行成功，需要自己进行进一步的检测。</p>
<p>例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="built_in">input</span>.<span class="built_in">type</span> = <span class="string">&#x27;number&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// 输出 <span class="literal">false</span></span><br><span class="line">console.<span class="built_in">log</span>(Reflect.set(<span class="built_in">input</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;number&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>上面一行赋值返回值是<code>&#39;number&#39;</code>，至于改变输入框的<code>type</code>属性值是否成功，不得而知。</p>
<p>但是下面一行语句使用的<code>Reflect.set()</code>方法，就可以知道是否设置成功，因为<code>Reflect.set()</code>的返回值是<code>true</code>或者<code>false</code>（只要参数类型准确）。</p>
<p>除了知道执行结果外，Reflect方法还有个好处，不会因为报错而中断正常的代码逻辑执行。</p>
<blockquote>
<p>Reflect 是一个对象，提供了多种方法方便我们更规范的统一的去操作对象；而且在操作的时候会有对应的返回值。Object 作为顶级的构造函数并不应该放很多方法上去，这是早期设计不规范导致的。在 Proxy 监听对象的时候，使用 Reflect 避免了对原对象的操作。</p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记20-对象的增强知识</title>
    <url>/2022/05/13/b26%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A2%9E%E5%BC%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="1-对象方法的补充"><a href="#1-对象方法的补充" class="headerlink" title="1. 对象方法的补充 "></a>1. 对象方法的补充 <span id="more"></span></h2><h3 id="1-1-hasOwnProperty"><a href="#1-1-hasOwnProperty" class="headerlink" title="1.1 hasOwnProperty"></a>1.1 hasOwnProperty</h3><p>对象是否有某个属于自己的属性(不是原型上的)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">address</span> = <span class="string">&#x27;天河&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;address&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-in-操作符"><a href="#1-2-in-操作符" class="headerlink" title="1.2 in 操作符"></a>1.2 in 操作符</h3><p>判断某个属性是否在某个对象或者对象的原型上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">address</span> = <span class="string">&#x27;天河&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;address&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//for in 遍历的时候不仅仅是对象自身的也包括原型上的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> object) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-instanceof"><a href="#1-3-instanceof" class="headerlink" title="1.3 instanceof"></a>1.3 instanceof</h3><p>用于检测构造函数的 prototype 是否出现在某个实例对象的原型链上<br>就是用于判断对象和(类)构造函数之间的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//为了把父构造函数体内的内容拿到</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了拿到原型上的内容</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Student</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Function</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-isPrototypeOf"><a href="#1-4-isPrototypeOf" class="headerlink" title="1.4 isPrototypeOf"></a>1.4 isPrototypeOf</h3><p>用于检测某个对象，是否出现在某个实例对象的原型链上<br>可以判断对象之间的继承关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//为了把父构造函数体内的内容拿到</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了拿到原型上的内容</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(stu)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(stu)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断对象之间的继承关系</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObject</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//info是F的实例对象，obj赋值为F的原型</span></span><br><span class="line"><span class="comment">//info继承obj info子对象  obj父对象</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="title function_">createObject</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">isPrototypeOf</span>(info)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="2-class-方式定义类"><a href="#2-class-方式定义类" class="headerlink" title="2. class 方式定义类"></a>2. class 方式定义类</h2><h3 id="2-1-认识-class-定义类"><a href="#2-1-认识-class-定义类" class="headerlink" title="2.1 认识 class 定义类"></a>2.1 认识 class 定义类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5定义类</span></span><br><span class="line"><span class="comment">// function Person()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="comment">// &#123;key:value&#125; 对象</span></span><br><span class="line"><span class="comment">// &#123;表达式&#125; 代码块</span></span><br><span class="line"><span class="comment">// &#123;&#125;-&gt;类的结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> alex = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alex, jack);</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本不用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = <span class="keyword">class</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> aa = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aa);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-class-类中的内容"><a href="#2-2-class-类中的内容" class="headerlink" title="2.2 class 类中的内容"></a>2.2 class 类中的内容</h3><p>new 的时候发生了什么事:会调用构造函数的 constructor，并执行如下操作，</p>
<ol>
<li>在内存中创建一个新的空对象；</li>
<li>这个对象内部的<code>__proto__</code>属性会被赋值该构造函数的 prototype 属性；</li>
<li>构造函数内的 this 会指向创建出来的新对象；执行构造函数体内的代码；</li>
<li>如果构造函数没有返回非空对象，则返回创建出来的对象。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//当我们通过new操作符，默认调用class中的constructor</span></span><br><span class="line">  <span class="comment">//名称固定的，而且每个class只能有一个constructor</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实例方法</span></span><br><span class="line">  <span class="comment">//本质上 放在Person.prototype上</span></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;疯狂的跑&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eating</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;嘎嘎炫&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> === obj.<span class="property">__proto__</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">running</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">running</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-类和构造函数的区别"><a href="#2-3-类和构造函数的区别" class="headerlink" title="2.3 类和构造函数的区别"></a>2.3 类和构造函数的区别</h3><p>class 定义的类不能作为普通函数去调用,必须和 new 连用</p>
<h3 id="2-4-类的访问器方法"><a href="#2-4-类的访问器方法" class="headerlink" title="2.4 类的访问器方法"></a>2.4 类的访问器方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象的访问器</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类的访问器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//coder之间的约定 _开头的属性方法，不在外界访问</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置name&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取name&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">//访问器的应用场景</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, width, height</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">position</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">x</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">y</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">width</span>, <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">height</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> rect1 = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect1.<span class="property">position</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect1.<span class="property">size</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-extends-实现继承"><a href="#3-extends-实现继承" class="headerlink" title="3. extends 实现继承"></a>3. extends 实现继承</h2><h3 id="3-1-继承"><a href="#3-1-继承" class="headerlink" title="3.1 继承"></a>3.1 继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;明天🏃&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eating</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;明天吃KFC&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, sno, score</span>) &#123;</span><br><span class="line">    <span class="comment">//子类的构造函数</span></span><br><span class="line">    <span class="comment">//super必须写在所有的this之前</span></span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sno</span> = sno;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">studying</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不开灯的卷&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>, <span class="number">111</span>, <span class="number">59</span>);</span><br><span class="line">stu.<span class="title function_">eating</span>();</span><br><span class="line">stu.<span class="title function_">running</span>();</span><br><span class="line">stu.<span class="title function_">studying</span>();</span><br></pre></td></tr></table></figure>

<h3 id="3-2-super-关键字"><a href="#3-2-super-关键字" class="headerlink" title="3.2 super 关键字"></a>3.2 super 关键字</h3><p>super 使用的位置有三个，子类的构造函数，实例方法，静态方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🏃&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eating</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🍽️&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//静态方法,给类用的</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没日没夜的睡&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="comment">//子类如果对父类的方法不满意(继承过来的方法)</span></span><br><span class="line">  <span class="comment">//重新实现--重写</span></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;四条腿跑&#x27;</span>);</span><br><span class="line">    <span class="comment">//调用父类方法</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">running</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;趴着&#x27;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sleep</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">running</span>();</span><br><span class="line">dog.<span class="title function_">eating</span>();</span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">sleep</span>();</span><br></pre></td></tr></table></figure>

<h3 id="3-3-继承内置类"><a href="#3-3-继承内置类" class="headerlink" title="3.3 继承内置类"></a>3.3 继承内置类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列 第一个元素  最后一个元素</span></span><br><span class="line"><span class="comment">// class myArray extends Array &#123;</span></span><br><span class="line"><span class="comment">//   get lastItem() &#123;</span></span><br><span class="line"><span class="comment">//     return this[this.length - 1];</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   get firstItem() &#123;</span></span><br><span class="line"><span class="comment">//     return this[0];</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let arr = new myArray(10, 20, 30);</span></span><br><span class="line"><span class="comment">// // console.log(arr.firstItem, arr.lastItem);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种方式</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">lastItem</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastItem</span>());</span><br></pre></td></tr></table></figure>

<h2 id="4-多态概念的理解"><a href="#4-多态概念的理解" class="headerlink" title="4. 多态概念的理解"></a>4. 多态概念的理解</h2><p>面向对象的三大特性:封装、继承、多态<br>私人:不同数据类型，同一个操作，表现出不同的行为，就是多态的体现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//3</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>); <span class="comment">//12</span></span><br></pre></td></tr></table></figure>

<h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><h3 id="5-1-对象字面量的增强写法"><a href="#5-1-对象字面量的增强写法" class="headerlink" title="5.1 对象字面量的增强写法"></a>5.1 对象字面量的增强写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">     1. 属性</span></span><br><span class="line"><span class="comment">     2. 方法</span></span><br><span class="line"><span class="comment">     3. 计算属性名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&#x27;address&#x27;</span> + <span class="string">&#x27;city&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  <span class="title function_">eating</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  [key]: <span class="string">&#x27;广州&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

<h3 id="5-2-回顾函数的原型"><a href="#5-2-回顾函数的原型" class="headerlink" title="5.2 回顾函数的原型"></a>5.2 回顾函数的原型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foo.__proto__ === Function.prototype</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">//函数对象中的某些方法来自于Function.prototype</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>, [<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">apply</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span>);</span><br><span class="line"><span class="comment">//我在 Function.prototype添加的属性和方法 所有函数都能用</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">info</span> = <span class="string">&#x27;hello alex&#x27;</span>;</span><br><span class="line">foo.<span class="property">info</span>;</span><br><span class="line">test.<span class="property">info</span>;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bar</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar~~~~~~&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="title function_">bar</span>();</span><br><span class="line">test.<span class="title function_">bar</span>();</span><br><span class="line"><span class="comment">//Array.prototype.slice.apply(arguments)</span></span><br><span class="line"><span class="comment">// [].slice.apply(arguments)</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-手写-apply"><a href="#5-3-手写-apply" class="headerlink" title="5.3 手写 apply"></a>5.3 手写 apply</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//apply的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.apply(&#x27;aaa&#x27;, [&#x27;alex&#x27;, 18]);</span></span><br><span class="line"><span class="comment">//1.给所有函数添加myapply</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myapply</span> = <span class="keyword">function</span> (<span class="params">thisArg, otherArgs</span>) &#123;</span><br><span class="line">  <span class="comment">//thisArg-&gt;this</span></span><br><span class="line">  <span class="comment">//otherArgs剩下的参数 -&gt; 那个数组</span></span><br><span class="line">  <span class="comment">//获取thisArg,确保他是一个对象类型</span></span><br><span class="line">  thisArg =</span><br><span class="line">    thisArg === <span class="literal">null</span> || thisArg === <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(thisArg);</span><br><span class="line">  <span class="comment">//调用前面的函数</span></span><br><span class="line">  <span class="comment">//定义对象上的方法，我之后调用</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(thisArg, <span class="string">&#x27;fn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//具体fn里面放的是什么，后续foo调用myapply的时候，foo会被视为一个对象（函数也是一个对象），他</span></span><br><span class="line">    <span class="attr">value</span>: <span class="variable language_">this</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  thisArg.<span class="title function_">fn</span>(...otherArgs);</span><br><span class="line">  <span class="comment">//调用完以后删除fn 避免副作用</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span>;</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="title function_">myapply</span>(<span class="string">&#x27;aaa&#x27;</span>, [<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>]);</span><br><span class="line">foo.<span class="title function_">myapply</span>(<span class="string">&#x27;aaa&#x27;</span>, [<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>]);</span><br><span class="line">foo.<span class="title function_">myapply</span>(<span class="literal">null</span>, [<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="5-4-手写-call"><a href="#5-4-手写-call" class="headerlink" title="5.4 手写 call"></a>5.4 手写 call</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//call的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.apply(&#x27;aaa&#x27;, [&#x27;alex&#x27;, 18]);</span></span><br><span class="line"><span class="comment">//1.给所有函数添加mycall</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...otherArgs</span>) &#123;</span><br><span class="line">  <span class="comment">//thisArg-&gt;this</span></span><br><span class="line">  <span class="comment">//otherArgs剩下的参数 -&gt; 那个数组</span></span><br><span class="line">  <span class="comment">//获取thisArg,确保他是一个对象类型</span></span><br><span class="line">  thisArg =</span><br><span class="line">    thisArg === <span class="literal">null</span> || thisArg === <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(thisArg);</span><br><span class="line">  <span class="comment">//调用前面的函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义对象上的方法，我之后调用</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(thisArg, <span class="string">&#x27;fn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//具体fn里面放的是什么</span></span><br><span class="line">    <span class="attr">value</span>: <span class="variable language_">this</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  thisArg.<span class="title function_">fn</span>(...otherArgs);</span><br><span class="line">  <span class="comment">//调用完以后删除fn 避免副作用</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span>;</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="literal">null</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>

<h3 id="5-5-call-apply-抽取封装"><a href="#5-5-call-apply-抽取封装" class="headerlink" title="5.5 call-apply 抽取封装"></a>5.5 call-apply 抽取封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//call的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装到独立的函数中</span></span><br><span class="line"><span class="comment">// function execFn(thisArg, otherArgs, fn) &#123;</span></span><br><span class="line"><span class="comment">//   //保证thisArg是一个对象</span></span><br><span class="line"><span class="comment">//   thisArg =</span></span><br><span class="line"><span class="comment">//     thisArg === null || thisArg === undefined ? window : Object(thisArg);</span></span><br><span class="line"><span class="comment">//   // thisArg.fn = this;</span></span><br><span class="line"><span class="comment">//   Object.defineProperty(thisArg, &#x27;fn&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//     enumerable: false,</span></span><br><span class="line"><span class="comment">//     configurable: true,</span></span><br><span class="line"><span class="comment">//     value: fn,</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">//   thisArg.fn(...otherArgs);</span></span><br><span class="line"><span class="comment">//   delete fn;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//封装到原型上 我的exec里面已经能call 也能apply了</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myexec</span> = <span class="keyword">function</span> (<span class="params">thisArg, otherArgs</span>) &#123;</span><br><span class="line">  thisArg =</span><br><span class="line">    thisArg === <span class="literal">null</span> || thisArg === <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(thisArg);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(thisArg, <span class="string">&#x27;fn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="variable language_">this</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  thisArg.<span class="title function_">fn</span>(...otherArgs);</span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1. 给每个函数添加 myapply</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myapply</span> = <span class="keyword">function</span> (<span class="params">thisArg, otherArgs</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">myexec</span>(thisArg, otherArgs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2. 给每个函数添加 mycall</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...otherArgs</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">myexec</span>(thisArg, otherArgs);</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">foo.<span class="title function_">myapply</span>(<span class="string">&#x27;aaa&#x27;</span>, [<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="comment">// foo.mycall(null, &#x27;alex&#x27;, 18);</span></span><br></pre></td></tr></table></figure>

<h3 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h3><p>相比上面，不用调用而是返回这个 fn</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height, address</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, name, age, height, address);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mybind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...otherArgs</span>) &#123;</span><br><span class="line">  thisArg =</span><br><span class="line">    thisArg === <span class="literal">null</span> || thisArg === <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="title class_">Object</span>(thisArg);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(thisArg, <span class="string">&#x27;fn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="variable language_">this</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// thisArg.fn(...otherArgs);</span></span><br><span class="line">  <span class="comment">// delete thisArg.fn;</span></span><br><span class="line">  <span class="comment">//我要返回一个fn，而不是调用他</span></span><br><span class="line">  <span class="comment">//他的实参个数确定吗？不确定 rest</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...newArgs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//原来的参数 我也不能丢</span></span><br><span class="line">    <span class="keyword">let</span> allArgs = [...otherArgs, ...newArgs];</span><br><span class="line">    thisArg.<span class="title function_">fn</span>(...allArgs);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newFoo = foo.<span class="title function_">bind</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="title function_">newFoo</span>(<span class="number">1.88</span>, <span class="number">18888</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记21-ES6的增强知识</title>
    <url>/2022/05/13/b27%20ES6%E7%9A%84%E5%A2%9E%E5%BC%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1. 函数 "></a>1. 函数 <span id="more"></span></h2><h3 id="1-1-默认参数"><a href="#1-1-默认参数" class="headerlink" title="1.1 默认参数"></a>1.1 默认参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es6开始有默认值了 默认参数不会对null做处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">  <span class="comment">// //第一种写法</span></span><br><span class="line">  <span class="comment">// arg1 = arg1 ? arg1 : &#x27;我是默认值&#x27;;</span></span><br><span class="line">  <span class="comment">// //第二种写法</span></span><br><span class="line">  <span class="comment">// arg1 = arg1 || &#x27;我是默认值&#x27;;</span></span><br><span class="line">  <span class="comment">// //上述两种写法都不够严谨</span></span><br><span class="line">  <span class="comment">// arg1 = arg1 === undefined || arg1 === null ? &#x27;我是默认值&#x27; : arg1;</span></span><br><span class="line">  <span class="comment">// console.log(arg1);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//es6+的语法 ??能够处理null</span></span><br><span class="line">  arg1 = arg1 ?? <span class="string">&#x27;我是默认值&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最好把有默认参数的形参放到最后面，但还是会按照顺序来匹配</span></span><br><span class="line"><span class="comment">//默认值会改变函数的length，默认值以及后面的参数都不算在length中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">age, name, height = <span class="number">1.88</span>, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">18</span>, <span class="string">&#x27;alex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认值可以和解构一起使用</span></span><br><span class="line"><span class="comment">// const obj = &#123; name: &#x27;alex&#x27; &#125;;</span></span><br><span class="line"><span class="comment">// const &#123; name = &#x27;jack&#x27; &#125; = obj;</span></span><br><span class="line"><span class="comment">// function bar(obj = &#123; name: &#x27;alex&#x27;, age: 18 &#125;) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(obj.name, obj.age);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// bar();</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">&#123; name, age &#125; = obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<h3 id="1-2-箭头函数补充"><a href="#1-2-箭头函数补充" class="headerlink" title="1.2 箭头函数补充"></a>1.2 箭头函数补充</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>); <span class="comment">//Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property"><span class="keyword">prototype</span></span> === f.<span class="property">__proto__</span>); <span class="comment">// new Foo()-&gt; f.__proto__ === Foo.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//箭头函数没有显示原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">bar</span>(); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<h2 id="2-展开运算符"><a href="#2-展开运算符" class="headerlink" title="2. 展开运算符"></a>2. 展开运算符</h2><h3 id="2-1-展开的基本使用"><a href="#2-1-展开的基本使用" class="headerlink" title="2.1 展开的基本使用"></a>2.1 展开的基本使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;helloworld&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...str);</span><br><span class="line"><span class="comment">//1.数组构造时使用</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> newNames = [...names, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="comment">//2. 函数的剩余参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name1, name2, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 函数调用时使用</span></span><br><span class="line"><span class="title function_">foo</span>(...names);</span><br><span class="line"><span class="title function_">foo</span>(...str);</span><br><span class="line"><span class="comment">//4. 对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  ...obj,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//不能这样做， 因为obj无法迭代</span></span><br><span class="line"><span class="title function_">foo</span>(...obj);</span><br><span class="line"><span class="comment">//可迭代对象：数组/string/arguments</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-引用赋值和深浅拷贝"><a href="#2-2-引用赋值和深浅拷贝" class="headerlink" title="2.2 引用赋值和深浅拷贝"></a>2.2 引用赋值和深浅拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;autoCurry&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// //引用赋值</span></span><br><span class="line"><span class="comment">// const info = obj;</span></span><br><span class="line"><span class="comment">// // info.name = 123;</span></span><br><span class="line"><span class="comment">// //浅拷贝:只拷贝第一层</span></span><br><span class="line"><span class="comment">// const info1 = &#123;</span></span><br><span class="line"><span class="comment">//   ...obj,</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// info1.name = &#x27;哈哈哈&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(obj.name); //alex</span></span><br><span class="line"><span class="comment">// console.log(info1.name);</span></span><br><span class="line"><span class="comment">// info1.friend.name = &#x27;mybind&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(obj.friend.name); //mybind</span></span><br><span class="line"><span class="comment">// console.log(info1.friend.name); //mybind</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="comment">//1.库</span></span><br><span class="line"><span class="comment">//2.自己实现</span></span><br><span class="line"><span class="comment">//3.利用现有机制</span></span><br><span class="line"><span class="comment">//把对象序列化</span></span><br><span class="line"><span class="comment">// let a = JSON.stringify(obj);</span></span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"><span class="comment">// //反序列化</span></span><br><span class="line"><span class="comment">// let b = JSON.parse(a);</span></span><br><span class="line"><span class="comment">// console.log(b);</span></span><br><span class="line"><span class="keyword">let</span> info2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="comment">// console.log(info2);</span></span><br><span class="line">info2.<span class="property">friend</span>.<span class="property">name</span> = <span class="string">&#x27;我是info2哈哈哈&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, info2);</span><br></pre></td></tr></table></figure>

<h2 id="3-Symbol"><a href="#3-Symbol" class="headerlink" title="3. Symbol"></a>3. Symbol</h2><p>生成独一无二的值</p>
<h3 id="3-1-初识-symbol"><a href="#3-1-初识-symbol" class="headerlink" title="3.1 初识 symbol"></a>3.1 初识 symbol</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;aaaaaaalex&#x27;</span>,</span><br><span class="line">  [s1]: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 == s2); <span class="comment">//false</span></span><br><span class="line">obj[s2] = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-symbol-注意和-api"><a href="#3-2-symbol-注意和-api" class="headerlink" title="3.2 symbol 注意和 api"></a>3.2 symbol 注意和 api</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  [s1]: <span class="string">&#x27;aa&#x27;</span>,</span><br><span class="line">  [s2]: <span class="string">&#x27;bb&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line">obj1[s1] = <span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line">obj1[s2] = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, s1, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//有方法获取symbol的key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)); <span class="comment">//拿不到symbol的key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)); <span class="comment">//只能拿symbol的key</span></span><br><span class="line"><span class="keyword">const</span> symbolKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> symbolKeys) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3);</span><br><span class="line"><span class="comment">//相当于是Symbol的key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">description</span>);</span><br><span class="line"><span class="keyword">const</span> s4 = <span class="title class_">Symbol</span>(s3.<span class="property">description</span>);</span><br><span class="line"><span class="comment">//哪怕是同一个key 还是false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s4); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我非要相同的Symbol</span></span><br><span class="line"><span class="comment">//如果你有相同的key，可以通过Symbol.for生成相同的Symbol值</span></span><br><span class="line"><span class="keyword">const</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;ddd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> s6 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;ddd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s5 === s6); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取传入的key，后面可能用key生成相同的symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s5));</span><br></pre></td></tr></table></figure>

<h2 id="4-Set-集合"><a href="#4-Set-集合" class="headerlink" title="4. Set 集合"></a>4. Set 集合</h2><p>类似数组，但是最大区别是天生不允许重复。只能通过构造函数来创建</p>
<h3 id="4-1-set"><a href="#4-1-set" class="headerlink" title="4.1 set"></a>4.1 set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// console.log(set);</span></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">20</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">22</span>);</span><br><span class="line"><span class="comment">//做了添加重复的元素，但是没用</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"><span class="comment">// const info = &#123;&#125;;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// set.add(info);</span></span><br><span class="line"><span class="comment">// set.add(obj);</span></span><br><span class="line"><span class="comment">//可以添加，obj和info是两个不同的对象</span></span><br><span class="line"><span class="comment">// console.log(set);</span></span><br><span class="line"><span class="comment">// set.add(obj); //没用，因为重复</span></span><br><span class="line"><span class="comment">// console.log(set);</span></span><br><span class="line"><span class="comment">//set的应用场景 去重</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>];</span><br><span class="line"><span class="comment">// const newNames = [];</span></span><br><span class="line"><span class="comment">// for (const item of names) &#123;</span></span><br><span class="line"><span class="comment">//   if (!newNames.includes(item)) &#123;</span></span><br><span class="line"><span class="comment">//     newNames.push(item);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> newNamesSet = <span class="keyword">new</span> <span class="title class_">Set</span>(names);</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(newNamesSet);</span><br><span class="line"><span class="comment">//更简单</span></span><br><span class="line"><span class="comment">// console.log([...new Set(names)]);</span></span><br><span class="line"><span class="comment">//size 里面元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//add添加</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete 删除</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空 clear</span></span><br><span class="line"><span class="comment">// set.clear();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//has 有某个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(obj)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-WeakSet"><a href="#4-2-WeakSet" class="headerlink" title="4.2 WeakSet"></a>4.2 WeakSet</h3><p>weak Reference 弱引用:可以通过引用获取到对应的数据，但是他引用的那个对象不保证一定不被销毁.<br>strong Reference 强引用:我保证你引用的对象永远存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&#x27;kern&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [obj1, obj2, obj3];</span><br><span class="line">obj1 = <span class="literal">null</span>;</span><br><span class="line">obj2 = <span class="literal">null</span>;</span><br><span class="line">obj3 = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//set对象对obj1 2 3 有引用，所以这三个对象不会被销毁</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">arr = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&#x27;kern&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [obj1, obj2, obj3];</span><br><span class="line"><span class="comment">// obj1 = null;</span></span><br><span class="line"><span class="comment">// obj2 = null;</span></span><br><span class="line"><span class="comment">// obj3 = null;</span></span><br><span class="line"><span class="keyword">const</span> weakset = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"><span class="comment">//WeakSet只能添加对象不能存放基本数据类型</span></span><br><span class="line"><span class="comment">// weakset.add(123);</span></span><br><span class="line">weakset.<span class="title function_">add</span>(obj1);</span><br><span class="line">weakset.<span class="title function_">add</span>(obj2);</span><br><span class="line">weakset.<span class="title function_">add</span>(obj3);</span><br><span class="line"><span class="comment">//不一定能访问到，因为weakset是弱引用，里面的东西可能会被销毁掉</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br><span class="line"><span class="comment">//add  delete has</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WeakSet不能遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用 stackoverflow 集合</span></span><br><span class="line"><span class="keyword">const</span> pWeakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pWeakSet.<span class="title function_">add</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//问题很大，放在类里面的方法，我只希望你的实例调用的</span></span><br><span class="line">  <span class="comment">//引用给谁 谁就能调用</span></span><br><span class="line">  <span class="comment">//限制一下 只让他的实例调用</span></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pWeakSet.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error 调用方式不对&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跑～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//都能正常调用</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">running</span>();</span><br><span class="line"><span class="keyword">const</span> fn = p.<span class="property">running</span>;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">run</span>: p.<span class="property">running</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br><span class="line"><span class="comment">//为什么不用set，set强引用，p = null set里面的引用 一直在 对象一直在</span></span><br><span class="line"><span class="comment">//weakset 我想销毁 就能正常销毁</span></span><br></pre></td></tr></table></figure>

<p>WeakSet 只能存放对象类型，不能 add 基本类型<br>WeakSet 是弱引用。<br>WeakSet 不能遍历，原因是：WeakSet 是弱引用，如果遍历获取其中的元素，有可能导致对象不能正常的销毁。</p>
<h2 id="5-Map-映射"><a href="#5-Map-映射" class="headerlink" title="5. Map 映射"></a>5. Map 映射</h2><h3 id="5-1-Map"><a href="#5-1-Map" class="headerlink" title="5.1 Map"></a>5.1 Map</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有map 对象不能当作键名</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> info2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// const obj = &#123;</span></span><br><span class="line"><span class="comment">//   address: &#x27;火星&#x27;,</span></span><br><span class="line"><span class="comment">//   [info]: &#x27;hhahah&#x27;,</span></span><br><span class="line"><span class="comment">//   [info2]: &#x27;嘻嘻嘻嘻&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"><span class="comment">// //[object Object]是字符串，100%会遇到这个</span></span><br><span class="line"><span class="comment">// //我只能接受字符串，你却给我一个对象，我没办法了就展示成这样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">//设置 set</span></span><br><span class="line">map.<span class="title function_">set</span>(info, <span class="string">&#x27;aaaa&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(info2, <span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(info));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 delete</span></span><br><span class="line"><span class="comment">// map.delete(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空 clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//has</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(info));</span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach 值</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">//是数组</span></span><br><span class="line">  <span class="keyword">const</span> [key, value] = item;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解构后&#x27;</span>, key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map让对象可以作为key</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-WeakMap"><a href="#5-2-WeakMap" class="headerlink" title="5.2 WeakMap"></a>5.2 WeakMap</h3><p>区别一:WeakMap 只能用对象做 key，不接受其他类型<br>区别二:WeakMap 弱引用。</p>
<h2 id="6-Object-assign-合并对象"><a href="#6-Object-assign-合并对象" class="headerlink" title="6. Object.assign()合并对象"></a>6. Object.assign()合并对象</h2><p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。<br><code>Object.assign(target, ...sources) </code>   【target：目标对象】，【souce：源对象（可多个）】</p>
<p>举个例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;<span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;, object1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2.<span class="property">c</span>, object2.<span class="property">d</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1)  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2)  <span class="comment">// &#123; c: 3, d: 5, a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ol>
<li>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性</li>
<li><code>Object.assign</code> 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标<br>对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如<br>果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到<br>原型，应使用<code>Object.getOwnPropertyDescriptor()</code>和<code>Object.defineProperty() 。</code></li>
</ol>
<p>详见:<a href="https://www.jianshu.com/p/f9ec860ecd81">https://www.jianshu.com/p/f9ec860ecd81</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记19-函数的增强知识</title>
    <url>/2022/05/11/b25%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E5%BC%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数 "></a>1.函数 <span id="more"></span></h1><h3 id="1-1-函数的属性和-arguments"><a href="#1-1-函数的属性和-arguments" class="headerlink" title="1.1 函数的属性和 arguments"></a>1.1 函数的属性和 arguments</h3><h4 id="1-1-1-函数的属性"><a href="#1-1-1-函数的属性" class="headerlink" title="1.1.1 函数的属性"></a>1.1.1 函数的属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">address</span> = <span class="string">&#x27;天河&#x27;</span>;</span><br><span class="line"><span class="comment">//自定义属性</span></span><br><span class="line">foo.<span class="property">msg</span> = <span class="string">&#x27;hello foo&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>除了自定义属性以外，函数对象中已经有一些自己的属性。<br><code>name</code>:函数的名字<br><code>length</code>:第一个具有默认值参数之前的参数的个数</p>
<h4 id="1-1-2-arguments"><a href="#1-1-2-arguments" class="headerlink" title="1.1.2 arguments"></a>1.1.2 arguments</h4><p>array-like 对象,即伪数组，有一些数组的特性，但不是全有<br>通过索引访问，有 length.不能使用数组的<code>map，filter...</code>方法<br>在开发中，如果需要对 arguments 进行操作的时候要用到数组的一些特性，那我们就需要把他转成数组。<br>转成数组的三种方法</p>
<ol>
<li>遍历添加</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(arg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">333</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>es6 的方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = [...<span class="variable language_">arguments</span>];</span><br><span class="line"><span class="keyword">let</span> newArr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>slice+apply</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回顾slice</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="comment">//浅拷贝，引用赋值</span></span><br><span class="line"><span class="keyword">let</span> bar = arr.<span class="title function_">slice</span>(); <span class="comment">//this-&gt;arr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象方法的调用</span></span><br><span class="line"><span class="comment">// obj.foo() //this-&gt;obj</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, bar);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">//把arguments拷贝一份</span></span><br><span class="line">  <span class="comment">// slice.apply(&#123;1,2,3,,3213&#125;);</span></span><br><span class="line">  <span class="comment">// slice.apply(arguments);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//slice方法是存放在数组对象的原型中，当然实例也可以通过原型链访问到他</span></span><br><span class="line">  <span class="keyword">let</span> newArr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> newArr1 = [].<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找方法把arguemnts转成数组</span></span><br><span class="line"><span class="comment">//slice返回一个数组给你</span></span><br><span class="line"><span class="comment">//找slice</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">333</span>);</span><br></pre></td></tr></table></figure>

<p>箭头函数的 arguments</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//拿到的是外层作用域的arguments</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//自己没有arguements</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">11</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<p>ES6 的 rest parameters:将不定量的参数放入一个数组中，剩余参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num1, num2, ...otherNums</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(otherNums);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<p>剩余参数和 arguments 区别</p>
<ol>
<li>剩余参数是一个真正的数组，arguments 是一个类数组对象</li>
<li>剩余参数只包括没有对应形参的实参，arguments 包括所有的实参。</li>
</ol>
<p>剩余参数只能写在最后面</p>
<h3 id="1-2-纯函数的理解和应用"><a href="#1-2-纯函数的理解和应用" class="headerlink" title="1.2 纯函数的理解和应用"></a>1.2 纯函数的理解和应用</h3><h4 id="1-2-1-纯函数的理解"><a href="#1-2-1-纯函数的理解" class="headerlink" title="1.2.1 纯函数的理解"></a>1.2.1 纯函数的理解</h4><p>在程序设计中，若一个函数符合以下条件，那么这个函数被称为纯函数:<br>此函数在相同的输入时，需产生相同的输出。函数的输出和输入值和其他的隐藏信息或者外部设备状态无关。该函数不能有语义上可观察的函数副作用。</p>
<p>私人:</p>
<ol>
<li>确定的输入，一定产生确定的输出</li>
<li>函数执行的过程中，不能产生副作用</li>
</ol>
<p>计算机中的副作用:在执行一个函数的时候，除了返回对应的值。还对调用函数产生了附加的影响，比如修改了全局变量，修改了参数修改了外部的存储。</p>
<p>判断以下函数是不是纯函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printInfo</span>(<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>, info.<span class="property">age</span>, info.<span class="property">msg</span>);</span><br><span class="line">  <span class="comment">//下面这句话让函数不再是纯函数</span></span><br><span class="line">  <span class="comment">// info.flag = &#x27;打印结束 哈哈哈&#x27;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;哈哈哈哈&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">printInfo</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if (obj.flag) &#123;</span></span><br><span class="line"><span class="comment">//   xxx;</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//   xxx;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>例子 slice,splice<br>slice:截取数组，不会对原数组进行任何操作，而是返回一个新数组给你。<br>splice:截取数组，返回一个新数组给你，就是已经改变的原数组。</p>
<h4 id="1-2-2-纯函数的优势"><a href="#1-2-2-纯函数的优势" class="headerlink" title="1.2.2 纯函数的优势"></a>1.2.2 纯函数的优势</h4><p>安心的编写 安心的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">//不能，需要关注外部的counter的变化</span></span><br><span class="line">  <span class="comment">// return num+counter</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以随便用，你外部的counter哪怕变成一个对象/数组 都和我没关</span></span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-柯里化的理解和应用"><a href="#1-3-柯里化的理解和应用" class="headerlink" title="1.3 柯里化的理解和应用"></a>1.3 柯里化的理解和应用</h3><h4 id="1-3-1-柯里化的理解"><a href="#1-3-1-柯里化的理解" class="headerlink" title="1.3.1 柯里化的理解"></a>1.3.1 柯里化的理解</h4><p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。<br><code>f(a,b,c)</code> 转成<code>f(a)(b)(c)</code>,柯里化 不会调用函数，只是对函数进行转化。</p>
<h4 id="1-3-2-柯里化函数变换"><a href="#1-3-2-柯里化函数变换" class="headerlink" title="1.3.2 柯里化函数变换"></a>1.3.2 柯里化函数变换</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo1</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// foo1(10)(20)(30)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">z</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo2</span>(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="comment">// function foo3(x) &#123;</span></span><br><span class="line"><span class="comment">//   return (y) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     return (z) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       console.log(x + y + z);</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo3</span> = (<span class="params">x</span>) =&gt; <span class="function">(<span class="params">y</span>) =&gt;</span> <span class="function">(<span class="params">z</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo3</span>(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-柯里化函数优势"><a href="#1-3-3-柯里化函数优势" class="headerlink" title="1.3.3 柯里化函数优势"></a>1.3.3 柯里化函数优势</h4><ol>
<li>函数的职责单一 x,y,z,a,b,c,d</li>
<li>函数的参数复用</li>
</ol>
<h4 id="1-3-4-柯里化函数练习"><a href="#1-3-4-柯里化函数练习" class="headerlink" title="1.3.4 柯里化函数练习"></a>1.3.4 柯里化函数练习</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印一些日志</span></span><br><span class="line"><span class="comment">//日志的时间  日志的类型:info/debug/feature  具体的信息</span></span><br><span class="line"><span class="comment">// //没有柯里化</span></span><br><span class="line"><span class="comment">// function logInfo(date, type, msg) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(`时间$&#123;date&#125;-类型$&#123;type&#125;-内容$&#123;msg&#125;`);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// //打印日志</span></span><br><span class="line"><span class="comment">// logInfo(&#x27;2023-05-16&#x27;, &#x27;debug&#x27;, &#x27;修复样式bug&#x27;);</span></span><br><span class="line"><span class="comment">// //又修复了一个bug</span></span><br><span class="line"><span class="comment">// logInfo(&#x27;2023-05-16&#x27;, &#x27;debug&#x27;, &#x27;修复了接口的bug&#x27;);</span></span><br><span class="line"><span class="comment">//柯里化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logInfo</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`时间<span class="subst">$&#123;date&#125;</span>-类型<span class="subst">$&#123;type&#125;</span>-内容<span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//                                      logInfo(时间)(类型)(内容)</span></span><br><span class="line"><span class="keyword">var</span> logToday = <span class="title function_">logInfo</span>(<span class="string">&#x27;2023-05-16&#x27;</span>); <span class="comment">//logInfo(时间)()()</span></span><br><span class="line"><span class="comment">//定义debug的日志</span></span><br><span class="line"><span class="keyword">var</span> logTodayDebug = <span class="title function_">logToday</span>(<span class="string">&#x27;debug&#x27;</span>); <span class="comment">//logInfo(时间)(类型)()</span></span><br><span class="line"><span class="comment">//定义feature的日志</span></span><br><span class="line"><span class="keyword">var</span> logTodayFeature = <span class="title function_">logToday</span>(<span class="string">&#x27;feature&#x27;</span>); <span class="comment">//logInfo(时间)(类型)()</span></span><br><span class="line"><span class="keyword">var</span> logTodayInfo = <span class="title function_">logToday</span>(<span class="string">&#x27;info&#x27;</span>); <span class="comment">//logInfo(时间)(类型)()</span></span><br><span class="line"><span class="comment">//今天 修改 bug  唯一变化 内容</span></span><br><span class="line"><span class="title function_">logTodayDebug</span>(<span class="string">&#x27;修复按钮点击&#x27;</span>);</span><br><span class="line"><span class="title function_">logTodayDebug</span>(<span class="string">&#x27;修复接口&#x27;</span>);</span><br><span class="line"><span class="title function_">logTodayDebug</span>(<span class="string">&#x27;修复排序&#x27;</span>);</span><br><span class="line"><span class="title function_">logTodayFeature</span>(<span class="string">&#x27;新增过滤&#x27;</span>);</span><br><span class="line"><span class="title function_">logTodayFeature</span>(<span class="string">&#x27;新增统计功能&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-5-自动柯里化函数"><a href="#1-3-5-自动柯里化函数" class="headerlink" title="1.3.5 自动柯里化函数"></a>1.3.5 自动柯里化函数</h4><p>如何定义一个函数可以将多个参数的普通函数转成柯里化的函数</p>
<h3 id="1-4-组合函数的理解和应用"><a href="#1-4-组合函数的理解和应用" class="headerlink" title="1.4 组合函数的理解和应用"></a>1.4 组合函数的理解和应用</h3><h4 id="1-4-1-组合函数概念的理解"><a href="#1-4-1-组合函数概念的理解" class="headerlink" title="1.4.1 组合函数概念的理解"></a>1.4.1 组合函数概念的理解</h4><p>把依次调用的多个函数组合起来，让他们自动的依次调用，这个过程就是组合函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//翻倍</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求平方</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="title function_">double</span>(<span class="number">123</span>)));</span><br><span class="line"><span class="comment">//把上述两个函数结合起来</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">composeFn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pow</span>(<span class="title function_">double</span>(num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">composeFn</span>(<span class="number">123</span>));</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-自动组合函数"><a href="#1-4-2-自动组合函数" class="headerlink" title="1.4.2 自动组合函数"></a>1.4.2 自动组合函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      考虑更加复杂的情况,比如传入了更多的函数，比如调用composeFn的时候传入了更多的参数</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//翻倍</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求平方</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num ** <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装:传入两个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">composeFn</span>(<span class="params">...fns</span>) &#123;</span><br><span class="line">  <span class="comment">//用来做边界判断</span></span><br><span class="line">  <span class="keyword">let</span> length = fns.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">//此刻fn就是每一个函数</span></span><br><span class="line">    <span class="keyword">let</span> fn = fns[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`第<span class="subst">$&#123;i&#125;</span>个参数必须是一个函数`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回并调用新函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// let res = fns[0](...args)</span></span><br><span class="line">    <span class="keyword">let</span> res = fns[<span class="number">0</span>].<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> fn = fns[i];</span><br><span class="line">      <span class="comment">// res = fn.apply(this, [res]);</span></span><br><span class="line">      res = <span class="title function_">fn</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// return pow(double(num));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newFn = <span class="title function_">composeFn</span>(double, pow, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="title function_">newFn</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doubleRes = <span class="title function_">double</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">let</span> powRes = <span class="title function_">pow</span>(doubleRes);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(powRes);</span><br></pre></td></tr></table></figure>

<h3 id="1-5-with、eval"><a href="#1-5-with、eval" class="headerlink" title="1.5 with、eval"></a>1.5 with、eval</h3><p>with:扩展一个语句的作用域链<br>eval:执行字符串格式的 js 代码</p>
<p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</p>
<p>如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。</p>
<h3 id="1-6-严格模式"><a href="#1-6-严格模式" class="headerlink" title="1.6 严格模式"></a>1.6 严格模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="comment">//1.不会意外的创建全局变量</span></span><br><span class="line"><span class="comment">// function foo() &#123;</span></span><br><span class="line"><span class="comment">//   abc = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// foo();</span></span><br><span class="line"><span class="comment">// console.log(abc);</span></span><br><span class="line"><span class="comment">//2. 发现静默的错误</span></span><br><span class="line"><span class="comment">// var obj = &#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;alex&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// Object.defineProperty(obj, &#x27;name&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//   writable: false,</span></span><br><span class="line"><span class="comment">//   configurable: false,</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// obj.name = &#x27;dog&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(obj.name);</span></span><br><span class="line"><span class="comment">//3. 参数名称不能相同</span></span><br><span class="line"><span class="comment">// function foo(num, num) &#123;&#125;</span></span><br><span class="line"><span class="comment">//4. 数字不能以0开头</span></span><br><span class="line"><span class="comment">// console.log(0123);</span></span><br><span class="line"><span class="comment">//5.eval</span></span><br><span class="line"><span class="comment">//6. this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//undefined</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//String &#123;&#x27;abc&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-对象"><a href="#2-对象" class="headerlink" title="2.对象"></a>2.对象</h2><h3 id="2-1-Object-defineProperty"><a href="#2-1-Object-defineProperty" class="headerlink" title="2.1 Object.defineProperty"></a>2.1 Object.defineProperty</h3><p>对对象的属性做精准的控制，属性描述符<br><code>Object.defineProperty(obj,prop,desciptor)</code><br>obj 要定义属性的对象<br>prop 属性名<br>desciptor 对该属性的描述</p>
<p>desciptor 有两种类型</p>
<ol>
<li>数据属性 Data</li>
<li>存取属性 Accessor</li>
</ol>
<p>详细的说明 :<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;天河&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Object.defineProperty(obj, &#x27;name&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//   configurable: false, //该属性不可被删除</span></span><br><span class="line"><span class="comment">//   enumerable: false, //obj的name属性不可被枚举 for in Object.keys</span></span><br><span class="line"><span class="comment">//   writable: false, //该属性不能修改</span></span><br><span class="line"><span class="comment">//   value: &#x27;123&#x27;, //返回的值</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// delete obj.name;</span></span><br><span class="line"><span class="comment">// for (const key in obj) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(key);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// obj.name = &#x27;dog&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(obj.name);</span></span><br><span class="line"><span class="comment">// //添加新的属性</span></span><br><span class="line"><span class="comment">// Object.defineProperty(obj, &#x27;height&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//   value: 1.8,</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">let</span> _name;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//设置属性值时会自动调用</span></span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set被调用&#x27;</span>, value);</span><br><span class="line">    _name = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取 时 自动调用</span></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  让 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3; 为true</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> i++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//定义多个新的属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">height</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-一些新方法"><a href="#2-2-一些新方法" class="headerlink" title="2.2 一些新方法"></a>2.2 一些新方法</h3><p>禁止对象扩展属性<br>密封对象 不允许你配置和删除属性<br>冻结对象 不允许修改现有属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;use strict&#x27;;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//不允许扩展</span></span><br><span class="line"><span class="comment">// Object.preventExtensions(obj);</span></span><br><span class="line"><span class="comment">// obj.address = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//密封</span></span><br><span class="line"><span class="comment">// Object.seal(obj);</span></span><br><span class="line"><span class="comment">// delete obj.age;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//冻结对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记18-js的内存管理机制</title>
    <url>/2022/05/09/b24%20js%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="js的内存管理机制"><a href="#js的内存管理机制" class="headerlink" title="js的内存管理机制"></a>js的内存管理机制<span id="more"></span></h1><h2 id="1-JavaScript的内存管理"><a href="#1-JavaScript的内存管理" class="headerlink" title="1.JavaScript的内存管理"></a>1.JavaScript的内存管理</h2><p>js运行原理里面讲的<code>AO,VO,GO...</code>等一些知识，明明只是访问一个变量而已，却要做如此多的操作，这样设计的目的都是为了一个目的–<strong>闭包</strong></p>
<h3 id="1-1-认识内存管理"><a href="#1-1-认识内存管理" class="headerlink" title="1.1 认识内存管理"></a>1.1 认识内存管理</h3><p>不管是什么样的编程语言，在代码执行的过程中都是需要给他<strong>分配内存</strong>，不同的是有些编程语言需要我们自己手动管理内存，有些编程语言可以自动管理内存。</p>
<p><code>var obj = null</code></p>
<p>不管何种方式来管理内存，内存的管理都会有如下的<strong>生命周期</strong>“</p>
<ol>
<li>分配申请你需要的内存（申请）</li>
<li>使用分配的内存</li>
<li>不需要使用的时候，对其进行释放</li>
</ol>
<h3 id="1-2-js的内存管理"><a href="#1-2-js的内存管理" class="headerlink" title="1.2 js的内存管理"></a>1.2 js的内存管理</h3><p>对于原始数据类型，直接在栈里面分配。</p>
<p>对于复杂数据类型，在堆里分配，并将这块空间的指针返回给你的变量名引用</p>
<h2 id="2-垃圾回收机制算法"><a href="#2-垃圾回收机制算法" class="headerlink" title="2.垃圾回收机制算法"></a>2.垃圾回收机制算法</h2><h3 id="2-1-js的垃圾回收"><a href="#2-1-js的垃圾回收" class="headerlink" title="2.1 js的垃圾回收"></a>2.1 js的垃圾回收</h3><p>内存的大小是有限的，当内存不再需要时，我们就要对他进行释放，以便腾出空间。</p>
<p><code>Garbage collection</code>,简称GC。</p>
<h3 id="2-2-引用计数（reference-counting）！important"><a href="#2-2-引用计数（reference-counting）！important" class="headerlink" title="2.2 引用计数（reference counting）！important"></a>2.2 引用计数（reference counting）！important</h3><p>当一个对象有一个引用指向他时，这个对象的引用就+1；当一个对象的引用为0，这个对象可以被销毁掉。</p>
<p>这个方法虽然看起来合理，但是会存在明显的漏洞–<strong>循环引用</strong></p>
<h3 id="2-3-标记清除（mark-Sweep-！important"><a href="#2-3-标记清除（mark-Sweep-！important" class="headerlink" title="2.3 标记清除（mark-Sweep) ！important"></a>2.3 标记清除（mark-Sweep) ！important</h3><p>核心思路是可达性，这个算法是设置一个根对象（root object&#x3D;&#x3D;&#x3D;GO），垃圾回收器会定期从根开始，找到所有从根开始引用的对象，对于那些没有的对象，认为是后续不再用的，就给他销毁，这个算法可以很好地解决循环引用的问题</p>
<h3 id="2-4-其他常见的GC算法"><a href="#2-4-其他常见的GC算法" class="headerlink" title="2.4 其他常见的GC算法"></a>2.4 其他常见的GC算法</h3><ol>
<li>标记整理（Mark- compact）</li>
<li>分代收集（generation collection)<ul>
<li>对象被划分成”新的”和 ”旧的“</li>
<li>减少对老旧对象扫描的频率</li>
</ul>
</li>
<li>增量收集（incremental collection）<ul>
<li>将一个大的-&gt;多个小的</li>
</ul>
</li>
<li>闲时收集（idle-time collection）</li>
</ol>
<h3 id="2-5-v8引擎详细内存"><a href="#2-5-v8引擎详细内存" class="headerlink" title="2.5 v8引擎详细内存"></a>2.5 v8引擎详细内存</h3><p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230515171603798.png" alt="image-20230515171603798"></p>
<h2 id="3-闭包概念的理解"><a href="#3-闭包概念的理解" class="headerlink" title="3. 闭包概念的理解"></a>3. 闭包概念的理解</h2><h3 id="3-1-js-的函数式编程"><a href="#3-1-js-的函数式编程" class="headerlink" title="3.1 js 的函数式编程"></a>3.1 js 的函数式编程</h3><p>js 中函数非常重要，而且是一等公民。函数可以作为另一个函数的参数，也可以作为函数的返回值。<br>vue:optionsAPI-&gt;compositionAPI-&gt;函数 hook<br>react:class-&gt;function-&gt;hooks</p>
<h3 id="3-2-闭包"><a href="#3-2-闭包" class="headerlink" title="3.2 闭包"></a>3.2 闭包</h3><p>在计算机科学:Closure,又叫词法闭包(Lexical Closure)或者函数闭包,是在<strong>头等函数</strong>的编程语言中，实现词法绑定的一种技术，闭包在实现上是一个结构体，他存储了一个函数和一个关联的环境。闭包跟函数最大的区别在于，当捕获闭包的时候，他的<strong>自由变量</strong>会在被捕捉时确定。这样即使脱离了上下文，他也能照常运行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> info = <span class="string">&#x27;唱跳rap&#x27;</span>;</span><br><span class="line"><span class="comment">//有闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  <span class="comment">//js底层帮你做了一件事--闭包</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, name, age, info);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">name, age, info, address, hobby, height</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  <span class="comment">//js底层帮你做了一件事--闭包</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, name, age, info);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, name, age, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里 既有外面的变量 也有我自己的</span></span><br><span class="line"><span class="comment">//全部混淆在一起 --- 希望一个函数只做一件事</span></span><br><span class="line"><span class="title function_">bar</span>(name, age, info, address, hobby, height);</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">//作用域链的存在，就是为了方便你去外面找东西，也就是为了闭包</span></span><br></pre></td></tr></table></figure>

<p>私人:<br>广义上来说，js 中的函数都是闭包。<br>狭义说：js 中的函数，访问了外层作用域的变量，才叫做闭包。</p>
<h2 id="4-闭包的形成过程"><a href="#4-闭包的形成过程" class="headerlink" title="4. 闭包的形成过程"></a>4. 闭包的形成过程</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新手</span></span><br><span class="line"><span class="comment">// function adder(num,count) &#123;</span></span><br><span class="line"><span class="comment">//   return num + count;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// adder(100,5); //105</span></span><br><span class="line"><span class="comment">// adder(5,5); //10</span></span><br><span class="line"><span class="comment">// adder(55,5); //60</span></span><br><span class="line"><span class="comment">// //我要 后三次调用+8</span></span><br><span class="line"><span class="comment">// adder(22,8)</span></span><br><span class="line"><span class="comment">// adder(12,8)</span></span><br><span class="line"><span class="comment">// adder(2,8)</span></span><br><span class="line"><span class="comment">//nest.js 全栈</span></span><br><span class="line"><span class="comment">//老手</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAdder</span>(<span class="params">count</span>) &#123;</span><br><span class="line">  <span class="comment">// function adder(num) &#123;</span></span><br><span class="line">  <span class="comment">//   return count + num;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return adder;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> count + num;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let createAdder1 = count=&gt; num =&gt; count + num;</span></span><br><span class="line"><span class="comment">// let adder4= createAdder1(4)</span></span><br><span class="line"><span class="comment">// let res = adder4(16)</span></span><br><span class="line"><span class="comment">// console.log(res);</span></span><br><span class="line"><span class="keyword">let</span> adder5 = <span class="title function_">createAdder</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">adder5</span>(<span class="number">15</span>); <span class="comment">//20</span></span><br><span class="line"><span class="title function_">adder5</span>(<span class="number">25</span>);</span><br><span class="line"><span class="title function_">adder5</span>(<span class="number">35</span>);</span><br><span class="line"><span class="keyword">let</span> adder8 = <span class="title function_">createAdder</span>(<span class="number">8</span>);</span><br><span class="line"><span class="title function_">adder8</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_">adder8</span>(<span class="number">12</span>);</span><br><span class="line"><span class="title function_">adder8</span>(<span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<p>看图</p>
<h2 id="5-闭包的内存泄漏"><a href="#5-闭包的内存泄漏" class="headerlink" title="5. 闭包的内存泄漏"></a>5. 闭包的内存泄漏</h2><p>我们图里 adder5 adder8 以及对应的 AO 对象，存在引用而且也是根可达的所以即使后续不再使用也不会释放。我们经常说的闭包的内存泄漏，其实就是这些引用链上的对象无法释放。</p>
<h3 id="5-1-如何释放"><a href="#5-1-如何释放" class="headerlink" title="5.1 如何释放"></a>5.1 如何释放</h3><p>比如说我们要释放 adder5,<code>adder5=null</code></p>
<h3 id="5-2-内存泄漏的测试"><a href="#5-2-内存泄漏的测试" class="headerlink" title="5.2 内存泄漏的测试"></a>5.2 内存泄漏的测试</h3><p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/2023-05-16-11-56-33.png" alt="2023-05-16-11-56-33.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;create&quot;</span>&gt;</span>创建很多对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destory&quot;</span>&gt;</span>销毁很多对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//4 1024 -&gt;4kb *1024 -&gt;4M</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1024</span> * <span class="number">1024</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> test;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> totalArr = [];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> createBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> destoryBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.destory&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  createBtn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      totalArr.<span class="title function_">push</span>(<span class="title function_">createArray</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(totalArr.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  destoryBtn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    totalArr = [];</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-AO-不使用的属性优化"><a href="#5-3-AO-不使用的属性优化" class="headerlink" title="5.3 AO 不使用的属性优化"></a>5.3 AO 不使用的属性优化</h3><p>不被销毁的 AO 对象，里面所有的属性都一直保留吗？<br>结论：不使用的不会保留–浏览器自己的优化</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记17-继承</title>
    <url>/2022/05/07/b23%20%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承 "></a>继承 <span id="more"></span></h2><h3 id="1-认识继承"><a href="#1-认识继承" class="headerlink" title="1. 认识继承"></a>1. 认识继承</h3><p>关于 构造函数 的高阶应用<br>继承是出现在两个构造函数之间的关系</p>
<p><strong>当构造函数 B 的实例，使用了构造函数 A 内书写的属性和方法</strong><br>此时我们就说 构造函数 B 继承自 构造函数 A<br>构造函数 A 是构造函数 B 的父类<br>构造函数 B 是构造函数 A 的子类</p>
<ol>
<li>原型继承</li>
<li>call 继承</li>
<li>组合继承</li>
<li>es6 的继承(完美)</li>
</ol>
<h3 id="2-原型继承"><a href="#2-原型继承" class="headerlink" title="2. 原型继承"></a>2. 原型继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当Student 构造函数书写完毕后</span></span><br><span class="line"><span class="comment">//此时 会伴生出一个Student.prototype的对象数据类型</span></span><br><span class="line"><span class="comment">//我们可以向Student.prototype添加属性</span></span><br><span class="line"><span class="comment">// Student.prototype.a=100</span></span><br><span class="line"><span class="comment">// 我们也可以重新赋值</span></span><br><span class="line"><span class="comment">//本身你的Student.prototype保存的是一个 对象数据类型的 地址</span></span><br><span class="line"><span class="comment">//我 给你赋值为一个 新的 对象数据类型 的 地址</span></span><br><span class="line"><span class="comment">//就把你本身保存的地址覆盖掉</span></span><br><span class="line"><span class="comment">// const obj = &#123;</span></span><br><span class="line"><span class="comment">//   msg: &#x27;objjjjjj&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// //验证覆盖</span></span><br><span class="line"><span class="comment">// Student.prototype = obj;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现继承</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student.prototype = obj;</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">play</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没日没夜的玩&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//目前 student只有play属性和gender属性</span></span><br><span class="line"><span class="comment">//继承就是要student有name和age 还有sayHi</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(s.name, s.age, s.sayHi);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>核心:子类原型指向父类的 实例</strong></li>
<li>子类.prototype &#x3D; new 父类</li>
</ul>
<p>优缺点:<br>优化:父类的 构造函数体内 和 原型上的所有内容都能继承<br>缺点:继承下来的属性不在自己身上，子类的实例的所有属性分开了两部分书写，student 自身有一部份，原型上面有一部份。同样是给 子类的实例 使用的属性，在两个位置传递参数 new Person()传递一部份，new Student() 传递一部份</p>
<p>不是不可以，只是不够友好</p>
<h3 id="3-call-继承"><a href="#3-call-继承" class="headerlink" title="3. call 继承"></a>3. call 继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      call继承</span></span><br><span class="line"><span class="comment">      + 核心 利用call调用父类的构造函数</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">gender, ...arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="comment">//this 只要你从构造函数处new出来,永远是实例对象</span></span><br><span class="line">  <span class="comment">//实现继承</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function Student(gender, name, age) &#123;</span></span><br><span class="line"><span class="comment">//   this.gender = gender;</span></span><br><span class="line"><span class="comment">//   //this 只要你new 永远是实例对象</span></span><br><span class="line"><span class="comment">//   //实现继承</span></span><br><span class="line"><span class="comment">//   Person.call(this, name, age);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">play</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没日没夜的玩&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// Person.call(s, &#x27;alex&#x27;, 18);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      构造函数 </span></span><br><span class="line"><span class="comment">        构造函数本身也是一个函数</span></span><br><span class="line"><span class="comment">        是函数就能直接调用，可以不和new连用</span></span><br><span class="line"><span class="comment">        只是没有new的话，就没有创建对象的能力</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="comment">//把Person当作一个普通函数来调用，Person内的this-&gt;window</span></span><br><span class="line"><span class="comment">//Person函数体内的两个属性 加给了window</span></span><br><span class="line"><span class="comment">// Person(&#x27;haha&#x27;, 18);不报错</span></span><br><span class="line"><span class="comment">//既然Person能够当作普通函数来调用</span></span><br><span class="line"><span class="comment">//call来调用函数并且改变里面的this指向</span></span><br><span class="line"><span class="comment">// const obj = &#123; msg: &#x27;我是obj&#x27; &#125;;</span></span><br><span class="line"><span class="comment">// Person.call(obj, &#x27;tom&#x27;, 28);</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br></pre></td></tr></table></figure>

<p><strong>核心:利用 call 调用父类的构造函数</strong>,</p>
<p>优缺点:<br>优点:可以把继承来的属性直接出现在 子类的实例 身上，一个实例需要用的属性可以在同一个位置传递参数<br>缺点:只能继承 构造函数体内书写的内容， 构造函数 原型上的 不能继承</p>
<h3 id="4-组合继承"><a href="#4-组合继承" class="headerlink" title="4. 组合继承"></a>4. 组合继承</h3><p>原型继承和 call&#x2F;apply 继承 优缺点刚好互补<br>一种新的相对完美的继承方式就出来了，利用好这两种方式的优缺点</p>
<p>即两个一起用</p>
<p><strong>利用 call 调用父类的构造函数,子类.prototype &#x3D; new 父类</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      组合继承:</span></span><br><span class="line"><span class="comment">        核心:把 原型继承 和 call继承 合在一起</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">gender, ...arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="comment">//实现call继承，</span></span><br><span class="line">  <span class="comment">//目的:把构造函数体内的属性都拿到</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现原型继承</span></span><br><span class="line"><span class="comment">//目的:拿到Person.prototype上的方法</span></span><br><span class="line"><span class="comment">//这里new Person()可以不用写属性，因为对象属性的访问机制</span></span><br><span class="line"><span class="comment">// Student.prototype = new Person(&#x27;jack&#x27;, 18);</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">play</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没日没夜的玩&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">88</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">name</span>, s.<span class="property">age</span>); <span class="comment">//alex 88</span></span><br></pre></td></tr></table></figure>

<h3 id="5-es6-继承"><a href="#5-es6-继承" class="headerlink" title="5. es6 继承"></a>5. es6 继承</h3><ol>
<li>使用 extends 关键字<br>class 子类 extends 父类{…}</li>
<li>在子类的 constructor 内书写<br>super()</li>
</ol>
<p>注意:必须两个条件同时书写，super 必须写在所有的 this 之前，父类如果是一个 es5 的构造函数，那么也可以正常继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="comment">// class Person &#123;</span></span><br><span class="line"><span class="comment">//   constructor(name, age) &#123;</span></span><br><span class="line"><span class="comment">//     this.name = name;</span></span><br><span class="line"><span class="comment">//     this.age = age;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   sayHi() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;hello world&#x27;);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es5的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">gender, name, age</span>) &#123;</span><br><span class="line">    <span class="comment">//super就类似于call调用父类构造函数</span></span><br><span class="line">    <span class="comment">//把name和age传递过去</span></span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//拿父类的方法</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title class_">SayHi</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记16-原型</title>
    <url>/2022/05/05/b21%20%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型 "></a>原型 <span id="more"></span></h2><ul>
<li>原型的出现，就是为了解决 构造函数的缺点</li>
<li>也就是给我们提供了一个给对象添加函数的方法</li>
</ul>
<h3 id="prototype-显示原型"><a href="#prototype-显示原型" class="headerlink" title="prototype 显示原型"></a>prototype 显示原型</h3><ul>
<li>每个函数天生自带的一个属性，叫 prototype，是一个对象空间</li>
<li>既然每个函数都有，构造函数也是函数，构造函数也有这个对象空间</li>
<li>这个<code>prototype</code>的对象空间可以由函数名来访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//是一个对象</span></span><br></pre></td></tr></table></figure>

<ul>
<li>是对象，我们就可以往里面放东西</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let obj = &#123; &#125;</span></span><br><span class="line"><span class="comment">// obj.name = &quot;xxx&quot;</span></span><br><span class="line"><span class="comment">// obj.sayHi = function()&#123;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;prototype&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//有属性有方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">sayHi</span>); <span class="comment">//undefined 访问不到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>, p1.<span class="property">sayHi</span>); <span class="comment">//能访问到</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们发现了一个叫做<code>prototype</code>的空间和函数有关</li>
<li>并且我们可以向里面放一些东西</li>
<li>重点:在函数的 prototype 里面存储的内容，不是给函数本身使用的，是给函数的每一个实例化对象使用的</li>
</ul>
<h3 id="proto-隐式原型"><a href="#proto-隐式原型" class="headerlink" title="__proto__ 隐式原型"></a><code>__proto__</code> 隐式原型</h3><ul>
<li>每个对象天生自带的一个属性，叫做<code>__proto__</code>,也是一个对象空间</li>
<li>既然每个对象都有，实例化对象也是对象，每一个实例化的对象都有这个属性</li>
<li>这个<code>__proto__</code>对象空间是给对象使用的</li>
<li>当你访问对象中的一个属性的时候<ul>
<li>如果这个对象本身有这个属性，那么直接给你结果</li>
<li>如果没有，就会去<code>__proto__</code>这个对象空间里面找，有的话就给你结果</li>
<li>未完待续</li>
</ul>
</li>
<li>那么这个<code>__proto__</code>指向哪里？<br>这个对象由那个构造函数 new 出来<br>那么这个对象的<code>__proto__</code>就指向该构造函数的<code>prototype</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//p.__proto__和Person.prototype 就是一个空间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实例化对象的隐式原型和构造函数的显示原型是同一个空间</li>
<li>我们就可以通过构造函数的<code>prototype</code>来给实例化对象添加属性</li>
<li>对象访问属性的时候，可以去自己的<code>__proto__</code>中查找</li>
<li>之前的构造函数不合理的地方就解决了<ul>
<li>我们把对象的方法放在构造函数的<code>prototype</code>上</li>
<li>实例化的对象访问的时候就去自己的<code>__proto__</code></li>
<li>也可以使用</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">sayHi</span>();</span><br><span class="line">p1.<span class="title function_">sayHi</span>();</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      p本身没有sayHi方法，就去自己的__proto上找</span></span><br><span class="line"><span class="comment">      p.__proto__就是Person.prototype</span></span><br><span class="line"><span class="comment">      我们在上一步 给Person.prototype添加了一个sayHi方法</span></span><br><span class="line"><span class="comment">      p.sayHi()肯定能执行</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure>

<p>p 和 p1 使用的实际上就是同一个函数</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      原型:</span></span><br><span class="line"><span class="comment">         显示 prototype</span></span><br><span class="line"><span class="comment">            每一个函数天生自带，是一个对象数据类型</span></span><br><span class="line"><span class="comment">            构造函数也是函数，所以也有prototype</span></span><br><span class="line"><span class="comment">            里面有一个constructor的属性 1. 表明我是谁自带的prototype 2.指向自己的构造函数</span></span><br><span class="line"><span class="comment">            是一个对象，我们可以往里面添加属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         隐式 __proto__</span></span><br><span class="line"><span class="comment">            每个对象天生自带，也是一个对象数据类型</span></span><br><span class="line"><span class="comment">            实例对象也是对象 所以也有__proto__</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        对象属性的访问规则</span></span><br><span class="line"><span class="comment">          1. 自己有就给你</span></span><br><span class="line"><span class="comment">          2. 自己没有就去__proto__上找 有给你</span></span><br><span class="line"><span class="comment">          没有？？</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      以后写构造函数的时候</span></span><br><span class="line"><span class="comment">          属性直接写在函数体内</span></span><br><span class="line"><span class="comment">          方法写在构造函数的显示原型上(挂载) </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给Person的原型上添加了一个属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//p.__proto__.a=100</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">a</span>); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<h3 id="面向对象的开发思想"><a href="#面向对象的开发思想" class="headerlink" title="面向对象的开发思想"></a>面向对象的开发思想</h3><p>核心:高内聚低耦合</p>
<p>意义:<br>在开发的时候<br>首先写一个构造函数<br>这个构造函数可以生成能够完成对应的功能对象</p>
<h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><ul>
<li><p>原型:每个函数天生自带 prototype 对象数据类型</p>
<ul>
<li>作用：由构造函数 向原型上添加方法，给该构造函数的所有实例对象用</li>
<li>为了解决将方法写在构造函数体内造成的资源浪费</li>
</ul>
</li>
<li><p>原型链：</p>
<ul>
<li>用<code>__proto__</code>串联起来的对象链状结构</li>
<li>作用:为了对象的访问机制服务的</li>
<li>注意:只是<code>__proto__</code>串联起来的对象，千万不要往 prototype 靠</li>
</ul>
</li>
</ul>
<p>万物皆对象</p>
<p>问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">nam, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hahah&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line"><span class="comment">//问题一：p1的__proto__是谁？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//2.  Person的__proto__是谁？</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      Person是构造函数，同时是一个函数 同时也是一个对象</span></span><br><span class="line"><span class="comment">      只要是对象就会有__proto__属性</span></span><br><span class="line"><span class="comment">      js内有一个内置的构造函数叫做Function 只要是函数 都可以看作Function的实例</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. Person.prototype.__proto__是谁？</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      Person的prototype是函数天生自带的一个对象数据类型</span></span><br><span class="line"><span class="comment">      只要是对象就会有__proto__</span></span><br><span class="line"><span class="comment">      js内有一个内置的构造函数 叫做 Object 只要是对象 都可以看作Object的实例</span></span><br><span class="line"><span class="comment">      Person.prototype对象数据类型 是对象 可以看作Object的实例</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. Function 的__proto__？</span></span><br><span class="line"><span class="comment">//Function是一个构造函数，是函数也是对象</span></span><br><span class="line"><span class="comment">//Function自己是自己的实例，自己是自己的构造函数</span></span><br><span class="line"><span class="comment">//js中 他叫做顶级函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//5. Function.prototype.__proto__ ?</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      Function.prototype 是函数天生自带一个对象数据类型</span></span><br><span class="line"><span class="comment">      是对象就有__proto__</span></span><br><span class="line"><span class="comment">      把Function.prototype看作Object的实例</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//6. Object.__proto__?</span></span><br><span class="line"><span class="comment">//Object是构造函数 是对象也是函数</span></span><br><span class="line"><span class="comment">// 只要是对象就有__proto__</span></span><br><span class="line"><span class="comment">// 是构造函数 是函数 是函数 看作Function的实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//7.Object.prototype.__proto__?</span></span><br><span class="line"><span class="comment">//Object.prototype是函数天生自带的一个对象数据类型</span></span><br><span class="line"><span class="comment">//是对象 就有__proto__</span></span><br><span class="line"><span class="comment">//在js Object顶级对象 Object.prototype叫做顶级原型</span></span><br><span class="line"><span class="comment">//Object.prototype唯一一个没有__proto__的数据类型</span></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">//null</span></span><br></pre></td></tr></table></figure>

<h3 id="对象访问机制"><a href="#对象访问机制" class="headerlink" title="对象访问机制"></a>对象访问机制</h3><p>当你访问一个对象的属性的时候<br>首先在自己身上查找,如果有，给你 停止查找<br>如果没有，自己去<strong>proto</strong>上找<br>如果还没有，再去<strong>proto</strong>上 找<br>依此类推，直到 顶级原型上(Object.prototype)都没有，返回 undefined</p>
<p>结论<br>Object.prototype 添加的内容，所有的对象数据类型都可以使用<br>Function.prototype 添加的内容，所有的函数数据类型都可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Person.prototype&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">b</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Object.prototype&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">c</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Function.prototype&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">a</span>();</span><br><span class="line">p.<span class="title function_">b</span>();</span><br><span class="line"><span class="comment">// p.c(); 报错</span></span><br><span class="line"><span class="comment">// Person.a();报错</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">b</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">c</span>();</span><br></pre></td></tr></table></figure>

<p>例题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line">getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象中的方法</span></span><br><span class="line"><span class="title class_">Father</span>.<span class="title function_">getName</span>(); <span class="comment">//2</span></span><br><span class="line"><span class="comment">//全局的getName方法</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">//4</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Father</span>.<span class="title function_">getName</span>(); <span class="comment">//2 &#123;&#125;</span></span><br><span class="line"><span class="comment">//Father的实例去找getName</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Father</span>().<span class="title function_">getName</span>(); <span class="comment">//3 undefined</span></span><br><span class="line"><span class="comment">//new Father()=&gt;实例对象</span></span><br><span class="line"><span class="comment">// new 实例对象.getName()</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="title class_">Father</span>().<span class="title function_">getName</span>(); <span class="comment">//3 &#123;&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记16-v8引擎的个人理解</title>
    <url>/2022/05/05/b22%20v8%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="js的运行原理"><a href="#js的运行原理" class="headerlink" title="js的运行原理 "></a>js的运行原理 <span id="more"></span></h2><h3 id="1-v8引擎的原理"><a href="#1-v8引擎的原理" class="headerlink" title="1.v8引擎的原理"></a>1.v8引擎的原理</h3><h4 id="1-1-js代码的执行"><a href="#1-1-js代码的执行" class="headerlink" title="1.1 js代码的执行"></a>1.1 js代码的执行</h4><p>script 下载 js执行，操作dom</p>
<p>js作为高阶语言，js代码的执行，也会转成010001的机器码形式，交给硬件运行</p>
<ul>
<li><p>JavaScript执行分为两个阶段，编译阶段和执行阶段。</p>
</li>
<li><p>编译阶段会经过词法分析、语法分析、代码生成步骤生成可执行代码；</p>
</li>
<li><p>JS 引擎执行可执行性代码会创建执行上下文，包括绑定this、创建词法环境和变量环境；词法环境创建外部引用（作用域链）和 记录环境（变量对象，let, const, function, arguments），</p>
</li>
<li><p>JS 引擎创建执行上下完成后开始单线程从上到下一行一行执行 JS 代码了。</p>
</li>
</ul>
<p><strong>chome</strong></p>
<ul>
<li><p>v8的定义</p>
<ol>
<li><p>v8是一个谷歌开源的高性能的引擎，最广泛的用途是浏览器和node.js</p>
</li>
<li><p>C++编写，跨平台的</p>
</li>
</ol>
</li>
</ul>
<h4 id="1-2-v8的架构"><a href="#1-2-v8的架构" class="headerlink" title="1.2 v8的架构"></a>1.2 v8的架构</h4><p><code>Parse</code>:解析，将js代码转化为抽象语法树（ast），如果函数没有调用，是不会转成ast的。</p>
<p><code>Ignition</code>解释器，将ast转化成字节码（byte code）。帮助turbo Fan收集优化信息，如果函数只调用一次，Ignition会执行byte code</p>
<p><code>TurboFan</code>：编译器，将字节码转成cpu可以直接执行的机器码（01001）</p>
<p><strong>如果一个函数被多次调用，在turboFan中会被定义为“热点函数”</strong></p>
<p>热点函数即优化之后的机器码，如果后面热点函数的参数发生了变化，则又会逆优化为字节码重新生成ast</p>
<h4 id="1-3-v8引擎执行代码的大致流程"><a href="#1-3-v8引擎执行代码的大致流程" class="headerlink" title="1.3 v8引擎执行代码的大致流程"></a>1.3 v8引擎执行代码的大致流程</h4><ol>
<li>初始化基础环境；3</li>
<li>解析源码生成AST和作用域；</li>
<li>依据AST和作用域生成字节码；</li>
<li>解释执行字节码；</li>
<li>监听热点代码；</li>
<li>优化热点代码为二进制的机器代码；</li>
<li>去优化生成的二进制机器代码。</li>
</ol>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>scanner 词法分析（lexical analyzer 简写lexer）又叫扫描器</p>
<p>token记号化，tokenization的缩写，也就是sacnner识别到关键字之后就会做预解析或解析的工作</p>
<p>语法分析：</p>
<p>从语法层面上分析，var let function，根据不同的语法生成ast</p>
<h3 id="2-js执行上下文"><a href="#2-js执行上下文" class="headerlink" title="2.js执行上下文"></a>2.js执行上下文</h3><h3 id="2-1-初始化全局对象"><a href="#2-1-初始化全局对象" class="headerlink" title="2.1 初始化全局对象"></a>2.1 初始化全局对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;Foo Message&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = num1 + num2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>



<p>在代码执行之前，js引擎会在堆内存中创建一个全局对象：<code>Global Object（GO)</code></p>
<p>在浏览器中全局对象就是window，所以在执行所有的代码之前window已经创建好了；该对象所有的作用域都能访问；里面包含Date,Arrey,String…</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230515174828538.png" alt="image-20230515174828538"></p>
<blockquote>
<p>全局对象GO是一个独一无二的对象，会在任意代码进入EC之前被创建。初始化的全局对象会包含如Math，String，Date等等属性。还会有一些宿主定义的属性。</p>
</blockquote>
<h3 id="2-2-执行上下文"><a href="#2-2-执行上下文" class="headerlink" title="2.2 执行上下文"></a>2.2 执行上下文</h3><p>js引擎内部有一个执行上下文栈（Execution Context stack，简称ecs)，它是用于执行代码的作用栈</p>
<p>GEC（Global EC)被放入ECS中包含两部分内容</p>
<ol>
<li>在代码执行前，在parser转成AST(抽象语法树)的过程中，他会将全局定义的变量，函数放入到GO中，但是不会赋值，这个过程也被成为变量的作用域提示</li>
<li>在代码执行过程中，对变量赋值，或者执行其他函数</li>
</ol>
<blockquote>
<p>栈内存的特点：先进后出</p>
</blockquote>
<p>只要你想执行代码就要创建执行上下文并放入ECS,且函数执行会是一种插队的关系，即gec执行时如果有函数，则会先进后出，先执行完函数再继续执行gec</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230515174916531.png" alt="image-20230515174916531"></p>
<blockquote>
<p>当我们要执行的代码被转义成ECMA的可执行代码的时候，对应的代码就会进入到执行上下文中。多个需要执行的上下文会在逻辑上形成一个栈结构。栈顶的上下文就是正在执行的。</p>
</blockquote>
<h3 id="2-3-VO对象"><a href="#2-3-VO对象" class="headerlink" title="2.3 VO对象"></a>2.3 VO对象</h3><p>每一个执行上下文都会关联一个对应的VO（variable object 变量对象）变量和函数声明都会被添加到这个VO对象中。</p>
<p>对于全局代码而言我们的VO就是GO，但是函数有点特殊，他会优先把函数对象创建出来，创建的时候默认有name，length，arguments…</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230515175017831.png" alt="image-20230515175017831"></p>
<blockquote>
<p>每一个执行上下文都必须关联到一个 VO 对象，每一个变量和函数在源码里面已经作为 vo 的属性添加到里面，对于函数代码，函数的参数也会被添加。</p>
</blockquote>
<h4 id="补充：函数的length属性"><a href="#补充：函数的length属性" class="headerlink" title="补充：函数的length属性"></a>补充：函数的length属性</h4><p>函数的length属性，是第一个具有默认值之前的参数个数</p>
<ol>
<li>形参个数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">name, age</span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1.<span class="property">length</span>); <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn2.<span class="property">length</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn3.<span class="property">length</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>好像函数的 length 就是形参的个数 2. 默认参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">name = <span class="string">&#x27;alex&#x27;</span></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">name, age = <span class="number">22</span></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">name, age = <span class="number">22</span>, gender</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params">name, age, gender = <span class="string">&#x27;男&#x27;</span></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn6</span>(<span class="params">name = <span class="string">&#x27;alex&#x27;</span>, age, gender</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1.<span class="property">length</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn2.<span class="property">length</span>); <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn3.<span class="property">length</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn4.<span class="property">length</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn5.<span class="property">length</span>); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn6.<span class="property">length</span>); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<p>function 的 length，是第一个具有默认值之前的参数个数</p>
<ol start="3">
<li>剩余参数</li>
</ol>
<p>剩余参数不计入函数的长度中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">name, ...args</span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1.<span class="property">length</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>123[‘toString’].length+123</p>
<p><em>遇到了默认值之后，剩余参数不计入函数的长度中</em></p>
<h3 id="3-函数代码执行"><a href="#3-函数代码执行" class="headerlink" title="3.函数代码执行"></a>3.函数代码执行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;Foo Message&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="number">1.88</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = num1 + num2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>因为每个执行上下文都会关联一个 VO，那么函数执行的时候也要关联对应的 VO，函数的 VO 叫做 AO 对象(Activation Object),这个 AO 对象会作为执行上下文的 VO 来存放变量</p>
<p>创建函数的时候就会创建一个 AO 对象，完全不对，这两者没有任何关系，AO 是函数调用的时候才有的</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230515175724061.png" alt="image-20230515175724061"></p>
<blockquote>
<p>当控制进入函数代码的执行上下文时，将创建一个称为激活对象的对象并将其与执行上下文相关联。 激活对象使用具有名称参数和属性 { DontDelete } 的属性初始化。此属性的初始值是下面描述的参数对象。<br>为了变量实例化的目的，激活对象然后被用作变量对象。</p>
</blockquote>
<h3 id="4-函数代码多次执行"><a href="#4-函数代码多次执行" class="headerlink" title="4.函数代码多次执行"></a>4.函数代码多次执行</h3><p>重新创建对应的 EC，关联对应的 VO，创建对应的 AO，执行完以后弹出栈，如果我们不做任何其他的操作，销毁 AO。</p>
<h3 id="5-函数代码互相调用"><a href="#5-函数代码互相调用" class="headerlink" title="5. 函数代码互相调用"></a>5. 函数代码互相调用</h3><p>一样的操作，只不过是创建对应的 EC，关联对应的 VO，创建对应的 AO，执行完以后弹出栈，如果我们不做任何其他的操作，销毁 AO。</p>
<p>总结:当我们去执行一段代码，不管是全局还是函数内的代码，它就会帮我们创建一个执行上下文，而执行上下文需要关联一个 VO，如果是全局代码，直接用 GO 关联。如果执行的是一个函数，在堆里面创建一个对应的 AO 然后关联起来。然后依次执行代码，等到代码执行完毕以后，对应的执行上下文弹出栈，弹出栈以后，不做任何其他操作会销毁对应的 AO，再去看一下 ECS 栈顶是那块代码，然后继续执行。</p>
<h3 id="6-作用域和作用域链"><a href="#6-作用域和作用域链" class="headerlink" title="6. 作用域和作用域链"></a>6. 作用域和作用域链</h3><h4 id="6-1-全局变量的查找顺序"><a href="#6-1-全局变量的查找顺序" class="headerlink" title="6.1 全局变量的查找顺序"></a>6.1 全局变量的查找顺序</h4><p>去自己的 VO 的查找</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global message&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br></pre></td></tr></table></figure>

<p>作用域提升:对后面定义的变量做一个提前的访问。</p>
<h4 id="6-2-函数变量的查找顺序"><a href="#6-2-函数变量的查找顺序" class="headerlink" title="6.2 函数变量的查找顺序"></a>6.2 函数变量的查找顺序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;foo message&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p><strong>作用域链:</strong><br>作用域链他是一个对象列表，用于变量标识符的求值<br>当进入一个执行上下文的时候，作用域链被创建，并且根据代码类型，添加一系列的对象。</p>
<p>如果是全局，作用域链就只有一个 GO；如果是函数，当函数被创建的时候，而不是调用，他的作用域链就被确定了。</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230515175126220.png" alt="image-20230515175126220"></p>
<blockquote>
<p>每个执行上下文都与一个作用域链相关联。 作用域链是在评估标识符时搜索的对象列表，当代码进行到执行上下文时，将创建作用域链并使用一组初始对象填充，具体取决于代码类型。 在执行上下文中执行期间，执行上下文的范围链仅受 with 声明（见 12.10）和 catch 子句（见 12.14）的影响。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">messsage</span>: <span class="string">&#x27;12312&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&#x27;obj内的bar&#x27;</span>;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">bar</span>();</span><br><span class="line">obj[<span class="string">&#x27;bar&#x27;</span>]();</span><br></pre></td></tr></table></figure>

<h4 id="6-3-多层嵌套的查找顺序"><a href="#6-3-多层嵌套的查找顺序" class="headerlink" title="6.3 多层嵌套的查找顺序"></a>6.3 多层嵌套的查找顺序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line">v</span><br><span class="line"><span class="keyword">var</span> bar = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<h4 id="6-4-几道经典的面试题"><a href="#6-4-几道经典的面试题" class="headerlink" title="6.4 几道经典的面试题"></a>6.4 几道经典的面试题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  n = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//200</span></span><br></pre></td></tr></table></figure>

<p>foo 自身的 AO 里面没有 n,去找<code>[[Scopes]]</code>,只有一个 GO，修改成 200</p>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">200</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">//200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">//100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">200</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">//200</span></span><br><span class="line">  <span class="title function_">foo1</span>();<span class="comment">//100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo2</span>();</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">//u</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开发之中很可能出现的错误❌写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  msg = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = (b = <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记15-函数的this指向</title>
    <url>/2022/05/04/b20%20%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<h2 id="函数的-this-指向"><a href="#函数的-this-指向" class="headerlink" title="函数的 this 指向 "></a>函数的 this 指向 <span id="more"></span></h2><h3 id="this-指向的疑惑"><a href="#this-指向的疑惑" class="headerlink" title="this 指向的疑惑"></a>this 指向的疑惑</h3><p>同一个函数，不同的调用，产生了三种不同的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo函数:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方式一：直接调用</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//window</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">aaa</span> = foo;</span><br><span class="line"><span class="comment">//调用方式二：对象调用</span></span><br><span class="line">obj.<span class="title function_">aaa</span>();</span><br><span class="line"><span class="comment">//调用方式三 new</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">foo</span>(); <span class="comment">//b里面是实例对象</span></span><br></pre></td></tr></table></figure>

<ol>
<li>函数在调用时，js 会默认给 this 绑定一个值</li>
<li>this 的绑定和函数定义的位置无关</li>
<li>this 的绑定和调用方式以及调用位置有关系</li>
<li>this 是在运行时被绑定的</li>
</ol>
<p>4 个绑定规则<br>默认绑定<br>隐式绑定<br>显式绑定<br>new 绑定</p>
<h3 id="this-绑定规则一：默认绑定"><a href="#this-绑定规则一：默认绑定" class="headerlink" title="this 绑定规则一：默认绑定"></a>this 绑定规则一：默认绑定</h3><p>独立函数调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;use strict&#x27;;</span></span><br><span class="line"><span class="comment">//独立函数调用在严格模式下都会指向undefined 而不是window</span></span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="comment">//1.普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo函数:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.函数定义在对象中 但是是独立调用(用变量接了再调用)</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> baz = obj.<span class="property">bar</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      baz = function () &#123;</span></span><br><span class="line"><span class="comment">          console.log(&#x27;bar&#x27;, this);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.高阶函数</span></span><br><span class="line"><span class="comment">//函数作为参数或者返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">  <span class="comment">//foo()</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        cb = function bar()&#123;&#125;</span></span><br><span class="line"><span class="comment">        cb()</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(foo); <span class="comment">//window</span></span><br><span class="line"><span class="title function_">test</span>(obj.<span class="property">bar</span>); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//稍微复杂一丢丢</span></span><br><span class="line"><span class="comment">//都是window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复杂&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="title function_">test2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复杂&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="title function_">test3</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复杂&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>();</span><br></pre></td></tr></table></figure>

<h3 id="this-绑定规则二-隐式绑定"><a href="#this-绑定规则二-隐式绑定" class="headerlink" title="this 绑定规则二: 隐式绑定"></a>this 绑定规则二: 隐式绑定</h3><p>通过某个对象进行调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo函数:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">bar</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">bar</span>(); <span class="comment">//obj对象</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1,</span><br><span class="line">&#125;;</span><br><span class="line">obj1.<span class="title function_">foo</span>(); <span class="comment">//obj1</span></span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>(); <span class="comment">//&#123;name: &#x27;obj1&#x27;, foo: ƒ&#125;</span></span><br><span class="line"><span class="keyword">let</span> bbb = obj1.<span class="property">foo</span>;</span><br><span class="line"><span class="title function_">bbb</span>(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<h3 id="this-绑定规则三-new-绑定"><a href="#this-绑定规则三-new-绑定" class="headerlink" title="this 绑定规则三: new 绑定"></a>this 绑定规则三: new 绑定</h3><p>js 中的函数可以当作类的构造函数来使用，也就是可以使用 new 关键字<br>new 做了那四件事？</p>
<ol>
<li>创建一个新的对象</li>
<li>新的对象会执行 prototype 的连接</li>
<li>这个新对象会被绑定到函数的 this 上(this 的绑定在这一步完成)</li>
<li>如果函数没有返回其他复杂数据类型，那就返回这个新对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向实例对象</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;obj&#x27;</span>); <span class="comment">// &#123;name:&#x27;obj&#x27;&#125;</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;oo&#x27;</span>); <span class="comment">//&#123;name:&#x27;oo&#x27;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;oooobj&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo函数&#x27;</span>, <span class="variable language_">this</span>); <span class="comment">//foo &#123;name:&#x27;oooobj&#x27;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">//&#123;name:&#x27;oooobj&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="this-绑定规则四-显示绑定"><a href="#this-绑定规则四-显示绑定" class="headerlink" title="this 绑定规则四: 显示绑定"></a>this 绑定规则四: 显示绑定</h3><p>隐式绑定的前提条件，调用的对象内部必须有一个对函数的引用，如果没有这样的引用，在进行调用时，会报找不到的错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>(); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<p>正是对象内的函数引用，间接的让 this 绑定到了这个对象上</p>
<p>我们不希望在 对象内部 存着函数的引用,同时又希望函数的this指向这个对象<br>js 的所有函数都可以使用 call&#x2F;bind&#x2F;apply 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// obj.foo = foo;</span></span><br><span class="line"><span class="comment">// // obj.foo()//obj</span></span><br><span class="line"><span class="comment">// let bar = obj.foo;</span></span><br><span class="line"><span class="comment">// // bar()//window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数，并且强制this指向obj</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj); <span class="comment">//obj</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="number">123</span>); <span class="comment">//Number &#123;123&#125;</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//String &#123;&#x27;abc&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="call、apply"><a href="#call、apply" class="headerlink" title="call、apply"></a>call、apply</h4><p>通过 call 或者 apply 绑定 this 对象，显示绑定后，this 就会明确的指向绑定的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">group</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印参数&#x27;</span>, a, b, c);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;oo&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//()调用</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;obj&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//call</span></span><br><span class="line"><span class="comment">//第一个参数:绑定this</span></span><br><span class="line"><span class="comment">//参数列表:后续的参数传递进去作为foo的实参</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj, <span class="string">&#x27;obj&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//apply</span></span><br><span class="line"><span class="comment">//第一个参数:绑定this</span></span><br><span class="line"><span class="comment">//第二个参数:传入的实参，要以数组或者伪数组的形式</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;apply&#x27;</span>, [<span class="string">&#x27;obj&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>如果我们希望一个函数总是显示的绑定到一个对象上（不希望对象里面有该函数的引用，也不希望立即调用该函数），怎么做？</p>
<p>bind 方法，创建一个新的绑定函数(bound function,bf)<br>绑定函数是一个 怪异函数对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">group</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印参数&#x27;</span>, a, b, c);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;args&#x27;</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> baz = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">//this-&gt;obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind的其他参数</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.<span class="title function_">bind</span>(obj, <span class="string">&#x27;bbb&#x27;</span>, <span class="number">11</span>, <span class="number">22</span>);</span><br><span class="line"><span class="title function_">bar</span>(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line"><span class="comment">//this-&gt;&#123;name:aaa&#125;</span></span><br><span class="line"><span class="comment">//参数</span></span><br></pre></td></tr></table></figure>

<h3 id="内置函数的绑定"><a href="#内置函数的绑定" class="headerlink" title="内置函数的绑定"></a>内置函数的绑定</h3><p>setTimeout,forEach,div 的点击<br>根据经验</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //定时函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// setTimeout(function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(this); //window</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;, 1000);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //点击</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// let btn = document.querySelector(&#x27;button&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// btn.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(this); //button</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// btn.addEventListener(&#x27;click&#x27;, function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(this); //button</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//forEach</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">  names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ele</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;forEach&#x27;</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="string">&#x27;obj&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="规则的优先级"><a href="#规则的优先级" class="headerlink" title="规则的优先级"></a>规则的优先级</h3><ol>
<li>默认规则的优先级最低</li>
<li>显示绑定优先级高于隐式绑定</li>
<li>new 绑定高于隐式绑定</li>
<li>new 绑定高于 bind</li>
<li>bind 高于 call apply</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较优先级</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.显示绑定和隐式绑定</span></span><br><span class="line"><span class="comment">//1-1 call/apply高于 隐式</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: foo &#125;;</span><br><span class="line">obj.<span class="title function_">foo</span>(); <span class="comment">//obj</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class="line"><span class="comment">//1-2 bind高于隐式绑定</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.<span class="title function_">bind</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ooo&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: bar,</span><br><span class="line">&#125;;</span><br><span class="line">obj1.<span class="title function_">bar</span>(); <span class="comment">//String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class="line"><span class="comment">//2.new的优先级高于隐式绑定</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo:&#x27;</span>, <span class="variable language_">this</span>); <span class="comment">//foo1 &#123;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === obj);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> obj2.<span class="title function_">foo1</span>();</span><br><span class="line"><span class="comment">//3.new 的优先级 高于 bind</span></span><br><span class="line"><span class="keyword">let</span> bindFn = foo.<span class="title function_">bind</span>(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">bindFn</span>(); <span class="comment">//foo &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.额外的 bind apply call的</span></span><br><span class="line"><span class="comment">//bind优先级高于 apply call</span></span><br><span class="line">bindFn.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>); <span class="comment">//String &#123;&#x27;bbb&#x27;&#125;</span></span><br><span class="line">bindFn.<span class="title function_">apply</span>(<span class="string">&#x27;apply&#x27;</span>); <span class="comment">//String &#123;&#x27;bbb&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="this-绑定之外的情况"><a href="#this-绑定之外的情况" class="headerlink" title="this 绑定之外的情况"></a>this 绑定之外的情况</h3><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>在显示绑定中，传入了 null&#x2F;undefined，这个显示绑定会被忽略，就会使用默认规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="title function_">call</span>(obj); <span class="comment">//obj对象</span></span><br><span class="line"><span class="comment">//全部是window</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="keyword">let</span> bar = foo.<span class="title function_">bind</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<h4 id="情况二-间接函数的引用"><a href="#情况二-间接函数的引用" class="headerlink" title="情况二 间接函数的引用"></a>情况二 间接函数的引用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//window??</span></span><br><span class="line"><span class="comment">//赋值的结果是foo函数</span></span><br><span class="line"><span class="comment">//foo普通调用 window</span></span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)();</span><br><span class="line"><span class="comment">// obj1.foo(); //obj1</span></span><br><span class="line"><span class="comment">// obj2.foo = obj1.foo;</span></span><br><span class="line"><span class="comment">// obj2.foo(); //obj2</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>es6 之后的编写函数的方法，比函数表达式更简洁</p>
<h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><p>():函数的参数<br>{}:函数体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//之前的书写方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo2 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数体&#x27;</span>, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//箭头函数完整写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo3</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo3</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">//练习</span></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>];</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ele, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ele, index, arr);</span><br><span class="line">&#125;);</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ele, index, arr);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="comment">//1.如果只有一个参数，()可以省略</span></span><br><span class="line"><span class="comment">// names.forEach(ele=&gt;&#123;console.log(ele);&#125;)</span></span><br><span class="line"><span class="comment">// let newNums = nums.filter(ele=&gt;&#123;return ele%2===0&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如果函数体中只要一行代码，那么&#123;&#125;可以省略</span></span><br><span class="line"><span class="comment">// names.forEach(ele=&gt;console.log(ele));</span></span><br><span class="line"><span class="comment">//如果带了return 关键字 而且是一行代码 那就不能省略&#123;&#125;</span></span><br><span class="line"><span class="comment">// let newNums = nums.filter(ele=&gt;&#123;return ele%2===0&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.只有一行代码，这行代码会作为函数的返回值</span></span><br><span class="line"><span class="comment">// let newNums = nums.filter(ele=&gt;ele%2===0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 如果你要返回一个对象，这个对象必须加()</span></span><br><span class="line"><span class="comment">// let arrFn = () =&gt; [&#x27;abc&#x27;];</span></span><br><span class="line"><span class="comment">//这里的&#123;&#125;代码块 函数体</span></span><br><span class="line"><span class="comment">// let arrFn = () =&gt; &#123;&#125;;</span></span><br><span class="line"><span class="comment">// let arrFn = () =&gt; (&#123; name: &#x27;obj1&#x27; &#125;);</span></span><br><span class="line"><span class="comment">// console.log(arrFn());</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>];</span><br><span class="line"><span class="comment">//用箭头函数求所有偶数平方的和</span></span><br><span class="line"><span class="keyword">let</span> res = arr</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele ** <span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, ele</span>) =&gt;</span> prev + ele);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不要new箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">a</span>: name &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">foo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数中-this-的使用"><a href="#箭头函数中-this-的使用" class="headerlink" title="箭头函数中 this 的使用"></a>箭头函数中 this 的使用</h3><p>箭头函数中 this 到底指向那？也就是不适用那四条规则，而是根据外层作用域来决定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//window</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">//window</span></span><br><span class="line"><span class="comment">//也是window</span></span><br><span class="line">bar.<span class="title function_">apply</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">//哪怕是显示调用 也没有this 还是找window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// let bar = () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;里面的bar&#x27;, this);</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// return bar;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;里面的bar&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> fn = obj.<span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      let fn =() =&gt; &#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;里面的bar&#x27;, this);</span></span><br><span class="line"><span class="comment">          &#125;;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数中-this-的应用"><a href="#箭头函数中-this-的应用" class="headerlink" title="箭头函数中 this 的应用"></a>箭头函数中 this 的应用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟一个请求</span></span><br><span class="line"><span class="comment">//封装的请求函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callbackFn</span>) &#123;</span><br><span class="line">  <span class="comment">//假设请求的结果在result里面</span></span><br><span class="line">  <span class="keyword">let</span> results = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">  <span class="comment">//回调函数对结果进行一些处理</span></span><br><span class="line">  <span class="title function_">callbackFn</span>(results);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际操作</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">names</span>: [],</span><br><span class="line">  <span class="comment">//network方法请求到数据后放入names</span></span><br><span class="line">  <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// //1.早期的方法</span></span><br><span class="line">    <span class="comment">// // console.log(this); //obj</span></span><br><span class="line">    <span class="comment">// let _this = this;</span></span><br><span class="line">    <span class="comment">// //that</span></span><br><span class="line">    <span class="comment">// request(&#x27;/names&#x27;, function (res) &#123;</span></span><br><span class="line">    <span class="comment">//   _this.names = [].concat(res);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.箭头函数</span></span><br><span class="line">    <span class="title function_">request</span>(<span class="string">&#x27;/names&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">names</span> = res;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">network</span>();</span><br></pre></td></tr></table></figure>

<h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题 1"></a>面试题 1</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sss = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">sss</span>(); <span class="comment">//默认绑定 window</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">//隐式绑定 person</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">//隐式绑定 person</span></span><br><span class="line">  (b = person.<span class="property">sayName</span>)(); <span class="comment">//间接函数引用 window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>

<h3 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题 2"></a>面试题 2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);//person1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//题目开始</span></span><br><span class="line">person1.<span class="title function_">foo1</span>(); <span class="comment">//隐式绑定 person1</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2); <span class="comment">//显示绑定 person2</span></span><br><span class="line">person1.<span class="title function_">foo2</span>(); <span class="comment">//外层作用域 window</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2); <span class="comment">//外层 window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>()(); <span class="comment">//默认绑定 window</span></span><br><span class="line"><span class="comment">//改this为person2 改的是foo3</span></span><br><span class="line"><span class="comment">//foo3return出来的函数 没改</span></span><br><span class="line"><span class="comment">//默认绑定 window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)(); <span class="comment">//默认绑定 window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2); <span class="comment">//显示调用 person2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      foo4内的this-&gt;person1</span></span><br><span class="line"><span class="comment">      调用foo4内的一个箭头函数</span></span><br><span class="line"><span class="comment">      这个箭头函数没有this，找外层</span></span><br><span class="line"><span class="comment">      foo4 this-&gt;person1</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="title function_">foo4</span>()(); <span class="comment">//person1</span></span><br><span class="line"><span class="comment">//把foo4的this绑定为person2</span></span><br><span class="line"><span class="comment">//他是一个箭头函数 找外层 foo4</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)(); <span class="comment">//person2</span></span><br><span class="line"><span class="comment">//foo4 内的this-&gt;person1</span></span><br><span class="line"><span class="comment">//箭头函数call没用 找外层 person1</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2); <span class="comment">//person1</span></span><br></pre></td></tr></table></figure>

<h3 id="面试题-3"><a href="#面试题-3" class="headerlink" title="面试题 3"></a>面试题 3</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      1.创建一个空对象</span></span><br><span class="line"><span class="comment">      2.把空对象赋值给this</span></span><br><span class="line"><span class="comment">      3.执行函数体内的代码</span></span><br><span class="line"><span class="comment">      4.将这个新的对象 默认返回</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo2</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo4</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//person1 person2 都是Person的实例(instance)</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>);</span><br><span class="line">person1.<span class="title function_">foo1</span>(); <span class="comment">//隐式绑定 person1</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2); <span class="comment">//显示绑定 person2</span></span><br><span class="line">person1.<span class="title function_">foo2</span>(); <span class="comment">//上层作用域 person1</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2); <span class="comment">//上层作用域 person1</span></span><br><span class="line">person1.<span class="title function_">foo3</span>()(); <span class="comment">//默认绑定 window</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo3内的this-&gt;person2</span></span><br><span class="line"><span class="comment">       person1.foo3.call(person2) &lt;=&gt;fn</span></span><br><span class="line"><span class="comment">       fn()</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)(); <span class="comment">//默认绑定 window</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo3内的this-&gt;person1</span></span><br><span class="line"><span class="comment">       person1.foo3()&lt;=&gt;fn</span></span><br><span class="line"><span class="comment">       fn.call(person2)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2); <span class="comment">//person2</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo4-&gt;person1</span></span><br><span class="line"><span class="comment">      person1.foo4() &lt;=&gt; a()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">      a() 找外层</span></span><br><span class="line"><span class="comment">      foo4 </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="title function_">foo4</span>()(); <span class="comment">//person1</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo4-&gt;call调用-&gt;person2</span></span><br><span class="line"><span class="comment">      person1.foo4.call(person2) &lt;=&gt; a()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">      找外层 foo4 </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)(); <span class="comment">//person2</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo4 -&gt; person1 </span></span><br><span class="line"><span class="comment">      a()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">      a.call() 找外层</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2); <span class="comment">//person1</span></span><br></pre></td></tr></table></figure>

<h3 id="面试题-4"><a href="#面试题-4" class="headerlink" title="面试题 4"></a>面试题 4</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo1 this-&gt;obj</span></span><br><span class="line"><span class="comment">       person1.obj.foo1() &lt;=&gt; fn</span></span><br><span class="line"><span class="comment">       fn() window</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>()(); <span class="comment">//window</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo1 this-&gt;person2</span></span><br><span class="line"><span class="comment">      person1.obj.foo1.call(person2) &lt;=&gt; fn</span></span><br><span class="line"><span class="comment">      fn()</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)(); <span class="comment">//window</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo1-&gt;obj</span></span><br><span class="line"><span class="comment">      fn.call(person2)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>().<span class="title function_">call</span>(person2); <span class="comment">//显示绑定 person2</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo2 -&gt; obj</span></span><br><span class="line"><span class="comment">      ()=&gt;&#123;&#125; 找外层  foo2</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>()(); <span class="comment">//找外层 (隐式)obj</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo2 -&gt; person2</span></span><br><span class="line"><span class="comment">       ()=&gt;&#123;&#125; 找外层  foo2</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)(); <span class="comment">//person2</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      foo2 -&gt; obj</span></span><br><span class="line"><span class="comment">      ()=&gt;&#123;&#125;.call()改变不了</span></span><br><span class="line"><span class="comment">      找外层</span></span><br><span class="line"><span class="comment">      foo2</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>().<span class="title function_">call</span>(person2); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记14-正则表达式</title>
    <url>/2022/05/03/b19%20%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h2 id="正则"><a href="#正则" class="headerlink" title="正则 "></a>正则 <span id="more"></span></h2><h3 id="认识正则"><a href="#认识正则" class="headerlink" title="认识正则"></a>认识正则</h3><p>正则表达式，“规则表达式”<br>由我们来书写规则，专门用来检测字符串是否符合规则<br>最主要的应用场景 – 表单校验</p>
<p>如何创建正则<br>把一些字母和符号写在<code>//</code>中间的东西，叫正则，比如<code>/abcdefg/</code></p>
<p>创建正则分为两种方式: 字面量和构造函数</p>
<ol>
<li>字面量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/abcdefg/</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>构造函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abcddefg&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO 两种创建方式的区别 欠着</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>用来检测和捕获字符串中的内容</p>
<p>test<br>test() 匹配<br>语法:正则.test(“要检测的字符串”)<br>返回值:一个布尔值<br>如果该字符串符合规则，那就是 true<br>否则 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/abcd/</span>;</span><br><span class="line"><span class="comment">//字符串内必须包含abcd字符片段</span></span><br><span class="line"><span class="keyword">let</span> res1 = reg.<span class="title function_">test</span>(<span class="string">&#x27;hduiashfdiuahbdfbniaudabcd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> res2 = reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>exec<br>&#x2F;&#x2F;TODO 欠着</p>
<h3 id="元字符–基本字符"><a href="#元字符–基本字符" class="headerlink" title="元字符–基本字符"></a>元字符–基本字符</h3><ol>
<li>元字符<br>所有的文本内容<br>特殊符号，用符号来表示一类内容</li>
<li>标识符<br>书写在正则外面，用来修饰正则表达式</li>
</ol>
<h4 id="基本的元字符"><a href="#基本的元字符" class="headerlink" title="基本的元字符"></a>基本的元字符</h4><ol>
<li><code>\d</code>表示一位数字</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示该字符串中至少包含了一位数字(0-9)</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">test</span>(<span class="string">&#x27;das!@#@$#@%$#(1)^&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>\D</code>表示一位 非数字</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示该字符串中至少包含了一位 非数字 的内容</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\D/</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">test</span>(<span class="string">&#x27;123(2423424)&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>\s</code> 表示一位 空白内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\s/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a b&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>\S</code> 表示一位 非空白内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\S/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;             1       &#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;              &#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>\w</code> 表示 一位数字(0-9)字母(a-zA-Z)或者下划线<code>_</code>中的任意一个</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\w/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;~!@#$%^&amp;*()-+&gt;?&lt;&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><code>\W</code>表示一位 非数字字母下划线</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\w/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;~!@#$%^&amp;*()-+&gt;?&lt;&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><code>.</code>表示一位不是\n 的字符</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串中至少包含一位 非换行的内容</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/./</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27; \n&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;\n\n\n\n\n\n\n&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li><code>\</code>转义字符</li>
</ol>
<ul>
<li>把有意义的符号转成没有意义的普通文本</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测有一位小数 8.9  5.6</span></span><br><span class="line"><span class="comment">//数字 非\n 数字</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d\.\d/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1.5&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&amp;5&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1$5&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1 5&#x27;</span>));</span><br><span class="line"><span class="comment">//本身 . 有特殊意义，表示一位非\n</span></span><br><span class="line"><span class="comment">//但是和\ 一起写 \就可以把.转成普通的文本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把没有意义的文本转成有意义的符号<br>w 没有意义表示字符 w 但是你和\一起写 <code>\w</code>表示一位数字字母下划线</li>
</ul>
<h3 id="元字符–边界符号"><a href="#元字符–边界符号" class="headerlink" title="元字符–边界符号"></a>元字符–边界符号</h3><ul>
<li><code>^</code>表示开头</li>
<li><code>$</code>表示结尾</li>
</ul>
<p>注意:当^和$一起使用的时候，表示的是从开头到结尾</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d/</span>; <span class="comment">//至少一位数字</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/^\d/</span>; <span class="comment">//必须以一位数字开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcd1&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abcd1&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d/</span>; <span class="comment">//至少一位数字</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/\d$/</span>; <span class="comment">//必须以一位数字结尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1d&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abcd1&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d$/</span>; <span class="comment">//从开头到结尾只能有一位数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1a2&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="元字符–限定符号"><a href="#元字符–限定符号" class="headerlink" title="元字符–限定符号"></a>元字符–限定符号</h3><p>限定内容出现的次数</p>
<p>注意:一个限定符只能修饰限定符前面的一个内容出现的次数<br><code>*</code>表示 0 ～多次<br>前面的内容重复至少 0 次，0 ～+∞ 次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示字符串 从开头到结尾 数字出现0,无穷次</span></span><br><span class="line"><span class="comment">//空字符串 0次</span></span><br><span class="line"><span class="comment">//只要有字符串，就必须从开头到结尾是数字而且要0～无穷次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d*$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;$&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12345&#x27;</span>));</span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d*/</span>;</span><br><span class="line"><span class="comment">//只要有0～无穷次数字即可</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc123&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><code>+</code>表示 1 ～无穷次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串从开头到结尾 数字至少出现1次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d+$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12345&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字至少一次</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc123&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><code>?</code>表示出现 0 ～ 1 次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串从开头到结尾 数字0～1次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d?$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12345&#x27;</span>));</span><br><span class="line"><span class="comment">//有一位是数字0～1</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d?/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc123&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><code>&#123;n&#125;</code>表示指定出现 n 次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串从开头到结尾 数字出现两次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d&#123;2&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12345&#x27;</span>));</span><br><span class="line"><span class="comment">//表示字符串 数字出现三次</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d&#123;3&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc123&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><code>&#123;n,&#125;</code>表示至少出现 n 次<br>{0,} 等价于<code>*</code><br>{1,} 等价于<code>+</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串从开头到结尾 数字至少出现两次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d&#123;2,&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12345&#x27;</span>));</span><br><span class="line"><span class="comment">//表示字符串 数字至少出现三次</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d&#123;3,&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc123&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><code>&#123;n,m&#125;</code>出现 n~m 次<br>{0,1}等价于<code>?</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串从开头到结尾 数字出现2~5次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d&#123;2,5&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;12345&#x27;</span>));</span><br><span class="line"><span class="comment">//表示字符串 数字出现3~5次</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d&#123;3,5&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc1&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc123&#x27;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小坑</span></span><br><span class="line"><span class="comment">//从开始到结束 a两次 b两次 c两次</span></span><br><span class="line"><span class="comment">// aabbcc</span></span><br><span class="line"><span class="comment">//一个限定符号 只能修饰前面的一个内容</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^a&#123;2&#125;b&#123;2&#125;c&#123;2&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabbcc&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;acbabc&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="元字符–特殊符号"><a href="#元字符–特殊符号" class="headerlink" title="元字符–特殊符号"></a>元字符–特殊符号</h3><p><code>()</code></p>
<ol>
<li>一个整体</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abc要出现两次</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(abc)&#123;2&#125;$/</span>;</span><br><span class="line">reg.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>单独捕获<br>&#x2F;&#x2F;TODO 再说</li>
</ol>
<p><code>|</code> 或者的意思<br>注意：或的边界，要么是<code>()</code>要么是正则的边界</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串从开头到结尾</span></span><br><span class="line"><span class="comment">//要么是abd 要么是acd</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^a(b|c)d$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ab开头或者cd结尾都可</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^ab|cd$/</span>;</span><br><span class="line"><span class="comment">// ^abxxxxxx</span></span><br><span class="line"><span class="comment">// xxxxxcd$</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ababc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1234cd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;cd&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>小练习</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正则:汽车&#123;2&#125;</span></span><br><span class="line"><span class="comment">//汽车可以是 布加迪 也可以是 阿斯顿马丁</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/^(布加迪|阿斯顿马丁)&#123;2&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;布加迪布加迪&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;布加迪阿斯顿马丁&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;阿斯顿马丁布加迪&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;阿斯顿马丁阿斯顿马丁&#x27;</span>));</span><br><span class="line"><span class="comment">//字母abc/def 出现两次</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/^(abc|def)&#123;2&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abcdef&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;defabc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;defdef&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><code>[]</code><br>包含<br>一个<code>[]</code>可以写多个内容，但是一个<code>[]</code>只占一个字符的位置,表示<code>[]</code>内的任意一个内容都可以<br><code>[0-9]</code>等价于<code>\d</code><br><code>[0-9a-zA-Z_]</code>等价于<code>\w</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从开始到结束 只有一位字符</span></span><br><span class="line"><span class="comment">//这个字符可以是a 可以是b 可以是c 也可以是d</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[abcd]$/</span>;</span><br><span class="line"><span class="comment">//(a|b|c|d)</span></span><br></pre></td></tr></table></figure>

<p><code>[^]</code>非<br>一个<code>[^]</code>可以写多个内容，但是一个<code>[^]</code>只占一个字符的位置,表示<code>[^]</code>内的任意一个内容都不可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示字符串从开始到结束只有一位字符</span></span><br><span class="line"><span class="comment">//这个字符除了 a b c d之外都可以</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[^abcd]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><code>-</code> 到 至<br>需要和<code>[]</code>或者<code>[^]</code>连用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0～9的数字均可</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[0-9]$/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>书写在正则表达式外面，专门用来修饰整个正则的符号</p>
<ol>
<li>i(ignore)<br>表示忽略大小写</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/abcd/</span>;</span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/abcd/i</span>;</span><br><span class="line">reg.<span class="title function_">test</span>(<span class="string">&#x27;ABCD&#x27;</span>); <span class="comment">//false</span></span><br><span class="line">reg1.<span class="title function_">test</span>(<span class="string">&#x27;ABCD&#x27;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>g(global)<br>&#x2F;&#x2F;TODO 再说</li>
</ol>
<p>练习 四个小正则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      1. 身份证</span></span><br><span class="line"><span class="comment">        18位数字</span></span><br><span class="line"><span class="comment">        17位数字+x</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">let</span> regIdCard = <span class="regexp">/^\d&#123;17&#125;(\d|x)$/</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      2. 手机号码</span></span><br><span class="line"><span class="comment">        可以有+86也可以没有</span></span><br><span class="line"><span class="comment">        只接受133 135 138其他均不接受</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">let</span> regPhone = <span class="regexp">/^(\+86)?(133|135|138)\d&#123;8&#125;$/</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      3. 邮箱</span></span><br><span class="line"><span class="comment">      @前面:数字字母下划线6~16位</span></span><br><span class="line"><span class="comment">      @后面:qq 163 sina都可以</span></span><br><span class="line"><span class="comment">      后缀只能是com或者cn</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">let</span> regEmail = <span class="regexp">/^\w&#123;6,16&#125;@(qq|163|sina)\.(com|cn)$/</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      4. 用户名</span></span><br><span class="line"><span class="comment">        6～12位 只能由数字字母下划线组成</span></span><br><span class="line"><span class="comment">        不能以下划线开头</span></span><br><span class="line"><span class="comment">        [^_] 不光数字字母可以 @#$%^&amp;*()</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="comment">//经典错误</span></span><br><span class="line"><span class="comment">// let regUserName = /^[^_]\w&#123;5,11&#125;$/;</span></span><br><span class="line"><span class="keyword">let</span> regUserName = <span class="regexp">/^[0-9a-zA-Z]\w&#123;5,11&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="还债"><a href="#还债" class="headerlink" title="还债"></a>还债</h3><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>捕获<br>语法:reg.exec(字符串)<br>作用:从字符串中 把满足正则条件的部份 取出来<br>返回值:</p>
<ol>
<li>原始字符串中没有满足的<br>null</li>
<li>原始字符串中有满足的<ol>
<li>正则没有()也没有 g<br>它的返回值是一个数组<br>索引 0 是第一个满足条件的内容<br>不管捕获多少次，每次都是从原始字符串的索引 0 开始捕获</li>
<li>有 g<br>它的返回值是一个数组<br>索引 0 是第一个满足条件的内容<br>第二次捕获是从第一次捕获的结束位置开始向后查询，知道最后没有为止，再下一次又从头开始</li>
<li>有()<br>它的返回值是一个数组<br>索引 0 是第一个满足条件的内容<br>从索引 1 开始，依次是每个小括号的单独内容<br>()有两个意义:整体，单独捕获 如果不想使用单独捕获，只想作为整体来用需要写成<code>(?:)</code></li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//exec</span></span><br><span class="line"><span class="comment">//1.没有符合的片段 null</span></span><br><span class="line"><span class="comment">// let str = &#x27;asjhdaksjdhuoandjlna&#x27;;</span></span><br><span class="line"><span class="comment">// let reg = /\d&#123;3&#125;/;</span></span><br><span class="line"><span class="comment">// let res = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res);//null</span></span><br><span class="line"><span class="comment">//2. 有符合规则的片段</span></span><br><span class="line"><span class="comment">//2-1 没有() 没有g</span></span><br><span class="line"><span class="comment">// let str = &#x27;asjhda123ks456jdhuoandjlna&#x27;;</span></span><br><span class="line"><span class="comment">// let reg = /\d&#123;3&#125;/;</span></span><br><span class="line"><span class="comment">// let res = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res); //[&#x27;123&#x27;]</span></span><br><span class="line"><span class="comment">// let res2 = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res2); //[&#x27;123&#x27;]</span></span><br><span class="line"><span class="comment">// //2-2 有g</span></span><br><span class="line"><span class="comment">// let str = &#x27;asjhda123ks456jdhuoandjlna&#x27;;</span></span><br><span class="line"><span class="comment">// let reg = /\d&#123;3&#125;/g;</span></span><br><span class="line"><span class="comment">// let res = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res); //[&#x27;123&#x27;]</span></span><br><span class="line"><span class="comment">// let res2 = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res2); //[&#x27;456&#x27;]</span></span><br><span class="line"><span class="comment">// let res3 = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res3); //null</span></span><br><span class="line"><span class="comment">// let res4 = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(res4); //[&#x27;123&#x27;]</span></span><br><span class="line"><span class="comment">// 2-3 有()</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;11010820030223001x&#x27;</span>;</span><br><span class="line"><span class="comment">//返回值是数组，</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)((\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)(?:\d|x))/</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h4 id="两种方式创建的区别"><a href="#两种方式创建的区别" class="headerlink" title="两种方式创建的区别"></a>两种方式创建的区别</h4><ol>
<li>语法不一样</li>
<li>书写标识符的区别</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量直接书写在正则后面</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/123/gi</span>;</span><br><span class="line"><span class="comment">//构造函数 以第二个参数的形式书写</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;gi&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>拼接字符串<br>字面量不接受拼接字符串<br>构造函数可以</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;HH&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&#x27;MM&#x27;</span>;</span><br><span class="line"><span class="comment">//(HH|MM)</span></span><br><span class="line"><span class="comment">//不可以 识别不了变量</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(s|s2)/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg);</span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(<span class="subst">$&#123;s&#125;</span>|<span class="subst">$&#123;s2&#125;</span>)`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>基本元字符的书写</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\s\d\w/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg);</span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\s\\d\\w&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      为什么构造函数要写两个\\</span></span><br><span class="line"><span class="comment">      字符串</span></span><br><span class="line"><span class="comment">      被引号包裹的内容叫字符串</span></span><br><span class="line"><span class="comment">      当你在字符串内书写\的时候，表示转义符号</span></span><br><span class="line"><span class="comment">      把紧贴着他的字符 转换</span></span><br><span class="line"><span class="comment">      - 有意义-&gt;没意义</span></span><br><span class="line"><span class="comment">      - 没意义-&gt;有意义</span></span><br><span class="line"><span class="comment">      n</span></span><br><span class="line"><span class="comment">      \n换行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      new RegExp()</span></span><br><span class="line"><span class="comment">      第一个参数需要一个字符串</span></span><br><span class="line"><span class="comment">      你写的字符串就是正则里面的内容</span></span><br><span class="line"><span class="comment">      想要得到/\d\w/</span></span><br><span class="line"><span class="comment">      写的是\d\w</span></span><br><span class="line"><span class="comment">      但是，在字符串内 \ 转义符</span></span><br><span class="line"><span class="comment">      书写 \w 的时候 就会把w转成有意义的特殊内容</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      可以使用\把\转义掉</span></span><br><span class="line"><span class="comment">      当你书写\\w 的时候 实际得到的是\w</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dw&#x27;</span>); <span class="comment">//dw</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\\d&#x27;</span>); <span class="comment">// \d</span></span><br></pre></td></tr></table></figure>

<h4 id="正则的两个特性"><a href="#正则的两个特性" class="headerlink" title="正则的两个特性"></a>正则的两个特性</h4><ol>
<li>懒惰性<br>每一次捕获都是从 0 开始<br>解决：全局标识符 g</li>
<li>贪婪性<br>贪婪匹配:能拿多少拿多少 尽可能多的匹配内容<br>非贪婪匹配:能拿多少拿多少 尽可能少的匹配内容<br>使用非贪婪的限定符号<br>在原先的限定符后面再写一个?<br><code>*?</code> 0 ～多次 但是 0 次能解决的问题，就不再多<br><code>+?</code>1 ～多次<br><code>?</code>0~1 次<br><code>&#123;n,&#125;?</code><br><code>&#123;n,m&#125;?</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;p class=&quot;box&quot;&gt;你好世界&lt;/p&gt;&lt;span&gt;hello world&lt;/span&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;.+&gt;/</span>;</span><br><span class="line"><span class="comment">//贪婪</span></span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//非贪婪</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/&lt;.+?&gt;/</span>;</span><br><span class="line"><span class="keyword">let</span> res2 = reg2.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记10-事件</title>
    <url>/2022/05/02/b15%20%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件 "></a>事件 <span id="more"></span></h2><h3 id="1-了解事件"><a href="#1-了解事件" class="headerlink" title="1.了解事件"></a>1.了解事件</h3><p>什么是事件？</p>
<ul>
<li>我们使用 代码的方式 和 一个内容 约定好一个行为，当你打开浏览器，触发了该行为，会有对应的代码执行</li>
</ul>
<p>事件的三要素</p>
<ol>
<li>事件源 和谁约定事件 (和由谁触发不一样)</li>
<li>事件类型 约定了一个什么样的事件</li>
<li>事件处理函数 当事件发生时，需要执行的函数</li>
</ol>
<p>这三个内容，目的是为了绑定事件，注册事件</p>
<p>事件的绑定</p>
<ol>
<li>DOM0 级事件<br>事件源.on 事件类型&#x3D;事件处理函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">onclick</span> = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件源:div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件类型:click</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件处理函数:a</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点我干嘛&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给一个事件源的同一个事件类型，只能绑定一个事件处理函数</p>
<ol start="2">
<li>DOM2 级事件(事件侦听器&#x2F;事件监听器)<br>事件源.addEventListener(‘事件类型’,事件处理函数)<br>可以给同一个事件源的同一个事件类型绑定多个处理函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click me&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//事件侦听器</span></span></span><br><span class="line"><span class="language-javascript">  div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-事件解绑"><a href="#2-事件解绑" class="headerlink" title="2. 事件解绑"></a>2. 事件解绑</h3><ol>
<li>DOM 0 级的解绑<br>事件源.on 事件类型 &#x3D; null</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>解绑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//让div的click失效</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//DOM 0级的解绑</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始解绑&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">onclick</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解绑完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DOM 2 级事件解绑<br>事件源.removeEventLister(‘事件类型’,事件处理函数)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>解绑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件处理了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, a);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在这里解绑div的事件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件源.removeEventLister(&#x27;事件类型&#x27;,事件处理函数)</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, a);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解绑完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-事件类型"><a href="#3-事件类型" class="headerlink" title="3. 事件类型"></a>3. 事件类型</h3><ol>
<li>鼠标<br>click 鼠标左键单击<br>dbclick 鼠标左键双击<br>contextmenu 鼠标右键单击<br>mousedown 鼠标按下<br>mouseup 鼠标抬起<br>mousemove 鼠标移动<br>mouseover 鼠标移入<br>mouseout 鼠标移出<br>mouseenter 鼠标移入<br>mouseleave 鼠标移出<br>over&#x2F;out 一套不光移入事件源触发，移入子元素也触发</li>
<li>键盘<br>keydown 键盘按下 任何一个按键都能触发<br>keyup 键盘抬起 任何一个按键都能触发<br>keypress 一直按住 必须要按下可以真实键入内容的按键或者回车键才能触发 ctrl shift alt win</li>
<li>浏览器的<br>DOMContentLoaded 浏览器的已经完全加载了 html，并且构建完了 DOM 树<br>load 浏览器不仅完成了 HTML，还加载完了所有外部资源，img css</li>
<li>表单的<br>focus 聚焦<br>blur 失去焦点<br>change 改变 要求聚焦和失焦 时内容不一致才会触发<br>input 只要表单元素输入内容或者删除内容 就会触发<br>reset 事件都是给 form 标签的由 form 标签内的 reset 按钮触发<br>submit 事件都是给 form 标签的由 form 标签内的 sumbit 按钮触发</li>
<li>触摸<br>只能在移动端使用<br>touchstart 触摸开始：手接触到屏幕的瞬间<br>touchmove 触摸移动<br>touchend 触摸结束</li>
<li>其他<br>selectstart<br>transitionend</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: font-size <span class="number">2s</span> linear;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>12312312312312<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// document.onselectstart = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // console.log(&#x27;选择文本？充个会员先&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   return false;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  p.<span class="property">ontransitionend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;过渡结束了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4. 事件对象"></a>4. 事件对象</h3><p>是一个对象数据类型，里面包含了本次事件的所有信息</p>
<p>拿类似的这种对象,可以作为参数传入函数中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">//拿到事件对象</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-鼠标事件对象的信息"><a href="#5-鼠标事件对象的信息" class="headerlink" title="5. 鼠标事件对象的信息"></a>5. 鼠标事件对象的信息</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">3000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">3000px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//光标相对于浏览器可视窗口左上角的坐标位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>, e.<span class="property">clientY</span>); <span class="comment">//51 52</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//光标相对于文档流左上角的坐标位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>, e.<span class="property">pageY</span>); <span class="comment">//51 52</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//光标相对于元素的左上角的位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>, e.<span class="property">offsetY</span>); <span class="comment">//1 2</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-事件委托"><a href="#6-事件委托" class="headerlink" title="6. 事件委托"></a>6. 事件委托</h3><p>事件委托</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记09-DOM操作补充知识</title>
    <url>/2022/05/02/b14%20DOM%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h3 id="元素的大小、滚动和位置"><a href="#元素的大小、滚动和位置" class="headerlink" title="元素的大小、滚动和位置 "></a>元素的大小、滚动和位置 <span id="more"></span></h3><p><strong>clientWidth 内容宽度加上内边距,不包含滚动条<br>clientHeight 内容高度加上内边距，不包含滚动条</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* box-sizing: border-box; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  恁吃马虾可能需要自己买，俺师傅他不一样。天天买鱼的时候今天顺俩，明天顺俩这又够吃一顿了。你看笑笑了笑了。今天龙虾你准备怎么吃？用蛋黄焗一个，管我给你焗一个。把虾头从这剪掉，虾胃挑出来看到没有，小爪子也给剪掉，后面的长子也拽出来。粑粑平时看你烧都没拽，这不是拍视频吗？人别说我脏！虾里面来点葱姜，料酒，少来一点点白糖，腌个10分钟入入味，来点咸蛋黄沫。师傅我看你都没买过咸蛋黄，这可是你自己做的，你可想知道，就不告诉你。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 根据已经学的 getComputedStyle 肯定可以获取到盒子的宽度/高度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> boxStyle = <span class="title function_">getComputedStyle</span>(box);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(boxStyle.width, boxStyle.height);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.clientWidth 客户端宽度，不是浏览器的宽度 而且他计算的只是内容的宽度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//他指的就是我们的内容加上内边距的宽度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">clientWidth</span>); <span class="comment">// 86 不带单位</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//86 没有计算滚动条 整个内容宽度是100</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// clientHeight同理</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>clientLeft:border-left 的宽度<br>clientTop:border-top 的宽度</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* box-sizing: border-box; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  恁吃马虾可能需要自己买，俺师傅他不一样。天天买鱼的时候今天顺俩，明天顺俩这又够吃一顿了。你看笑笑了笑了。今天龙虾你准备怎么吃？用蛋黄焗一个，管我给你焗一个。把虾头从这剪掉，虾胃挑出来看到没有，小爪子也给剪掉，后面的长子也拽出来。粑粑平时看你烧都没拽，这不是拍视频吗？人别说我脏！虾里面来点葱姜，料酒，少来一点点白糖，腌个10分钟入入味，来点咸蛋黄沫。师傅我看你都没买过咸蛋黄，这可是你自己做的，你可想知道，就不告诉你。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2. clientLeft :左边框的宽度 clientTop上边框的宽度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">clientLeft</span>); <span class="comment">//10</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">clientTop</span>); <span class="comment">//10</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>offsetWidth:元素的完整宽度<br>offsetHeight:元素的完整高度</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* box-sizing: border-box; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  恁吃马虾可能需要自己买，俺师傅他不一样。天天买鱼的时候今天顺俩，明天顺俩这又够吃一顿了。你看笑笑了笑了。今天龙虾你准备怎么吃？用蛋黄焗一个，管我给你焗一个。把虾头从这剪掉，虾胃挑出来看到没有，小爪子也给剪掉，后面的长子也拽出来。粑粑平时看你烧都没拽，这不是拍视频吗？人别说我脏！虾里面来点葱姜，料酒，少来一点点白糖，腌个10分钟入入味，来点咸蛋黄沫。师傅我看你都没买过咸蛋黄，这可是你自己做的，你可想知道，就不告诉你。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">offsetWidth</span>); <span class="comment">//160 =100+20*2+10*2</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>offsetTop:与父元素上边界在 y 轴上的距离<br>offsetLeft:与父元素左边界在 x 轴上的距离</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* box-sizing: border-box; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  恁吃马虾可能需要自己买，俺师傅他不一样。天天买鱼的时候今天顺俩，明天顺俩这又够吃一顿了。你看笑笑了笑了。今天龙虾你准备怎么吃？用蛋黄焗一个，管我给你焗一个。把虾头从这剪掉，虾胃挑出来看到没有，小爪子也给剪掉，后面的长子也拽出来。粑粑平时看你烧都没拽，这不是拍视频吗？人别说我脏！虾里面来点葱姜，料酒，少来一点点白糖，腌个10分钟入入味，来点咸蛋黄沫。师傅我看你都没买过咸蛋黄，这可是你自己做的，你可想知道，就不告诉你。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//4.offsetTop offsetLeft 相对于父元素的距离</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">offsetTop</span>, box.<span class="property">offsetLeft</span>); <span class="comment">//100（padding）+8(margin)=108</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>scrollHeight:可滚动区域的高度<br>scrollTop:滚去的高度</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* box-sizing: border-box; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  恁吃马虾可能需要自己买，俺师傅他不一样。天天买鱼的时候今天顺俩，明天顺俩这又够吃一顿了。你看笑笑了笑了。今天龙虾你准备怎么吃？用蛋黄焗一个，管我给你焗一个。把虾头从这剪掉，虾胃挑出来看到没有，小爪子也给剪掉，后面的长子也拽出来。粑粑平时看你烧都没拽，这不是拍视频吗？人别说我脏！虾里面来点葱姜，料酒，少来一点点白糖，腌个10分钟入入味，来点咸蛋黄沫。师傅我看你都没买过咸蛋黄，这可是你自己做的，你可想知道，就不告诉你。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//5. scrollHeight 整个可滚动区域的高度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.scrollHeight);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//6.scrollTop 滚去的高度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.scrollTop);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">scrollTop</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230423201753817.png" alt="image-20230423201753817"></p>
<h3 id="window-的大小和滚动"><a href="#window-的大小和滚动" class="headerlink" title="window 的大小和滚动"></a>window 的大小和滚动</h3><h4 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 整个浏览器的宽度和高度</span></span><br><span class="line"><span class="comment">//包含调试工具，工具栏</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerHeight</span>);</span><br><span class="line"><span class="comment">//2. 视窗的宽度和高度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="comment">//3.也可以通过html元素来获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(document.documentElement.clientWidth);</span></span><br><span class="line"><span class="comment">// console.log(document.documentElement.clientHeight);</span></span><br><span class="line"><span class="keyword">var</span> htmlEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEl.<span class="property">offsetWidth</span>); <span class="comment">//和上面一样</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEl.<span class="property">offsetHeight</span>); <span class="comment">//8 没有任何内容的html 默认高度 在chrome里面是8</span></span><br></pre></td></tr></table></figure>

<p>outerWidth:整个浏览器的宽度 包含工具栏标签页…<br>outerHeight:整个浏览器的高度<br><strong>innerWidth:视窗的宽度<br>innerHeight:视窗的高度</strong><br>也可以通过 html 来获取宽高</p>
<h4 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h4><p>window 的滚动位置<br>scrollX:x 轴滚动的位置<br>scrollY:Y 轴滚动的位置<br>注意监听 window 的滚动:<code>window.onscroll=function()&#123;&#125;</code></p>
<p>也有对应的方法去滚动<br><code>scrollBy(x,y)</code>:相对于当前位置的(x,y)位置<br><code>scrollto(x,y)</code>:直接滚动到(x,y)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;scroll-by&quot;</span>&gt;</span>我是by<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;scroll-to&quot;</span>&gt;</span>我是to<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 想要获取滚动的位置</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// window.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // 水平方向滚动的位置</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(window.scrollX);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   //垂直方向滚动的位置</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(window.scrollY);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听window的滚动</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollY</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btnBy = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.scroll-by&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btnTo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.scroll-to&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btnBy.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//在原来的基础上再滚动</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">0</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  btnTo.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//直接滚动到对应位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="返回顶部案例"><a href="#返回顶部案例" class="headerlink" title="返回顶部案例"></a>返回顶部案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 滚动行为:平滑滚动 */</span></span></span><br><span class="line"><span class="language-css">    scroll-behavior: smooth;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//默认不显示</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">hidden</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//滚动到一定高度再显示</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">scrollY</span> &gt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">hidden</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">hidden</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>是一个对象数据类型，记录了本次事件的所有信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">//这个a函数是我们调用的吗？</span></span><br><span class="line">  <span class="comment">//当我们点击div，被浏览器捕获到这个点击的行为以后</span></span><br><span class="line">  <span class="comment">//浏览器去调用的</span></span><br><span class="line">  <span class="comment">//定义一个参数叫e/event</span></span><br><span class="line">  <span class="comment">//e里面就是浏览器帮我们装的东西</span></span><br><span class="line">  <span class="comment">//所有和当前click事件相关的信息赋值给e</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="事件对象信息-鼠标事件"><a href="#事件对象信息-鼠标事件" class="headerlink" title="事件对象信息-鼠标事件"></a>事件对象信息-鼠标事件</h4><ol>
<li>clientX 和 clientY 相对于视口</li>
<li>pageX 和 pageY 文档</li>
<li>offsetX,offsetY 元素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//光标相对于浏览器可视窗口左上角的坐标位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>, e.<span class="property">clientY</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//相对于文档流的左上角的坐标位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>, e.<span class="property">pageY</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//相对于触发事件的元素左上角的坐标点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>, e.<span class="property">offsetY</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><ul>
<li>当一个事件在浏览器中触发的时候</li>
<li>不光在自身元素上触发，是会传播出去的</li>
<li>传播的是什么？传播的是事件的<strong>行为</strong></li>
</ul>
<p>概念:当你在一个元素上触发行为的时候，会按照父级结构的顺序向上传递，一直向上传递到 window</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// inner.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(&#x27;inner&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  outer.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doc&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1.如果没有给body绑定事件 那html和window doc的会触发吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      body没有 但是后续还有，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      只是body没有对应的事件处理函数，click这个行为还是要传递到window</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2.不给inner绑定事件，还会传递到window吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      会</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      click这个行为确实发生，只不过inner没有handler(句柄)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      但是click行为还是要向上传递</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      3.如果我只点击粉色的outer，会传播吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      会</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>传播的是行为 传播的是行为 传播的是行为</strong></p>
<h3 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h3><p>搞清楚概念,当一个事件发生了之后,浏览器先捕获到这个事件,然后事件才冒泡传播</p>
<p>事件冒泡:在事件的传播过程中,从目标到 window 的过程<br>事件捕获:在事件的传播过程中,从 window 到目标的过程<br>事件目标:准确触发事件的元素 怎么拿？<code>事件对象.target</code></p>
<p>怎么在捕获阶段执行？<br>DOM 0 级不可以<br>DOM 2 级才可以,addEventListener 的第三个参数实现</p>
<ul>
<li>默认是 false，表示冒泡阶段触发</li>
<li>true，捕获阶段触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//DOM 0 级不可以</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// outer.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(&#x27;outer&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// inner.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(&#x27;inner&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  outer.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">  inner.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  outer.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  inner.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//标准的浏览器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// e.stopPropagation();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ie</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// e.cancelBubble = true;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(abc);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(123);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//try&#123;&#125;catch&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(abc);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch执行了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>e.stopPropagation()</li>
<li>e.cancelBubble &#x3D; true</li>
<li>try{}catch(err){}</li>
</ul>
<h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><ul>
<li>a 跳转</li>
<li>表单提交</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.jd.com&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  a.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//标准浏览器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// e.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ie</span></span></span><br><span class="line"><span class="language-javascript">    e.<span class="property">returnValue</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// return false; 不可取</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> sub = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;submit&quot;]&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(sub);</span></span></span><br><span class="line"><span class="language-javascript">  sub.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>核心思想:当事件冒泡的时候,事件也会传递给父级元素,在父级元素设置事件监听,就可以免去给所有的子元素添加监听事件,且能够做一些特殊的事</p>
<ul>
<li><p>不用事件委托,使用循环绑定:<br>给多个元素绑定相同事件<br>但是有缺点 性能，对于添加的元素无效</p>
</li>
<li><p>事件委托来完成<br>  点击li的时候做一些事<br>  因为事件会传播，如果我给他的父级ul绑定一个点击事件<br>  也会因为我点了li而触发</p>
</li>
<li><p>事件对象里面，有一个非常非常非常重要的属性 target 准确记录了触发事件的元素</p>
</li>
<li><p>原则:<br>   尽可能找距离最近的公共的父级<br>   尽可能找页面上不动的元素来委托</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.bgc</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// var lis = document.querySelectorAll(&#x27;li&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// for (var i = 0; i &lt; lis.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // lis[i]就是每个li</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   lis[i].onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     // console.log(&#x27;我被点了&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     //1.干掉所有</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     for (var j = 0; j &lt; lis.length; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//       lis[j].classList.remove(&#x27;bgc&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     //2.复活自己</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     this.classList.add(&#x27;bgc&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     // console.log(i);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//把所有人干掉</span></span></span><br><span class="line"><span class="language-javascript">    lis.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ele</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      ele.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;bgc&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//复活自己</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;bgc&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.bgc</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我添加一个li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果🍎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉🍌<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>菠萝🍍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// lis.forEach(function (ele) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   ele.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//     console.log(this.textContent);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">  ul.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> t = e.<span class="property">target</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (t.<span class="property">tagName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    li.<span class="property">textContent</span> = <span class="string">&#x27;西瓜🍉&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//把li放到ul里面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// li.onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(li.textContent);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">append</span>(li);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拖拽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1. 三个事件组成</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1-1 鼠标移动，盒子要跟着鼠标移动</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1-2 鼠标按下以后，盒子跟着走</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1-3 鼠标抬起以后，盒子不再跟着走</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        怎么让盒子跟着走？肯定是mousemove里面执行一些操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        开关思想 我们可以在mousemove内准备一个开关</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        如果是false 直接return 如果是 true 我再执行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        什么时候跟着走？什么时候不跟着？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        按下的时候 开关 true</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        抬起的时候 开关为false</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2. 在移动的时候，让div跟着就好</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        把事件往上绑定 document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        拿哪一组坐标？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//提前准备一个开关</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      div.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跟着走&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//打开开关</span></span></span><br><span class="line"><span class="language-javascript">        flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      div.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你自己呆着&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//关闭开关</span></span></span><br><span class="line"><span class="language-javascript">        flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//判断开关</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// if (flag === false) return;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//盒子跟着鼠标移动</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = e.<span class="property">clientX</span> - <span class="number">50</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> y = e.<span class="property">clientY</span> - <span class="number">50</span>;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记11-BOM</title>
    <url>/2022/05/02/b16%20BOM/</url>
    <content><![CDATA[<h2 id="for-循环中的变量的解决方案"><a href="#for-循环中的变量的解决方案" class="headerlink" title="for 循环中的变量的解决方案 "></a>for 循环中的变量的解决方案 <span id="more"></span></h2><p>for循环每循环一次,里面就会有同名的变量,如果用var定义for循环里的i,每次循环i就会被重置为0,所以我们想通过for循环来对某个以i作为索引的子项做某些操作的时候,就会出现问题.</p>
<p>公共结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方案一-this"><a href="#方案一-this" class="headerlink" title="方案一 this"></a>方案一 this</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = btns[i];</span><br><span class="line">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//拿到对应的btn,因为this永远指向触发的那个元素</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案二-先保存索引"><a href="#方案二-先保存索引" class="headerlink" title="方案二 先保存索引"></a>方案二 先保存索引</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      [btn,btn,btn,btn]</span></span><br><span class="line"><span class="comment">      [&#123;index:0&#125;,&#123;index:1&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line"><span class="comment">     for1:var btn = btns[0]</span></span><br><span class="line"><span class="comment">          btn1.index = 0</span></span><br><span class="line"><span class="comment">      for2:var btn = btns[1]</span></span><br><span class="line"><span class="comment">          btn2.index = 1</span></span><br><span class="line"><span class="comment">      for3:var btn= btns[2]</span></span><br><span class="line"><span class="comment">           btn3.index = 2</span></span><br><span class="line"><span class="comment">      for4:var btn = btns[3]</span></span><br><span class="line"><span class="comment">           btn4.index = 3</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = btns[i];</span><br><span class="line">  btn.<span class="property">index</span> = i;</span><br><span class="line">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//千万不要在这里拿</span></span><br><span class="line">    <span class="comment">// console.log(this.index);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(btns[<span class="variable language_">this</span>.<span class="property">index</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案三-通过自定义属性"><a href="#方案三-通过自定义属性" class="headerlink" title="方案三 通过自定义属性"></a>方案三 通过自定义属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> btn = btns[i];</span><br><span class="line">  btn.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span><br><span class="line">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(btns[<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>)]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案四-forEach"><a href="#方案四-forEach" class="headerlink" title="方案四 forEach"></a>方案四 forEach</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      &#123;ele---index&#125;</span></span><br><span class="line"><span class="comment">      &#123;ele---index&#125;</span></span><br><span class="line"><span class="comment">      &#123;ele---index&#125;</span></span><br><span class="line"><span class="comment">      &#123;ele---index&#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="comment">//普通函数可以</span></span><br><span class="line"><span class="comment">// btns.forEach(function (ele, index) &#123;</span></span><br><span class="line"><span class="comment">//   ele.onclick = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(index, ele);</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//箭头函数也可以</span></span><br><span class="line">btns.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele, index</span>) =&gt;</span> &#123;</span><br><span class="line">  ele.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, ele);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="方案五-let-块级作用域"><a href="#方案五-let-块级作用域" class="headerlink" title="方案五 let 块级作用域"></a>方案五 let 块级作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  btns[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案六-IIFE-闭包"><a href="#方案六-IIFE-闭包" class="headerlink" title="方案六 IIFE(闭包)"></a>方案六 IIFE(闭包)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//IIFE把i作为实参传递进去，在内层函数使用</span></span><br><span class="line">  btns[i].<span class="property">onclick</span> = (<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="comment">//每个onclick都构成一个闭包，每个闭包里面都有自己的a</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// btn[0]= function ()&#123;</span></span><br><span class="line"><span class="comment">//   a =0</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// btn[1]=function ()&#123;</span></span><br><span class="line"><span class="comment">//   a =1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="方案七-bind-改变-this-指向-call-apply-bind"><a href="#方案七-bind-改变-this-指向-call-apply-bind" class="headerlink" title="方案七 bind 改变 this 指向 call apply bind"></a>方案七 bind 改变 this 指向 call apply bind</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  btns[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(btns[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// fn.bind()===新函数this 就是对应的按钮</span></span><br></pre></td></tr></table></figure>

<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>Browser Object Model 浏览器对象模型</p>
<ul>
<li>BOM 的顶级对象是 window<ul>
<li>所以和 BOM 相关的内容 都是 window.xxxx</li>
<li>但是在书写的时候，可以省略 window 不写</li>
</ul>
</li>
</ul>
<h3 id="浏览器的窗口尺寸"><a href="#浏览器的窗口尺寸" class="headerlink" title="浏览器的窗口尺寸"></a>浏览器的窗口尺寸</h3><ul>
<li>浏览器的可视窗口的宽度和高度</li>
<li>语法<ol>
<li>window.innerWidth 宽度</li>
<li>window.innerHeight 高度</li>
</ol>
</li>
<li>注意:获取到的尺寸是包含滚动条在内的</li>
</ul>
<h3 id="浏览器的弹出层"><a href="#浏览器的弹出层" class="headerlink" title="浏览器的弹出层"></a>浏览器的弹出层</h3><ol>
<li>window.alert() 提示框</li>
<li>window.confirm() 确认框<br>在提示框的基础上多了一个 取消 按钮<br>返回值是一个布尔值<br>用户点击取消的时候 false<br>用户点击确定的时候 true<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="title function_">confirm</span>(<span class="string">&#x27;你确定不吃麦当劳吗？&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure></li>
<li>window.prompt() 输入框<br>在确认框的基础上多了一个输入框<br>返回值:<br>用户点击取消，那就是 null<br>用户点击的是确定，那就是输入框的内容</li>
</ol>
<p>都会中断程序的继续执行，直到用户操作为止</p>
<h3 id="浏览器的地址栏"><a href="#浏览器的地址栏" class="headerlink" title="浏览器的地址栏"></a>浏览器的地址栏</h3><p>在 window 对象内有一个属性叫做 location 里面存储的都是和地址相关的东西</p>
<ol>
<li>href<br>是一个可读写的属性<br>读:拿到的是当前页面的地址栏的完整信息<br>写:修改当前地址栏</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;https://www.4399.com&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>reload()</li>
</ol>
<p>刷新页面<br>注意：不要写在打开页面就会执行的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器的历史记录"><a href="#浏览器的历史记录" class="headerlink" title="浏览器的历史记录"></a>浏览器的历史记录</h3><p>window 下有一个成员叫 history，里面存储的都是和历史记录相关的信息</p>
<ol>
<li><p>window.history.back()<br>回到上一个历史页面<br>前提：你必须得有上一个页面，当前的页面必须是从某一个页面跳过来的<br>等价于浏览器左上角的 ⬅️ 按钮</p>
</li>
<li><p>window.history.forward()<br>去到下一个页面<br>前提:你必须得有下一个页面，当前的页面必须是从某一个页面退回来的<br>等价于浏览器左上角的 ➡️ 按钮</p>
</li>
<li><p>window.history.go()<br>正整数 前进<br>0 重新打开当前页面<br>负整数 回退</p>
</li>
</ol>
<h3 id="浏览器的标签页"><a href="#浏览器的标签页" class="headerlink" title="浏览器的标签页"></a>浏览器的标签页</h3><ol>
<li>open()<br>window.open(“地址”)<br>开启一个新的标签页</li>
<li>close()<br>window.close()<br>关闭当前标签页<br>只能关闭用 open 打开的页面</li>
</ol>
<h3 id="浏览器常见事件"><a href="#浏览器常见事件" class="headerlink" title="浏览器常见事件"></a>浏览器常见事件</h3><ol>
<li>onload<br>window.onload &#x3D; function(){}<br>页面所有的资源(html 结构，音频，图片…)加载完毕后触发<br>当你把 js 写在 head 里面，而且还要操作元素的时候可以用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(box); <span class="comment">//null</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(box); <span class="comment">//div</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>onresize<br>页面可视窗口大小发生变化的时候触发<br>响应式<br>移动端横屏判断</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111111</span>);</span><br><span class="line">  <span class="keyword">var</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">  <span class="keyword">if</span> (width &gt;= <span class="number">600</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;竖屏体验更好&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>onscroll<br>页面滚动条改变位置时触发<br>window.onscroll &#x3D; function(){}</li>
</ol>
<h3 id="浏览器卷去的尺寸"><a href="#浏览器卷去的尺寸" class="headerlink" title="浏览器卷去的尺寸"></a>浏览器卷去的尺寸</h3><p>分为卷去的高度 和 宽度<br>document.documentElement.scrollTop 有文档声明才能用 卷去的高度<br>document.documentElement.scrollLeft 有文档声明才能用 卷去的宽度<br>document.body.scrollTop 没有文档声明才能用 卷去的高度<br>document.body.scrollLeft 没有文档声明才能用 卷去的宽度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有可能拿到0,不是我们想要的值</span></span><br><span class="line"><span class="comment">//自己做一层处理</span></span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(scrollTop);</span><br></pre></td></tr></table></figure>

<h3 id="浏览器滚动到"><a href="#浏览器滚动到" class="headerlink" title="浏览器滚动到"></a>浏览器滚动到</h3><ol>
<li>scrollTo()<br>window.scrollTo(x,y)<br>x,y 都是数字<br>x:设置卷去的宽度<br>y:设置卷去的高度<br>必须传递两个参数<br>可以平滑的滚动，需要在样式里设置<code>html&#123;scroll-behavior:soomth;&#125;</code></li>
</ol>
<p>传递一个对象类型<br>window.scrollTo({<br>top:yyy,<br>left:xxx,<br>behavior:’smooth’<br>})<br>可以只写一个值，也可以平滑滚动</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记13-es6语法初体验</title>
    <url>/2022/05/02/b18%20es6%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="es6"><a href="#es6" class="headerlink" title="es6 "></a>es6 <span id="more"></span></h2><h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><p>还是定义字符串的方式，使用上和<code>&#39;&#39;</code>单引号以及<code>&quot;&quot;</code>双引号没有区别<br>只不过，当你使用(&#96;&#96;)来定义的时候，具有特殊的能力</p>
<ol>
<li>可以换行书写</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let str =&quot;哈</span></span><br><span class="line"><span class="comment">// 哈&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">哈哈</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>可以在字符串内解析变量<br><code>$&#123;变量&#125;</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`hello world alex今年<span class="subst">$&#123;age&#125;</span>岁了`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数-arrow-function"><a href="#箭头函数-arrow-function" class="headerlink" title="箭头函数(arrow function)"></a>箭头函数(arrow function)</h3><p>es6 的箭头函数，是定义函数的一种新方式<br>只能用来定义函数表达式()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个函数本身是一个匿名函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>语法：<code>()=&gt;&#123;&#125;</code><br>()就是书写形参的位置<br>&#x3D;&gt;是箭头函数的标志<br>{}是书写函数体的地方</p>
<p>箭头函数的特点：</p>
<ol>
<li>可以省略小括号不写<br>当你的形参只有一个的时候，可以不写小括号<br>如果你的形参没有或者两个及以上必须写小括号</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 省略小括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我没有形参&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//</span></span><br><span class="line"><span class="comment">//一个形参可以省略小括号</span></span><br><span class="line"><span class="comment">//这里是因为有代码格式化，本身不写小括号也能正常运行</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">bar</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是bar我有一个形参&#x27;</span>, a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//两个形参 必须写小括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">baz</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">baz</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>可以省略大括号<br>当你的代码只有一句话的时候，可以省略大括号不写，而且这句话就是函数的返回值<br>否则 都必须书写大括号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个箭头函数，函数内只有一句话 a+b</span></span><br><span class="line"><span class="comment">//而且a+b就是函数的返回值</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>filter 例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let arr = [1, 2, 3, 4, 5, 6, 7];</span></span><br><span class="line"><span class="comment">// let res = arr.filter(function(ele)&#123;return ele%2!==0 &#125;)</span></span><br><span class="line"><span class="comment">// let res = arr.filter(function(ele)&#123;return ele%2&#125;)</span></span><br><span class="line"><span class="comment">// let res = arr.filter((ele)=&gt;&#123;return ele%2&#125;)</span></span><br><span class="line"><span class="comment">// let res = arr.filter(ele=&gt;&#123;return ele%2&#125;)</span></span><br><span class="line"><span class="comment">// let res = arr.filter(ele=&gt;ele%2)</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>箭头函数没有 arguments<br>没有所谓的实参的集合</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">203</span>, <span class="number">12312</span>, <span class="number">1231203</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//报错</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>箭头函数内没有 this<br>对箭头函数使用this会返回外部作用域的 this</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//箭头函数fn的外部是div的事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件处理函数的this指向？事件源 div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//所以fn内的this 就是 div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn:&#x27;</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//按说 fn是普通调用，this应该是window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//但是fn是一个arrow function 所以没有this</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是obj&#x27;</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">f2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f2&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">f</span>(); <span class="comment">//this-&gt;obj</span></span><br><span class="line"><span class="comment">//按道理说看调用方式---对象调用 this应该是obj</span></span><br><span class="line"><span class="comment">//但是他是一个箭头函数 所以内部没有this</span></span><br><span class="line">obj.<span class="title function_">f2</span>(); <span class="comment">//this-&gt;window</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>返回值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//额外注意注意注意</span></span><br><span class="line"><span class="comment">//一旦你写了&#123;&#125; 不写return 永远没有返回值</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">baz</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (a -= <span class="number">8</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> res1 = <span class="title function_">baz</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">bar</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> res2 = <span class="title function_">bar</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2 + <span class="number">100</span>); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><p>es6 函数的形参默认值，当你没有传递实参的时候，使用<br>直接在书写形参的时候，以赋值符号给形参设置默认值就可以<br>任何函数都能使用</p>
<blockquote>
<p>如果你给箭头函数的形参设置默认值，那不管多少个形参都要写小括号</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a = <span class="number">100</span>, b = <span class="number">200</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//100 200</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params">a = <span class="number">1</span></span>) =&gt; a;</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">bar</span>(<span class="number">100</span>); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a = <span class="number">10</span>, b = <span class="number">20</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//10 20</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">//100,200</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>); <span class="comment">//100,20</span></span><br></pre></td></tr></table></figure>

<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>es6 的解构赋值，快速的从对象或者数组种获取一些数据</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组怎么写，解构就怎么写<br>把数据换成变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="comment">// let a=arr[0]</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// let e = arr[4]</span></span><br><span class="line"><span class="comment">//用解构来做</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = arr;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>]]]]];</span><br><span class="line"><span class="comment">// let bb = arr[2][2][2][2][0];</span></span><br><span class="line"><span class="keyword">const</span> [a, b, [c, d, [e, f, [g, h, [target]]]]] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target, e);</span><br></pre></td></tr></table></figure>

<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象怎么写，解构就怎么写<br>把数据换成变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure>

<p>解构的时候可以起别名<br>const {键名:别名,键名:别名}&#x3D; obj<br>当你起了别名以后，原先的键名不能在当作变量名，而是使用别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// const &#123;name&#125; =obj  等价于 const name = obj.name</span></span><br><span class="line"><span class="comment">// const &#123;name:a&#125; = obj 等价于 const a = obj.name</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: a, gender, <span class="attr">age</span>: b &#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, gender);</span><br></pre></td></tr></table></figure>

<p>坑 1 使用解构是替换了键名,而不是键值!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">age</span>: a &#125; = obj;</span><br><span class="line"><span class="comment">//等价于  const a = obj.age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//报错</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">const b =12</span></span><br><span class="line"><span class="comment">console.log(c)//报错 未定义</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>坑 2 如上,如果坑的名字叫name,牢记window上还有一个name!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: a &#125; = obj;</span><br><span class="line"><span class="comment">//等价于 const a = obj.name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//&#x27;alex&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//空字符串</span></span><br><span class="line"><span class="comment">// window自带一个name属性</span></span><br></pre></td></tr></table></figure>

<p>坑 3 详见for循环里的变量处理方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 3 3</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">全局定义一个i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  开始循环</span></span><br><span class="line"><span class="comment">   i===0 </span></span><br><span class="line"><span class="comment">    =&gt;定义了一个定时器，定时器的处理函数执行吗？不执行</span></span><br><span class="line"><span class="comment">    =&gt;在队列里面放了一个函数 ()=&gt;&#123;log(i)&#125;</span></span><br><span class="line"><span class="comment">   i===1</span></span><br><span class="line"><span class="comment">    =&gt;定义了一个定时器，定时器的处理函数执行吗？不执行</span></span><br><span class="line"><span class="comment">    =&gt;在队列里面放了一个函数 ()=&gt;&#123;log(i)&#125;</span></span><br><span class="line"><span class="comment">   i===2</span></span><br><span class="line"><span class="comment">    =&gt;定义了一个定时器，定时器的处理函数执行吗？不执行</span></span><br><span class="line"><span class="comment">    =&gt;在队列里面放了一个函数 ()=&gt;&#123;log(i)&#125;</span></span><br><span class="line"><span class="comment">   i===3</span></span><br><span class="line"><span class="comment">    循环结束</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  此时所有同步代码走完，才会去执行异步代码，执行三个函数</span></span><br><span class="line"><span class="comment">  在控制台打印3次i </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>坑 3.1 var全局作用域,let\const块级作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//let 块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">循环开始</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    i===0</span></span><br><span class="line"><span class="comment">    准备了一个定时器函数，暂时不执行()=&gt;&#123;log(i)&#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    i===1</span></span><br><span class="line"><span class="comment">    准备了一个定时器函数，暂时不执行()=&gt;&#123;log(i)&#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    i===2</span></span><br><span class="line"><span class="comment">    准备了一个定时器函数，暂时不执行()=&gt;&#123;log(i)&#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    i===3</span></span><br><span class="line"><span class="comment">    循环结束</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  所有的同步代码走完了，开始执行异步 定时器的函数</span></span><br><span class="line"><span class="comment">  0 1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>坑 3.2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//谁先谁后，打印几个</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//异步</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错 报错会中断程序的执行✅</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line"><span class="comment">//依旧输出了0 1 2</span></span><br><span class="line"><span class="comment">//我们for的时候 这个()=&gt;&#123;log(i)&#125;已经设置了3个</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符..."></a>扩展运算符<code>...</code></h3><p>es6 的扩展运算符，又叫展开合并运算符，有两个意义<br>展开、合并<br>主要是操作 对象 和 数组 的语法<br>语法:<code>...</code></p>
<h4 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h4><p>数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>];</span><br><span class="line"><span class="comment">//把数组展开</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr);</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr, <span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> lis = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  下标为偶数的所有li打印</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> res = lis.<span class="title function_">filter</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> <span class="title class_">Number</span>(ele.<span class="property">innerText</span>) % <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> o2 = &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  ...o1,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2);</span><br></pre></td></tr></table></figure>

<h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>当这个符号书写在函数的形参的位置，叫做合并运算符<br>当前形参位置开始获取实参，直到末尾<br>注意:合并运算符一定要写在最后一位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params">a, b, ...c</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>);</span><br><span class="line"><span class="comment">//作用：箭头函数没有arguments，</span></span><br><span class="line"><span class="comment">//可以使用... 手动给他合并出一个高级的arguments</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">444</span>, <span class="number">444444</span>, <span class="number">550505</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象的小补充,对象属性中放函数的语法糖</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="comment">// age: age,</span></span><br><span class="line">  age,</span><br><span class="line">  foo,</span><br><span class="line">  <span class="attr">baz</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">obj.<span class="title function_">baz</span>();</span><br><span class="line">obj.<span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记12-闭包</title>
    <url>/2022/05/02/b17%20%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包 "></a>闭包 <span id="more"></span></h2><p>闭包是函数的高级使用方式</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的特点"><a href="#函数的特点" class="headerlink" title="函数的特点"></a>函数的特点</h3><ol>
<li>保护私有变量<br>因为每一个函数都会生成一个独立的作用域<br>在函数内部定义的变量 叫 私有变量<br>该变量只能在函数作用域及下级作用域内使用，外部无法使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fnn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fnn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>函数定义时不解析变量<br>函数定义的时候，函数体内的代码完全不执行<br>任何变量不做解析<br>直到执行的时候才会解析变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//使用num变量的值，因为自己的作用域内没有</span></span><br><span class="line">  <span class="comment">//所以使用全局的变量 num</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//函数在定义的阶段，如果解析了变量</span></span><br><span class="line"><span class="comment">//函数体内保存的代码就会是 console.log(100)</span></span><br><span class="line"><span class="comment">//在这里执行的时候，出现的就是100,num=200不会生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数在定义的阶段，如果没有解析变量</span></span><br><span class="line"><span class="comment">//那么函数体内保存的代码就会是 console.log(num)</span></span><br><span class="line"><span class="comment">//在调用的时候，因为上一行代码num=200，所以出现的就是200</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//200</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的两个阶段"><a href="#函数的两个阶段" class="headerlink" title="函数的两个阶段"></a>函数的两个阶段</h3><ol>
<li>定义</li>
<li>调用</li>
</ol>
<p>函数的两个阶段分别做了什么事(记住)</p>
<h4 id="阶段一-定义"><a href="#阶段一-定义" class="headerlink" title="阶段一:定义"></a>阶段一:定义</h4><ol>
<li>在 堆内存 中开辟一段存储的空间</li>
<li>把函数体内的代码，一模一样的复制一份，以字符串的形式放进这个空间，此时不解析变量</li>
<li>把 堆内存 中的空间地址赋值给变量</li>
</ol>
<h4 id="阶段二-调用"><a href="#阶段二-调用" class="headerlink" title="阶段二:调用"></a>阶段二:调用</h4><ol>
<li>按照变量名(函数名)内的地址寻找到 堆内存中对应的空间</li>
<li>在 调用栈 内开辟一段新的函数执行空间</li>
<li>在 新的执行空间 进行形参赋值</li>
<li>在 新的执行空间 进行预解析</li>
<li>在 新的执行空间内 把拿到的函数体代码执行一遍</li>
<li>把 开辟的调用栈 内的 执行空间 销毁(等到你函数内的所有代码执行完毕)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230425170753307.png" alt="image-20230425170753307"></p>
<h4 id="函数执行空间"><a href="#函数执行空间" class="headerlink" title="函数执行空间"></a>函数执行空间</h4><ul>
<li>每个函数都会有一个存储的空间</li>
<li>但是每一次<strong>调用</strong>函数都会生成一个完全不一样的执行空间</li>
<li>并且执行空间 会在函数 执行完毕后就销毁，这和存储空间不一样</li>
</ul>
<p>我们有一些办法让这个执行空间不被销毁<br><strong>闭包</strong>，就是要利用这个 <strong>不销毁的执行空间</strong></p>
<h4 id="函数执行空间不销毁"><a href="#函数执行空间不销毁" class="headerlink" title="函数执行空间不销毁"></a>函数执行空间不销毁</h4><ul>
<li>函数的 执行空间 会在函数执行完毕后 销毁</li>
<li>但是，一旦函数内部返回了一个 <strong>引用数据类型</strong>，并且 <strong>在函数外部有变量接收</strong> 的情况下</li>
<li>这个执行空间 就不会销毁了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//把一个引用数据类型当作fn的返回值</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//o接收的就是fn函数执行后的返回值</span></span><br><span class="line"><span class="comment">//o接收的就是fn内的obj</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230425171052553.png" alt="image-20230425171052553"><br>函数执行的时候，会生成一个函数执行空间，我们叫他 0x100-1<br>代码在 0x100-1 空间中执行<br>在 0x100-1 这个空间中声明了一个对象空间(0x200)<br>在 0x100-1 中把对象 obj 的地址返回<br>函数外部的 o 接收的是一个对象的地址<br>但是这个地址是在 0x100-1 的函数执行空间中的对象的地址<br>因为 o 变量一直在和这个对象的地址关联。所以 0x100-1 这个执行空间一直不会销毁</p>
<p>等到什么时候，执行了一句<code>o=null</code><br>此时，o 变量里面存的地址不再和 0x100-1 函数执行空间关联了<br>这个时候，函数执行空间就销毁</p>
<h3 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h3><p>闭包就是利用 这个函数执行空间不销毁的逻辑<br>有几个条件才能组成闭包</p>
<h4 id="不销毁空间"><a href="#不销毁空间" class="headerlink" title="不销毁空间"></a>不销毁空间</h4><ul>
<li>闭包的第一个条件就是利用不销毁的空间</li>
<li>他返回的只不过不是一个对象</li>
<li>而是返回一个函数数据类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   return ()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>f 变量接收的就是一个 fn 执行空间中匿名函数的地址</p>
<h4 id="内部函数引用外部函数中的变量"><a href="#内部函数引用外部函数中的变量" class="headerlink" title="内部函数引用外部函数中的变量"></a>内部函数引用外部函数中的变量</h4><ul>
<li>涉及到两个函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">// 给函数一个名字a 方便记笔记</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>fn()会生成一个 xxff00 函数执行空间</li>
<li>在 xxff00 这个执行空间内部，定义了一个 a 函数的存储空间 xxff11</li>
<li>全局变量 f 接收到的 xxff00 里面的 xxff11</li>
<li>所以 xxff00 不会销毁</li>
<li>因为他不会销毁，所以里面定义的 var num &#x3D;100 也不会被销毁</li>
<li>将来 f()的时候，就能够访问到 num 里面的 100</li>
<li>如果将来不需要再获取num了，就把f设置为null</li>
</ul>
<h4 id="闭包特点"><a href="#闭包特点" class="headerlink" title="闭包特点"></a>闭包特点</h4><ol>
<li><p>作用域空间不销毁</p>
<ul>
<li>优点 因为不销毁 变量也不会销毁 延长变量的生命周期</li>
<li>缺点 因为不销毁 会一直占用内存 多了以后导致 内存溢出</li>
</ul>
</li>
<li><p>可以利用闭包在一个函数外部访问其内部的私有变量</p>
<ul>
<li>优点 可以在函数外部访问内部数据</li>
<li>缺点 必须要一直保持引用，导致函数的执行栈不被销毁</li>
</ul>
</li>
<li><p>保护私有变量</p>
<ul>
<li>优点 可以把一些变量放在函数里面，不会污染全局</li>
<li>缺点 要利用闭包函数才能访问到，比较麻烦</li>
</ul>
</li>
</ol>
<h4 id="闭包概念"><a href="#闭包概念" class="headerlink" title="闭包概念"></a>闭包概念</h4><p>有一个 A 函数，在 A 函数内部返回一个 B 函数<br>在 A 函数外面有变量引用这个 B 函数<br>B 函数内部访问着 A 函数内部的私有变量</p>
<p>以上三个条件缺一不可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">出现:</span></span><br><span class="line"><span class="comment">需要一个不会销毁的函数执行空间</span></span><br><span class="line"><span class="comment">函数内部 直接 或者 间接返回一个新的函数</span></span><br><span class="line"><span class="comment">内部函数要使用外部函数的私有变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们管 内部函数(fnB) 叫做 外部函数fnA的 闭包函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//外部函数的 私有变量</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fnB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fnB;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//res里面是fnB</span></span><br><span class="line"><span class="comment">//在函数fnA外面是没有办法访问到num这个变量</span></span><br><span class="line"><span class="comment">//n接收就是fnA函数内的私有变量num的值100</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="title function_">fnA</span>();</span><br><span class="line"><span class="keyword">var</span> n = <span class="title function_">res</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//num是一个被fn创建的私有变量</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//fn1是内部函数 是一个闭包</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//使用了外部函数的变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num++);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo = <span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">demo</span>(); <span class="comment">//0</span></span><br><span class="line"><span class="title function_">demo</span>(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次执行外部函数都会开辟新的函数执行空间</span></span><br><span class="line"><span class="comment">//in1 和 in2 是两个不同的不会被销毁的执行空间</span></span><br><span class="line"><span class="keyword">var</span> in1 = <span class="title function_">outerFn</span>();</span><br><span class="line"><span class="title function_">in1</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">in1</span>(); <span class="comment">//2</span></span><br><span class="line"><span class="title function_">in1</span>(); <span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> in2 = <span class="title function_">outerFn</span>();</span><br><span class="line"><span class="title function_">in2</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">in2</span>(); <span class="comment">//2</span></span><br><span class="line"><span class="title function_">in2</span>(); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (n = n + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>()); <span class="comment">//1000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>()); <span class="comment">//1001</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>()); <span class="comment">//1002</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      for0 i 0s</span></span><br><span class="line"><span class="comment">      for1 i 1s</span></span><br><span class="line"><span class="comment">      for2 i 2s</span></span><br><span class="line"><span class="comment">      for3 i  3s</span></span><br><span class="line"><span class="comment">      for4 i 4s</span></span><br><span class="line"><span class="comment">      for5 i  5s</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="comment">// for (var i = 0; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//   setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(i);</span></span><br><span class="line"><span class="comment">//   &#125;, i * 1000);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//使用闭包 修改上述代码让循环输出的结果为 1 2 3 4 5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;, a * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    count = count + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo1 = <span class="title function_">addCount</span>();</span><br><span class="line"><span class="keyword">var</span> foo2 = <span class="title function_">addCount</span>();</span><br><span class="line"><span class="title function_">foo1</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">foo2</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">foo1</span>(); <span class="comment">//2</span></span><br><span class="line"><span class="title function_">foo2</span>(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h3 id="this-面试必问"><a href="#this-面试必问" class="headerlink" title="this 面试必问"></a>this 面试必问</h3><h4 id="1-1-全局"><a href="#1-1-全局" class="headerlink" title="1.1 全局"></a>1.1 全局</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span> === <span class="variable language_">this</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-函数内"><a href="#1-2-函数内" class="headerlink" title="1.2 函数内"></a>1.2 函数内</h4><p>**函数内的 this 和函数如何定义没关系，和函数在哪里定义没关系。<br>只看 函数 是如何调用的(箭头函数例外) **</p>
<ol>
<li>普通调用<br>函数名()<br>该函数内的 this&#x3D;&gt;window</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对象调用<br>对象名.函数名()<br>对象名<a href="">‘函数名’</a><br>arr<a href=""> 索引 </a><br>该函数内的 this 指向点前面的内容<br>也就是那个对象&#x2F;数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">haha</span>: <span class="number">1</span>, <span class="attr">fun</span>: fn &#125;;</span><br><span class="line">obj.<span class="title function_">fun</span>(); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定时器函数</li>
</ol>
<p>指向 window</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(fn, <span class="number">1000</span>); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>事件处理函数<br>事件源.on 事件类型&#x3D;事件处理函数<br>事件源.addEventListener(‘事件类型’,事件处理函数)<br>this&#x3D;&gt;事件源</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  demo.<span class="property">onclick</span> = fn;</span></span><br><span class="line"><span class="language-javascript">  demo.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//div</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>IIFE<br>this&#x3D;&gt;window</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<p>T1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//对象调用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//函数调用</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">f</span>();<span class="comment">//200,100</span></span><br></pre></td></tr></table></figure>

<p>T2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定时器调用，指向window</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">f</span>, <span class="number">1000</span>);<span class="comment">//100,100</span></span><br></pre></td></tr></table></figure>

<p>T3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//指向window</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">//对象调用1a，对象里的函数调用2a</span></span><br><span class="line">  obj.<span class="title function_">f</span>();<span class="comment">//200,100</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>T4</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> x = obj.<span class="property">f</span>;</span><br><span class="line"><span class="title function_">x</span>();</span><br><span class="line"><span class="comment">//两个都是函数调用，100,100</span></span><br></pre></td></tr></table></figure>

<h4 id="改变-this"><a href="#改变-this" class="headerlink" title="改变 this"></a>改变 this</h4><p>强行改变 this 的指向:不管你原来指到那，我让你指哪里，你就得指哪里</p>
<p>前置知识<br>打印分组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br></pre></td></tr></table></figure>

<p>函数普通调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;fn函数内部打印&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">//10 20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>call<br>语法:跟在函数名后面调用<br>函数名.call()<br>对象名.函数名.call()<br>意义:修改函数内的 this 指向<br>参数:<br>第一个参数:函数内的 this 指向<br>第二个参数:依次传递给该函数的实参<br>特点:立即调用函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;fn函数内部打印&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是obj&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>];</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    因为是call调用</span></span><br><span class="line"><span class="comment">    obj变成了fn函数内部的this</span></span><br><span class="line"><span class="comment">    100 给fn的第一个实参 a</span></span><br><span class="line"><span class="comment">    200 给fn的第二个实参 b</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">fn.<span class="title function_">call</span>(obj, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    this-&gt;obj</span></span><br><span class="line"><span class="comment">    a-&gt;100</span></span><br><span class="line"><span class="comment">    b-&gt;200</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">fn.<span class="title function_">call</span>(arr, arr[<span class="number">1</span>], arr[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    this-&gt;arr</span></span><br><span class="line"><span class="comment">    a-&gt;200</span></span><br><span class="line"><span class="comment">    b-&gt;300</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>apply<br>语法:跟在函数名后面调用<br>函数名.apply()<br>对象名.函数名.apply()<br> 意义:修改函数内的 this 指向<br>参数:<br>第一个参数:函数内的 this 指向<br>第二个参数:是一个数组或者伪数组都可以，里面的每一项依次传递给函数<br>特点:立即调用函数<br>特殊作用:改变函数传递参数的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;fn函数内部打印&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是obj&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>];</span><br><span class="line">fn.<span class="title function_">apply</span>(obj, [<span class="number">100</span>, <span class="number">200</span>]); <span class="comment">//obj 100 200</span></span><br><span class="line">fn.<span class="title function_">apply</span>(arr, arr); <span class="comment">//arr 100 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊作用:改变函数传递参数的方式</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">99</span>, -<span class="number">10</span>, <span class="number">21</span>, <span class="number">9</span>];</span><br><span class="line"><span class="comment">// Math.max(数字1，数字2...)</span></span><br><span class="line"><span class="comment">//apply第二个参数可以是数组 伪数组</span></span><br><span class="line"><span class="comment">//伪数组 arguments NodeList HTMLCollection</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>
</li>
<li><p>bind<br>语法:跟在函数名后面调用<br>函数名.bind()<br>对象名.函数名.bind()<br> 意义:修改函数内的 this 指向<br>参数:<br>第一个参数:函数内的 this 指向<br>第二个参数:依次传递给函数的实参<br>特点:不会立即调用函数，而是返回一个新的函数，就是一个被改变了 this 指向的函数<br>特殊作用:改变一些不需要立即执行的函数内的 this 指向</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;fn函数内部打印&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是obj&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> res = fn.<span class="title function_">bind</span>(obj, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">// function bind() &#123;</span></span><br><span class="line"><span class="comment">//   //...</span></span><br><span class="line"><span class="comment">//   return function () &#123;&#125;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="title function_">res</span>();</span><br><span class="line"><span class="comment">// setTimeout(fn, 1000);</span></span><br><span class="line"><span class="comment">//1s之后把fn内的this指向obj</span></span><br><span class="line"><span class="comment">// setTimeout(fn.apply(obj, [100, 200]), 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能利用bind</span></span><br><span class="line"><span class="built_in">setTimeout</span>(fn.<span class="title function_">bind</span>(obj, <span class="number">100</span>, <span class="number">200</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//fn.bind(obj, 100, 200)=&gt;function ()&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>类似用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;fn函数内部打印&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(a, b);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;hahah&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">onclick</span> = fn.<span class="title function_">bind</span>(obj);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><ol>
<li>let 变量</li>
<li>const 常量</li>
</ol>
<h4 id="3-1-let-x2F-const-和-var-区别"><a href="#3-1-let-x2F-const-和-var-区别" class="headerlink" title="3.1 let&#x2F;const 和 var 区别"></a>3.1 let&#x2F;const 和 var 区别</h4><ol>
<li>预解析<br>var 定义变量会预解析，可以先访问不报错<br>let&#x2F;const 不会预解析，必须先定义后使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// console.log(n2);//报错</span></span><br><span class="line"><span class="keyword">let</span> n2 = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n3); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">const</span> n3 = <span class="number">300</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>变量重名<br>var 定义的变量可以重名，只是第二个没有意义<br>let&#x2F;const 不允许在同一作用域下，定义重名的变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//200</span></span><br><span class="line"><span class="comment">// let n1 = 100;</span></span><br><span class="line"><span class="comment">// let n1 = 200;//报错重复定义</span></span><br><span class="line"><span class="comment">// const n2 = 123;</span></span><br><span class="line"><span class="comment">// const n2 = 123;//报错重复定义</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>块级作用域<br>var 没有块级作用域<br>let&#x2F;const 有块级作用域<br>块级作用域：任何书写{}的地方都会限制变量的使用范围</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if (true) &#123;</span></span><br><span class="line"><span class="comment">//   let n1 = 100;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(n1); //报错 未定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n2 = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-let-和-const-的区别"><a href="#3-2-let-和-const-的区别" class="headerlink" title="3.2 let 和 const 的区别"></a>3.2 let 和 const 的区别</h4><ol>
<li>声明时赋值<br>let 可以声明时不赋值<br>const 声明时必须赋值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//undefined</span></span><br><span class="line">n = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//200</span></span><br><span class="line"><span class="comment">// const n2  报错 没有初始化</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>值的修改<br>let 定义的变量可以修改<br>const 定义的常量 不能修改</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">n = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> n1 = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1);</span><br><span class="line"><span class="comment">//尝试修改常量直接报错</span></span><br><span class="line"><span class="comment">// n1 = &#x27;hahahahh &#x27;;</span></span><br><span class="line"><span class="comment">// console.log(n1);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">88</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">//88</span></span><br><span class="line"><span class="comment">// obj = &#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;jack&#x27;,</span></span><br><span class="line"><span class="comment">//   age: 18,</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">//18</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记07-DOM操作（一）</title>
    <url>/2022/05/01/b12%20DOM%E6%93%8D%E4%BD%9C(%E4%B8%80)/</url>
    <content><![CDATA[<h2 id="DOM-操作-一"><a href="#DOM-操作-一" class="headerlink" title="DOM 操作(一) "></a>DOM 操作(一) <span id="more"></span></h2><h3 id="1-什么是-DOM"><a href="#1-什么是-DOM" class="headerlink" title="1. 什么是 DOM"></a>1. 什么是 DOM</h3><p>DOM:Document Object Model 文档对象模型</p>
<p>DOM是在node下的一个对象</p>
<p>DOM 就是 js 和网页中各种内容的一个桥梁，允许开发者去通过 js 操作网页</p>
<h3 id="2-认识-DOM-tree"><a href="#2-认识-DOM-tree" class="headerlink" title="2.认识 DOM tree"></a>2.认识 DOM tree</h3><p><img src="https://miro.medium.com/v2/resize:fit:950/0*Sk5AAj4ze_bDFPA0.png" alt="The Dom Tree(No its not an actual tree) | by Joseph Chavez | Medium"></p>
<h3 id="3-DOM-的整体结构"><a href="#3-DOM-的整体结构" class="headerlink" title="3.DOM 的整体结构"></a>3.DOM 的整体结构</h3><h4 id="3-1-DOM-学习顺序"><a href="#3-1-DOM-学习顺序" class="headerlink" title="3.1 DOM 学习顺序"></a>3.1 DOM 学习顺序</h4><ol>
<li>DOM 元素之间的关系</li>
<li>DOM 元素获取</li>
<li>DOM 节点的 type、tag、content</li>
<li>DOM 节点的 attributes properties</li>
<li>DOM 节点的创建 插入 克隆 删除</li>
<li>DOM 节点的样式、类</li>
<li>DOM 元素&#x2F;window 的大小 滚动 坐标</li>
</ol>
<h4 id="3-2-DOM-继承关系图"><a href="#3-2-DOM-继承关系图" class="headerlink" title="3.2 DOM 继承关系图"></a>3.2 DOM 继承关系图</h4><p>node即代表构成网页的所有元素，其中包括：</p>
<ul>
<li>document，即上面提到的dom</li>
<li>element，即html标签里的内容，HTMLelement继承至element，而不是继承至document</li>
<li>chracterData,这是一个抽象的接口which contains characters（包含无意义的字符）</li>
<li>attr，attribute，指的是标签里的属性值，如id</li>
</ul>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/2023-04-18-16-51-47.png" alt="2023-04-18-16-51-47"></p>
<h3 id="4-节点、元素的导航"><a href="#4-节点、元素的导航" class="headerlink" title="4 节点、元素的导航"></a>4 节点、元素的导航</h3><h4 id="4-1-document-对象"><a href="#4-1-document-对象" class="headerlink" title="4.1 document 对象"></a>4.1 document 对象</h4><p>document对象即 <strong>整个网页</strong></p>
<p>获取非常规标签<br>html 元素:document.documentElement<br>body 元素:document.body<br>head 元素:document.head<br>文档声明:document.doctype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>);</span><br><span class="line"><span class="keyword">var</span> htmlEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="keyword">var</span> bodyEl = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">var</span> headEl = <span class="variable language_">document</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">var</span> doctype = <span class="variable language_">document</span>.<span class="property">doctype</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEl);<span class="comment">//打印出整个网页</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bodyEl);<span class="comment">//打印出body</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(headEl);<span class="comment">//打印出head</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doctype);</span><br></pre></td></tr></table></figure>

<h4 id="4-2-节点-Node-之间的导航-navigator"><a href="#4-2-节点-Node-之间的导航-navigator" class="headerlink" title="4.2 节点(Node)之间的导航(navigator)"></a>4.2 节点(Node)之间的导航(navigator)</h4><p>节点是指构成网页的最小元素，详见第六节</p>
<p>包括：</p>
<ul>
<li>注释</li>
<li>html标签</li>
<li>文本等等</li>
</ul>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/2023-04-18-16-52-19.png" alt="2023-04-18-16-52-19"></p>
<ul>
<li>概念:如果我们获取到一个节点后，可以根据这个节点去获取其他节点，我们称为节点之间的导航</li>
<li>节点之间存在如下关系<br>父节点:parentNode<br>前兄弟节点:previousSibling<br>后兄弟节点:nextSibling<br>子节点:childNodes<br>第一个子节点:firstChild<br>最后一个子节点:lastChild</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是注释，哈哈哈 --&gt;</span></span><br><span class="line">我是文本</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyEl = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取body的所有子节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(bodyEl.childNodes);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 是一个伪数组 arguments实参列表 可以forEach 不能用(比如sort...)其他数组方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> list = bodyEl.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(list);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// list.forEach(function (ele) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(ele);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取body的第一个子节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// var bodyElFirstChild= bodyEl.childNodes[0]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyElFirstChild = bodyEl.<span class="property">firstChild</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyElFirstChild);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取body中的注释 下一个兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyElCommentChild = bodyElFirstChild.<span class="property">nextSibling</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyElCommentChild);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取body的父节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyParent = bodyEl.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyParent);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-元素-Element-之间的导航-navigator"><a href="#4-3-元素-Element-之间的导航-navigator" class="headerlink" title="4.3 元素(Element)之间的导航(navigator)"></a>4.3 元素(Element)之间的导航(navigator)</h4><p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/2023-04-18-16-52-34.png" alt="2023-04-18-16-52-34"></p>
<ul>
<li>概念:如果我们获取到一个元素后，可以根据这个元素去获取其他元素，我们称为元素之间的导航</li>
<li>元素之间存在如下关系<br>父元素:parentElement<br>前兄弟元素:previousElementSibling<br>后兄弟元素:nextElementSibling<br>子元素:children<br>第一个子元素:firstElementChild<br>最后一个子元素:lastElementChild</li>
</ul>
<h4 id="4-4-Document-和-Element-的关系"><a href="#4-4-Document-和-Element-的关系" class="headerlink" title="4.4 Document 和 Element 的关系"></a>4.4 Document 和 Element 的关系</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问对象的某个属性，类似obj.name obj和name之间没有继承</span></span><br><span class="line"><span class="comment">//是这些对象继承于Element,而不是Document继承于Element</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>; <span class="comment">//body对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>; <span class="comment">//head对象</span></span><br></pre></td></tr></table></figure>

<h4 id="4-5-表格-table-元素的导航-navigator"><a href="#4-5-表格-table-元素的导航-navigator" class="headerlink" title="4.5 表格(table)元素的导航(navigator)"></a>4.5 表格(table)元素的导航(navigator)</h4><ul>
<li>table.rows&#x2F;table.tHead&#x2F;table.tFoot&#x2F;table.tBodies</li>
<li>table.rows 表格内部的 tr 的集合</li>
<li>tr<br>tr.cells tr 中所有的单元格的集合<br>tr.sectionRowIndex tbody 内的行索引<br>tr.rowIndex 整个表格中行的索引，包含了表格头部</li>
<li>td.cellIndex 在某一行中某个单元格的索引</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>alex<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>唱，跳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.拿到整个table</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstElementChild</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(table);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="property">tHead</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="property">tBodies</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="property">tFoot</span>); <span class="comment">//null 因为没写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="property">rows</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//拿到第一行</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> rowEl = table.<span class="property">rows</span>[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//第一行第一格</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rowEl.<span class="property">cells</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">  rowEl.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rowEl.<span class="property">sectionRowIndex</span>); <span class="comment">//在tbody中的索引 0</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rowEl.<span class="property">rowIndex</span>); <span class="comment">//包括了所有的行 1</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-6-表单-form-元素的导航-navigator"><a href="#4-6-表单-form-元素的导航-navigator" class="headerlink" title="4.6 表单(form)元素的导航(navigator)"></a>4.6 表单(form)元素的导航(navigator)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取form</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(form);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取form的子元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ipt = form.<span class="property">elements</span>.<span class="property">account</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ipt);</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ipt.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-获取元素的方法"><a href="#5-获取元素的方法" class="headerlink" title="5 获取元素的方法!!!"></a>5 获取元素的方法!!!</h3><h4 id="5-1-getElementBy"><a href="#5-1-getElementBy" class="headerlink" title="5.1 getElementBy*"></a>5.1 <code>getElementBy*</code></h4><ol>
<li>document.getElementById(‘id 名’)通过 id 获取元素</li>
<li>document.getElementsByClassName(‘类名’)</li>
<li>document.getElementsByTagName(‘标签名’)</li>
<li>document.getElementsByName(‘name 属性值’)</li>
</ol>
<h4 id="5-2-query-系列"><a href="#5-2-query-系列" class="headerlink" title="5.2 query 系列"></a>5.2 query 系列</h4><ol>
<li><p>querySelector(‘选择器语法’)<br>获取单个</p>
</li>
<li><p>querySelectorAll(‘选择器语法’)<br>获取多个，如果只有一个符合，也会以 NodeList 给你</p>
</li>
</ol>
<h4 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h4><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">搜索方式</th>
<th align="center">可以在元素上调用？</th>
<th align="center">实时的</th>
</tr>
</thead>
<tbody><tr>
<td align="center">querySelector</td>
<td align="center">Css-selector</td>
<td align="center">✅</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">querySelectorAll</td>
<td align="center">Css-selector</td>
<td align="center">✅</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">getElementById</td>
<td align="center">id</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">getElementsByName</td>
<td align="center">Name</td>
<td align="center">-</td>
<td align="center">✅</td>
</tr>
<tr>
<td align="center">getElementsByTagName</td>
<td align="center"><code>tag or *</code></td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td align="center">getElementsByClassName</td>
<td align="center">Class</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
</tbody></table>
<p>开发常用的是 query 系列，有时候会使用 getElementById 来兼容低版本浏览器</p>
<p>关于实时的理解</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> lisByGet = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> lisByQuery = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建了一个li并且放到ul里面去了</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  li.<span class="property">innerHTML</span> = <span class="string">&#x27;我是后来创建的&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  ul.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lisByGet); <span class="comment">//实时的 3个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lisByQuery); <span class="comment">//非实时 2个</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-Node-节点的属性"><a href="#6-Node-节点的属性" class="headerlink" title="6 Node 节点的属性"></a>6 Node 节点的属性</h3><ul>
<li>什么是节点？<br>页面组成的最小单元</li>
<li>注意事项<br>标签都是节点</li>
</ul>
<h4 id="6-1-nodeType-了解"><a href="#6-1-nodeType-了解" class="headerlink" title="6.1 nodeType(了解)"></a>6.1 nodeType(了解)</h4><p>nodeType 属性提供了一种获取节点类型的方法<br>他是一个数值类型</p>
<ul>
<li>8 注释节点</li>
<li>3 文本节点</li>
<li>1 元素节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">我是文本</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyChildNodes = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyChildNodes);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> comment = bodyChildNodes[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> textNode = bodyChildNodes[<span class="number">2</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> divNode = bodyChildNodes[<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(comment.<span class="property">nodeType</span>); <span class="comment">//8 注释节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeType</span>); <span class="comment">//3 文本节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">nodeType</span>); <span class="comment">//1 元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Node</span>.<span class="property">COMMENT_NODE</span>); <span class="comment">//8</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> node <span class="keyword">of</span> bodyChildNodes) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span> (node.<span class="property">nodeType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//他是xxx节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-nodeName、tagName-了解"><a href="#6-2-nodeName、tagName-了解" class="headerlink" title="6.2 nodeName、tagName(了解)"></a>6.2 nodeName、tagName(了解)</h4><p>nodeName 和 tagName 不同？<br>对于元素，都一样<br>对于其他节点类型不同，nodeName 有值是对应的字符串，tagName 为 undefined</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">我是文本</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyChildNodes = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyChildNodes);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> comment = bodyChildNodes[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> textNode = bodyChildNodes[<span class="number">2</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> divNode = bodyChildNodes[<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//nodeName 节点名称</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//tagName 针对元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">nodeName</span>, comment.<span class="property">nodeName</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">tagName</span>); <span class="comment">//DIV</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(comment.<span class="property">tagName</span>); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-3-data、innerHTML、textContent-掌握"><a href="#6-3-data、innerHTML、textContent-掌握" class="headerlink" title="6.3 data、innerHTML、textContent(掌握)"></a>6.3 data、innerHTML、textContent(掌握)</h4><ul>
<li>data针对非元素节点获取数据(nodeValue)</li>
<li>innerHtml拿到div里面所有的文本包括标签,反之也可以在js对h5添加标签</li>
<li>textContent拿到node（div）里的内容，不包括标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">我是文本</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bodyChildNodes = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyChildNodes);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> comment = bodyChildNodes[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> textNode = bodyChildNodes[<span class="number">2</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> divNode = bodyChildNodes[<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//data针对非元素节点获取数据(nodeValue)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(comment.<span class="property">data</span>, textNode.<span class="property">data</span>, divNode.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//innerHTML textContent</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">innerHTML</span>); <span class="comment">//拿到div里面所有的文本包括标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">textContent</span>); <span class="comment">//不包括标签</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//设置普通文本 没有区别</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// divNode.innerHTML = &#x27;哈哈啊&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// divNode.textContent = &#x27;哈哈啊&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//设置的时候书写了html标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// divNode.innerHTML = &#x27;&lt;h1&gt;哈哈哈&lt;/h1&gt;&#x27;; //h1当作元素来解析</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// divNode.textContent = &#x27;&lt;h1&gt;哈哈哈&lt;/h1&gt;&#x27;; //当作普通文本</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">outerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">  divNode.<span class="property">innerText</span> = <span class="string">&#x27;&lt;h1&gt;哈哈哈&lt;/h1&gt;&#x27;</span>; <span class="comment">//少用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//innerText和textContent有区别，</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//innerText的值依赖于渲染之后的结果，会受到css样式的影响，会触发重排（reflow）会有一定的性能影响</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//我知道用textContent比较好就可以了</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-节点的其他属性"><a href="#6-4-节点的其他属性" class="headerlink" title="6.4 节点的其他属性"></a>6.4 节点的其他属性</h4><ul>
<li>DOM 元素的其他属性<br>value 常用于表单元素 input&#x2F;select<br>href a 标签的链接<br>id 全局属性( id class title style…)<br>全局属性是所有元素都可以使用的属性</li>
<li>class&#x2F;style 比较特殊,后续再解释</li>
<li>hidden 也是一个全局属性，可以用于设置元素的显示&#x2F;隐藏</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//事件句柄 handler  回调函数</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//点击按钮之后 你要做的事写在这个函数里面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(123);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.hidden = true;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.style.display = &#x27;none&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//切换</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.hidden = true;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// if (box.hidden === true) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   box.hidden = false;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   box.hidden = true;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//直接取反</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">hidden</span> = !box.<span class="property">hidden</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记08-DOM操作（二）</title>
    <url>/2022/05/01/b13%20%20DOM%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="DOM-操作-二"><a href="#DOM-操作-二" class="headerlink" title="DOM 操作(二) "></a>DOM 操作(二) <span id="more"></span></h2><h3 id="1-元素的特性-attribute"><a href="#1-元素的特性-attribute" class="headerlink" title="1. 元素的特性 attribute"></a>1. 元素的特性 attribute</h3><p>浏览器在解析 html 元素时，会将对应的 attribute 也创建出来放在相应的对象上<br>比如 id、class 是全局的 attribute，会有对应的 id、class</p>
<h4 id="1-1-attribute-的分类"><a href="#1-1-attribute-的分类" class="headerlink" title="1.1 attribute 的分类"></a>1.1 attribute 的分类</h4><ul>
<li>标准的 attribute 比如 id class title href value</li>
<li>非标准的 attribute 开发者自定义的 比如 age kfc abc</li>
</ul>
<blockquote>
<p>age&#x3D;”18”</p>
<p>age &#x3D; attribute</p>
<p>“18”&#x3D;property</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;160&quot;</span> <span class="attr">kfc</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-attribute-的操作"><a href="#1-2-attribute-的操作" class="headerlink" title="1.2 attribute 的操作"></a>1.2 attribute 的操作</h4><p>所有的 attribute 都可以支持如下方法:<br>ele.hasAttribute(name)- 检查某个特性是否存在<br>ele.getAttribute(name)- 获取这个特性值<br>ele.setAttribute(name,value) - 设置某个特性值<br>ele.removeAttribute(name) - 移除某个特性 值<br>ele.attributes attr 的对象集合，具有 name、value 属性</p>
<p>attribute 的特征<br>大小写不敏感(id 和 ID 相同)<br>他们的值总是字符串类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- get --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">AGE</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;160&quot;</span> <span class="attr">kfc</span>=<span class="string">&quot;50&quot;</span>&gt;</span>v我50<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1. 所有的属性都支持的操作</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//检查某一个属性是否存在</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;class&#x27;</span>), <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;name&#x27;</span>), <span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;age&#x27;</span>) <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取某个属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">getAttribute</span>(<span class="string">&#x27;age&#x27;</span>), box.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//设置某个属性</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  box.<span class="title function_">setAttribute</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;99999&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//移除某个特性</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//attributes 属性 所有属性的集合</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">attributes</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">of</span> box.<span class="property">attributes</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性-------属性值&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">name</span>, attr.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//通过getAttribute拿到的一定是字符串类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ipt.<span class="title function_">getAttribute</span>(<span class="string">&#x27;checked&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-元素的属性-property"><a href="#2-元素的属性-property" class="headerlink" title="2. 元素的属性 property"></a>2. 元素的属性 property</h3><h4 id="2-1-元素-property-的操作"><a href="#2-1-元素-property-的操作" class="headerlink" title="2.1 元素 property 的操作"></a>2.1 元素 property 的操作</h4><ul>
<li><p>对于标准的 attribute,会在 DOM 对象上创建其对应的 property 属性</p>
</li>
<li><p>大多数情况下，他们都是相互作用的</p>
<ul>
<li>改变 property，通过 attribute 获取的值，会随着改变</li>
<li>通过 setAttribute 设置值，property 的值会随着改变<br>但是 input 的 value 修改只能走 attribute</li>
</ul>
</li>
<li><p>除非特别情况，大多数情况下推荐使用 property 方式，因为他默认情况下是有类型的.</p>
</li>
<li><p><code>element.setAttribute(name, value);</code>可以定义一个属性及对应的值</p>
</li>
<li><p><code>let attribute = element.getAttribute(attributeName);</code>获取某个属性的值</p>
</li>
<li><p><code>element.removeAttribute(attrName);</code><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>元素</code></a>方法 <strong><code>removeAttribute()</code></strong> 从指定的元素中删除一个属性。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="comment">//name就是obj的property</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 元素之中的属性称为attribute --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标准的attribute在对应的对象中都有对应的property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我是盒子&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">AGE</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;160&quot;</span> <span class="attr">kfc</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">  v我50</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;account&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>设置ipt的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//对象中的属性称之为property</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.dir(box);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//对于非标准的 都是undefined</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//对于标准的 能拿到（class相对特殊）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.id, box.class, box.AGE, box.title);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//判断ipt是否选中</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// if (ipt.getAttribute(&#x27;checked&#x27;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(&#x27;checkbox属于选中&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(ipt.checked);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (ipt.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;checkbox属于选中&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//attribute和property 是相互影响的</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">id</span> = <span class="string">&#x27;aaaaa&#x27;</span>; <span class="comment">//改动porperty 有</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//改attribute</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="title function_">setAttribute</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;V我50&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">title</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//3. 特殊情况,input设置值（了解即可）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> acc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.account&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//设置元素的attribute中的value为juanjie attribute优先级更高</span></span></span><br><span class="line"><span class="language-javascript">    acc.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;juanjie&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//设置对应的property value为student</span></span></span><br><span class="line"><span class="language-javascript">    acc.<span class="property">value</span> = <span class="string">&#x27;student&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-HTML5-的data-自定义属性"><a href="#2-2-HTML5-的data-自定义属性" class="headerlink" title="2.2 HTML5 的data-* 自定义属性"></a>2.2 HTML5 的<code>data-*</code> 自定义属性</h4><p>h5 的自定义属性</p>
<ul>
<li>在元素节点上有一个 dataset 的成员</li>
<li>是一个类似 对象 的数据类型</li>
<li>里面存储着所有 data-开头的自定义属性</li>
<li>有的时候需要拿<strong>html里循环的list的索引</strong>，但是不能直接拿到，就用自定义属性拿</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;box&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">&quot;我是盒子&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;box&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">AGE</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">kfc</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-age</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-kfc</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  v我50</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>.<span class="property">kfc</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//修改？</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">dataset</span>.<span class="property">age</span> = <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//增加</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">dataset</span>.<span class="property">a</span> = <span class="number">200</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//删除</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">delete</span> box.<span class="property">dataset</span>.<span class="property">a</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-元素的-class、style"><a href="#3-元素的-class、style" class="headerlink" title="3.元素的 class、style"></a>3.元素的 class、style</h3><p>动态修改样式的两个选择</p>
<ol>
<li>在 css 中写好对应的样式，然后动态操作元素的类名</li>
<li>动态的修改 style 属性</li>
</ol>
<p>开发？更推荐用 class，不得不用 style(精准修改某一个的 css 属性的值)</p>
<h4 id="3-1-初体验"><a href="#3-1-初体验" class="headerlink" title="3.1 初体验"></a>3.1 初体验</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 结构与样式分离，行为(js)与表现(html css)分离 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 假如买了一套汤臣一品  </span></span><br><span class="line"><span class="comment">    html 告诉你有几室几厅 </span></span><br><span class="line"><span class="comment">    css  这个客厅多大 地板什么颜色 墙什么颜色</span></span><br><span class="line"><span class="comment">    js  这里有个门 我一推 他就开了  哪里有个开关 我一按 就开灯</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取box</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> count = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">style</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//字体变红 大小改为24px 背景色改成绿色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//1.直接修改style</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box.style.color = &#x27;red&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box.style.fontSize = &#x27;24px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box.style.backgroundColor = &#x27;green&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//2.动态添加某一个class</span></span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">className</span> += <span class="string">&#x27; active&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//3. 动态修改box的宽度</span></span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">style</span>.<span class="property">width</span> = <span class="number">100</span> * count + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      count++;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-Element-class-用法"><a href="#3-2-Element-class-用法" class="headerlink" title="3.2 Element-class 用法"></a>3.2 Element-class 用法</h4><ul>
<li>元素的 class attribute 对应的 property 并不叫 class 而是 className；<br>因为 js 早期(现代的所有高级编程语言里面)不允许使用 class 关键字来作为对象的属性，所以 DOM 的规范就使用了 className</li>
<li>我们可以直接对 className 赋值，但是他会替换整个类名</li>
<li>如果需要添加&#x2F;移除 单个 class 推荐使用 classList</li>
<li>ele.classList 是一个特殊的对象<br>ele.classList.add(class) 添加类名<br>ele.classList.remove(class) 移除类名<br>ele.classList.contains(class) 检查是否有类名<br>ele.classList.toggle(class) 切换类名</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f80</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.bbb</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //1.方法一 className</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.className += &#x27; active bbb&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //移除bbb</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.className = &#x27;box active&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.方法二 classList操作</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//添加类名</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;bbb&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//删除类名</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;bbb&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//contains检查是否包含某个类名 有就true 没有就false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;aaa&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//box在active之间切换</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// if (box.classList.contains(&#x27;active&#x27;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   box.classList.remove(&#x27;active&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   box.classList.add(&#x27;active&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//toggle有该类名 就移除 没有就添加</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// // 回顾</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //构造函数 类</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// function P()&#123;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //类方法 P.eat()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// //实例方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// var p = new P()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// p.jump()</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-Element-style-用法"><a href="#3-3-Element-style-用法" class="headerlink" title="3.3 Element-style 用法"></a>3.3 Element-style 用法</h4><ul>
<li>如果要单独修改某一个 css 属性，可以通过 style 来操作，对于多词(multi-word)属性，使用 camelCase(小驼峰)</li>
<li>如果将值设为空字符串,那么会使用默认样式</li>
<li>多个样式的写法要用到 cssText 但是不推荐</li>
<li>如果要读取非行内样式要通过<strong>getComputedStyle(ele).width</strong>，如果只是增减样式，那直接用classList写法更好</li>
<li>兼容ie低版本 ele.currentStyle</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(pink, skyblue);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.bbb</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box active bbb&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff&quot;</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取到它的property</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">style</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.style.backgroundColor);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//如果设置为空字符串，那么使用默认值</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//设置多个样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.style.color = &#x27;lightgreen&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;50px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//不推荐</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.style.cssText = &#x27;font-size:50px;color:lightgreen;&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//style 这种方式 设置也好 读取也好 只能访问到行内样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//对于css文件，style标签内的样式 ele.style拿不到</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">style</span>.<span class="property">width</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//想要拿到所有的样式？</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(box).<span class="property">width</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-元素的常见操作"><a href="#4-元素的常见操作" class="headerlink" title="4.元素的常见操作"></a>4.元素的常见操作</h3><h4 id="4-1-创建，插入，克隆，删除"><a href="#4-1-创建，插入，克隆，删除" class="headerlink" title="4.1 创建，插入，克隆，删除"></a>4.1 创建，插入，克隆，删除</h4><ol>
<li><p><strong>创建</strong>，<br>创建元素:<code>document.createElement(tagName)</code>,<code>innerHTML</code>,<code>document.write</code>;后两种不推荐</p>
<p><strong>插入</strong>:创建文本节点<code>doc.createTextNode()</code></p>
<p>node.append(node&#x2F;string)–在节点内部末尾 插入节点&#x2F;字符串<br>node.prepend(node&#x2F;string)–在节点内部开头 插入节点&#x2F;字符串<br>node.before(node&#x2F;string)– 在节点前面 插入节点&#x2F;字符串<br>node.after(node&#x2F;string)– 在节点后面 插入节点&#x2F;字符串<br>node.replaceWith(node&#x2F;string)– 将节点替换为 节点&#x2F;字符串</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 11111 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;box-first&quot;</span>&gt;</span>啊哈哈哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.通过innerHTML(不正规的做法)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.innerHTML = `</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &lt;h2 class=&#x27;title&#x27;&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// `;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.创建一个DOM对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> h2El = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  h2El.<span class="property">className</span> = <span class="string">&#x27;title&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  h2El.<span class="property">textContent</span> = <span class="string">&#x27;我是标题&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//将元素插入</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.append(h2El); //添加到box内到最后面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// var box_first = document.querySelector(&#x27;.box-first&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.append(box_first);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.prepend(h2El); //添加到box内的最前面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.after(h2El);//添加到box的后面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.before(h2El)//添加到box的前面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.replaceWith(&#x27;123&#x27;); //替换可以是元素节点也可以是纯文本</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>克隆，删除</strong></li>
</ol>
<ul>
<li>移除元素我们可以调用元素本身的 remove 方法</li>
<li>克隆元素 cloneNode 方法，可以传入一个布尔值，来决定是否要克隆对应的后代元素</li>
<li><code>node.cloneNode(deep)</code>deep选项是一个布尔值，如果为true则会克隆当前节点以及所有子孙节点，反之则只克隆当前节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;remove-btn&quot;</span>&gt;</span>移除box<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clone-btn&quot;</span>&gt;</span>克隆box<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//获取元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> removeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove-btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> cloneBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.clone-btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//移除</span></span></span><br><span class="line"><span class="language-javascript">  removeBtn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//克隆</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">  cloneBtn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//深度克隆</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> newNode = box.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    newNode.<span class="property">children</span>[<span class="number">0</span>].<span class="property">textContent</span> = <span class="string">&#x27;我是标题&#x27;</span> + count;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(newNode);</span></span><br><span class="line"><span class="language-javascript">    count++;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-旧的元素操作方法"><a href="#4-2-旧的元素操作方法" class="headerlink" title="4.2 旧的元素操作方法"></a>4.2 旧的元素操作方法</h4><p>parentEle.appendChild(node) 在 parentEle 后面添加一个子节点<br>parentEle.insertBefore(node,nextsibling) 在 parentEle 内的 nextsibling 前面插入一个 node</p>
<p>parentEle.replaceChild(node,oldChild) 在 parentEle 中，用 node 替换掉 oldChild</p>
<p>parentEle.removeChild(node) 在 parentEle 中，移除某个元素</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记05-对象</title>
    <url>/2022/04/29/b10%20javascript%E5%85%A5%E9%97%A805%20%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="对象的创建-遍历-以及浅谈this"><a href="#对象的创建-遍历-以及浅谈this" class="headerlink" title="对象的创建,遍历,以及浅谈this "></a>对象的创建,遍历,以及浅谈this <span id="more"></span></h1><h3 id="认识对象"><a href="#认识对象" class="headerlink" title="认识对象"></a>认识对象</h3><ul>
<li>在数据类型中一种特别的类型：对象类型<ul>
<li>对象类型是一种存储键值对(key-value)的更复杂的数据类型</li>
<li>键值对可以是属性也可以是方法(key 是字符串，value 可以是任意数据类型)</li>
</ul>
</li>
<li>概念:<ol>
<li>一类事物的某个个体</li>
<li>js的一种数据类型,复杂&#x2F;引用 数据类型</li>
<li>键值对的集合</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = &#123;</span><br><span class="line">  <span class="attr">key</span>: value,</span><br><span class="line">  属性名: 属性值,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      两个术语：函数/方法</span></span><br><span class="line"><span class="comment">        函数（function）:在js 代码中通过function默认定义的一个结构，称为函数.</span></span><br><span class="line"><span class="comment">        方法(method):如果把一个函数放到对象中，作为对象的一个属性，那么将这个函数称为方法.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="comment">//key:value</span></span><br><span class="line">  <span class="comment">//key是字符串，但是在定义对象的属性名的时候，大部份情况下可以省略</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="attr">isSingle</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>, <span class="string">&#x27;rap&#x27;</span>],</span><br><span class="line">  <span class="comment">//key比较复杂一点，&quot;&quot;是不能省略的</span></span><br><span class="line">  <span class="string">&#x27;my friend&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘎嘎香～&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><p>怎么创建对象: </p>
<ol>
<li><p>new 其他类</p>
</li>
<li><p>字面量方式创建对象 var obj &#x3D; {键值对…}   </p>
</li>
<li><p>内置的构造函数创建对象 var obj &#x3D; new Object()</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.new Object()</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.new 其他类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>

<h3 id="对象的常见操作"><a href="#对象的常见操作" class="headerlink" title="对象的常见操作"></a>对象的常见操作</h3><p>操作:增删改查</p>
<ul>
<li><p>增-向对象内添加一条数据        把一个值赋值给对象的某一个key</p>
</li>
<li><p>删-删除对象内的一条数据        把对象内的某个key-value(成员)移除</p>
</li>
<li><p>改-修改对象内的一条数据        修改对象内某个key的value 第二次设置同一个key的时候就是修改,原先的对象有:就是修改；原先的对象没有:添加</p>
</li>
<li><p>查-访问对象内的一条数据的值  </p>
<p> 一共有两种语法:<code>.</code>点语法;[]数组关联语法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义一个对象</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;chicken&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘎嘎香&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(person);</span></span><br><span class="line"><span class="comment">//2.访问对象的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friend</span>.<span class="property">name</span>);</span><br><span class="line">person.<span class="title function_">eat</span>();</span><br><span class="line"><span class="comment">//3.修改对象中的属性</span></span><br><span class="line"><span class="comment">//一旦你在浏览器的控制台打印整个复杂类型的变量</span></span><br><span class="line"><span class="comment">//你点了展开的小三角，就会显示成这个变量最终的样子</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">81</span>;</span><br><span class="line"><span class="comment">// console.log(person);</span></span><br><span class="line">person.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滂臭&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">eat</span>();</span><br><span class="line"><span class="comment">//4.添加对象中的属性</span></span><br><span class="line">person.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没日没夜的卷&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="comment">//5.删除对象中的属性</span></span><br><span class="line"><span class="comment">// delete 操作符</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">study</span>;</span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">age</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<h3 id="数组关联语法"><a href="#数组关联语法" class="headerlink" title="数组关联语法"></a>数组关联语法</h3><p>当对象的 key 是无效的变量标识符时，可以使用这种语法来获取键值<br><strong>不能包含空格、不能以数字开头，不能包含特殊字符</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;my friend&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘉宾～&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;eat something&#x27;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘎嘎炫～&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点访问符就不行啦</span></span><br><span class="line"><span class="comment">// console.log(obj.my friend)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;my friend&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">//名字太长 单独拿一个变量装起来</span></span><br><span class="line"><span class="keyword">var</span> eatKey = <span class="string">&#x27;eat something&#x27;</span>;</span><br><span class="line"><span class="comment">// obj[&#x27;eat something&#x27;]();</span></span><br><span class="line"><span class="comment">//千万不要写成 obj.eatKey ，因为这样是访问obj的eatKey属性</span></span><br><span class="line"><span class="comment">// obj.eatKey();</span></span><br><span class="line"><span class="comment">//访问对象不存在的属性</span></span><br><span class="line"><span class="comment">// console.log(obj.age);</span></span><br><span class="line">obj[eatKey]();</span><br></pre></td></tr></table></figure>

<h3 id="对象的遍历-for…in"><a href="#对象的遍历-for…in" class="headerlink" title="对象的遍历(for…in)"></a>对象的遍历(for…in)</h3><p>作用:获取对象上的所有数据与方法</p>
<p>其中Object的类方法有:</p>
<ul>
<li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(obj)</a> —— 返回一个包含该对象所有的键的数组。</li>
<li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values(obj)</a> —— 返回一个包含该对象所有的值的数组。</li>
<li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries(obj)</a> —— 返回一个包含该对象所有 [key, value] 键值对的数组。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们在开发的时候，可能会要去挨个的拿到里面的每个key以及对应的value</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">2.88</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(`key:$&#123;&#x27;name&#x27;&#125;,value:$&#123;person.name&#125;`);</span></span><br><span class="line"><span class="comment">// console.log(`key:$&#123;&#x27;age&#x27;&#125;,value:$&#123;person.age&#125;`);</span></span><br><span class="line"><span class="comment">//Object.keys(person)返回对象的自己的可枚举属性组成的数组</span></span><br><span class="line"><span class="comment">//Object.definePorperty Proxy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));</span><br><span class="line"><span class="comment">//对对象进行遍历</span></span><br><span class="line"><span class="keyword">var</span> personKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(person);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; personKeys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//personKeys[i]通过索引去拿数组里面的东西</span></span><br><span class="line">  <span class="keyword">var</span> key = personKeys[i];</span><br><span class="line">  <span class="comment">//通过数组关联语法去拿对象的东西</span></span><br><span class="line">  <span class="keyword">var</span> value = person[key];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`key:<span class="subst">$&#123;key&#125;</span>,value:<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">//这种方法是每个都遍历一次，key和value都等于最后i代表的索引处的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.for...in遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span><br><span class="line">  <span class="comment">//key是键名</span></span><br><span class="line">  <span class="comment">// console.log(key);</span></span><br><span class="line">  <span class="comment">// console.log(`key:$&#123;key&#125;,value:$&#123;person[key]&#125;`);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象无序    数组有序</span></span><br><span class="line"><span class="comment">//for...of... 默认是不能遍历对象的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> foo <span class="keyword">of</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js-的内存分配-important"><a href="#js-的内存分配-important" class="headerlink" title="js 的内存分配(!important)"></a>js 的内存分配(!important)</h3><ul>
<li><p>程序是需要加载到内存中来执行的，内存就可以划分为两个区域:栈内存，堆内存</p>
<ul>
<li><strong>原始类型</strong>占据的空间是在<strong>栈内存</strong>中分配的</li>
<li><strong>对象类型</strong>占据的空间是在<strong>堆内存</strong>中分配的</li>
</ul>
</li>
<li><p>原始类型的保存方式:保存的是值本身</p>
</li>
<li><p>对象类型的保存方式:保存的是对象的”引用”</p>
</li>
</ul>
<blockquote>
<p>函数本身是放到堆内存的，但是函数的执行是放到栈里面的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">123</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;hello&#x27;</span> + name;</span><br><span class="line"><span class="keyword">var</span> info = obj;</span><br><span class="line">info.<span class="property">bar</span> = <span class="number">456</span>;</span><br><span class="line"><span class="comment">//我们想要修改的是info的bar属性</span></span><br><span class="line"><span class="comment">//结果发现obj的bar也变了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

<h4 id="数据类型在赋值上的区别"><a href="#数据类型在赋值上的区别" class="headerlink" title="数据类型在赋值上的区别"></a>数据类型在赋值上的区别</h4><ol>
<li>原始数据类型</li>
</ol>
<p>  赋值的时候，就是值的复制<br>  赋值以后，两个变量没有任何关系<br>  改变一个变量，另一个不会发生变化</p>
<ol start="2">
<li>引用数据类型<br>  赋值的时候，把引用复制过去<br>  赋值以后，两个不同的变量操作的是同一个存储空间<br>  改变一个，另一个看到的也是改变后的</li>
<li>比较上的区别<br>  原始数据类型，是 值 和 值的比较<br>  <strong>引用数据类型 是 地址 和 地址 的比较</strong></li>
</ol>
<h4 id="思考如下现象"><a href="#思考如下现象" class="headerlink" title="思考如下现象"></a>思考如下现象</h4><ol>
<li>两个对象的比较</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1 === num2); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//两个对象的比较</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 === obj2); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 == obj2); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//从内存的角度去解释</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引用传递的内存表现</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.引用的赋值</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> friend = info.<span class="property">friend</span>; <span class="comment">//&#123;name:&#x27;alex&#x27;&#125;</span></span><br><span class="line">friend.<span class="property">name</span> = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">friend</span>.<span class="property">name</span>); <span class="comment">//</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>值传递</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.值传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) </span><br><span class="line">  a = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">foo</span>(num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function sum(a, b) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(a + b);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// sum(10, 20);</span></span><br><span class="line"><span class="comment">// sum(100, 200);</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>引用传递</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.引用传递,在函数中创建了一个新对象，没有对传入的对象进行修改</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//&#x27;jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#x27;alex&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>引用传递</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5. 引用传递,但是对传入的对象进行了修改</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a.<span class="property">name</span> = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//dog</span></span><br></pre></td></tr></table></figure>

<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>目前已学的知识需要掌握两个 this 的判断方法:</p>
<ul>
<li>默认的方式调用，this 指向 window</li>
<li>通过对象调用，this 指向对象</li>
</ul>
<blockquote>
<p>this 不看函数定义，只看函数调用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一:如果普通的函数被默认调用，this-&gt;window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(arguments);</span></span><br><span class="line">  <span class="comment">// console.log(this);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>); <span class="comment">//window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(this);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(); <span class="comment">//window</span></span><br><span class="line"><span class="comment">//情况二:如果函数被某一个对象引用，并且调用它，this-&gt;对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">running</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">running</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// console.log(this == obj);</span></span><br><span class="line">    <span class="comment">// console.log(this === obj);//true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// obj.friend.running(); //friend</span></span><br><span class="line"><span class="comment">// obj[&#x27;friend&#x27;][&#x27;running&#x27;]()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//题目一</span></span><br><span class="line"><span class="keyword">var</span> fn = obj.<span class="property">running</span>;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//题目二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: bar,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">bar</span>(); <span class="comment">//obj</span></span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<h4 id="this-的作用"><a href="#this-的作用" class="headerlink" title="this 的作用"></a>this 的作用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要有一个类，类中的方法，实例的方法中，this指向当前的调用对象 new 类()-&gt;对象 this</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="comment">//1.传递参数</span></span><br><span class="line">  <span class="attr">running</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="string">&#x27;在疯狂的跑&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//2.不传递参数，直接写一个info.name</span></span><br><span class="line">  <span class="attr">eating</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>, <span class="string">&#x27;在疯狂的吃&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//3.对象中的函数中的this永远指向该对象</span></span><br><span class="line">  <span class="attr">jumpping</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&#x27;疯狂的跳&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="类和对象的思维方式-（如何创建一系列的对象）"><a href="#类和对象的思维方式-（如何创建一系列的对象）" class="headerlink" title="类和对象的思维方式 （如何创建一系列的对象）"></a>类和对象的思维方式 （如何创建一系列的对象）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一系列对象的方法一:</span></span><br><span class="line"><span class="comment">//手动书写很多对象... ❌</span></span><br><span class="line"><span class="keyword">var</span> p1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建一系列对象的方法二:工厂函数</span></span><br><span class="line"><span class="comment">//for可以创建多个对象，但是这些对象都是tom，不够灵活</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂函数(工厂生产stu对象)-&gt;设计模式</span></span><br><span class="line"><span class="comment">// function createStudent(name, age) &#123;</span></span><br><span class="line"><span class="comment">//   //虽然我只写了一个stu = &#123;&#125;但是每次调用这个函数</span></span><br><span class="line"><span class="comment">//   //都会开辟一块新的内存空间</span></span><br><span class="line"><span class="comment">//   var stu = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//   stu.name = name;</span></span><br><span class="line"><span class="comment">//   stu.age = age;</span></span><br><span class="line"><span class="comment">//   return stu;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// var stu1 = createStudent(&#x27;张三&#x27;, 18);</span></span><br><span class="line"><span class="comment">// var stu2 = createStudent(&#x27;李四&#x27;, 28);</span></span><br><span class="line"><span class="comment">// var stu3 = createStudent(&#x27;王五&#x27;, 12);</span></span><br><span class="line"><span class="comment">//方式三:构造函数创建对象</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      js默认提供给我们的，更加符合js思维方式，</span></span><br><span class="line"><span class="comment">      在函数中this一般指向某个对象</span></span><br><span class="line"><span class="comment">      new做了那四件事？</span></span><br><span class="line"><span class="comment">        如果一个函数被new操作符 调用</span></span><br><span class="line"><span class="comment">          1. 创建出一个新的空的对象</span></span><br><span class="line"><span class="comment">          2. 让this指向这个新的空对象</span></span><br><span class="line"><span class="comment">          3. 执行函数体</span></span><br><span class="line"><span class="comment">          4. 返回该对象</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">coder</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="comment">// return &#123;&#125;;</span></span><br><span class="line">  <span class="comment">//return是原始数据类型 没用</span></span><br><span class="line">  <span class="comment">//return 是Object类型 返回值就变成你return的数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//new是keyword 也是operator</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title function_">coder</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">123</span>); <span class="comment">//this-&gt;张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu1);</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> <span class="title function_">coder</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">19</span>); <span class="comment">//this-&gt;李四</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//补充</span></span><br><span class="line"><span class="comment">//构造函数的名称：使用大驼峰</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Coder</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">//平时创建普通对象</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数:使用小驼峰</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      eat   gaga</span></span><br><span class="line"><span class="comment">      大驼峰:EatGaga</span></span><br><span class="line"><span class="comment">      小驼峰:eatGaga</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记06-常见的内置类,数组</title>
    <url>/2022/04/29/b11%20javascript%E5%85%A5%E9%97%A806%20%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E7%BD%AE%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="常见内置类-数组"><a href="#常见内置类-数组" class="headerlink" title="常见内置类,数组"></a>常见内置类,数组<span id="more"></span></h1><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//奇怪现象🤔</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello world&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//虽然没有为他直接指定类型，但是js却知道他们是字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">//拿到字符串的长度 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)); <span class="comment">// [&#x27;Hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"><span class="comment">//因为js为了可以使得它能够获取属性以及调用方法，自动对它封装了对应的包装类型</span></span><br><span class="line"><span class="comment">//实际上它有自己的构造函数</span></span><br><span class="line"><span class="comment">//他的构造函数的用处，默认情况下直接使用原始数据类型的值的时候 你可以把它的构造函数忽视</span></span><br><span class="line"><span class="comment">//但是 一旦你 访问它的属性/调用它的方法 这个时候js引擎会帮我们做一些事</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      str = new String(str) </span></span><br><span class="line"><span class="comment">      str.length  str.xxx()</span></span><br><span class="line"><span class="comment">      js引擎就会把它 回收掉   把你的str再次变成原始类型的hello world</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟包装的过程</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">String</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">str</span> = str;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">11</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">xxx</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃嘛嘛香～&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对象调用自身方法</span></span><br><span class="line">obj.<span class="title function_">eat</span>();</span><br><span class="line"><span class="comment">//对象访问自身属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="comment">//常见的包装类型 String Number Boolean Symbol BigInt</span></span><br></pre></td></tr></table></figure>

<p>因为 js 为了可以使其<strong>获取属性和调用方法</strong>，<strong>对其封装了对应的包装类型</strong><br>注意:null、undefined 没有任何方法，也没有对应的“对象包装类”</p>
<h3 id="数字类型-Number-类属性"><a href="#数字类型-Number-类属性" class="headerlink" title="数字类型 Number 类属性"></a>数字类型 Number 类属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Number上的类属性</span></span><br><span class="line"><span class="comment">//Number构造函数-&gt;window.Number</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);</span><br><span class="line"><span class="comment">//integer 整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>);</span><br></pre></td></tr></table></figure>

<h4 id="toString-实例方法"><a href="#toString-实例方法" class="headerlink" title="toString 实例方法"></a>toString 实例方法</h4><p><code>toString(base)</code></p>
<ul>
<li>将数字转成字符串，并且按照 base 进制</li>
<li>base 是进制，默认是 10</li>
<li>如果直接对一个数字操作，需要使用<code>..</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2-1 toString(base) 把数字转成字符串</span></span><br><span class="line"><span class="comment">//默认是十进制，可以填入你要的进制，返回的是一个字符串</span></span><br><span class="line"><span class="comment">//base进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">//11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">8</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">//字符串 没加0x</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">123</span>).<span class="title function_">toString</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h4 id="toFixed-实例方法"><a href="#toFixed-实例方法" class="headerlink" title="toFixed 实例方法"></a>toFixed 实例方法</h4><p><code>(你要的数字).toFixed</code><br><code>toFixed(digits)</code><br>格式化一个数字，保留 digits 位的小数<br>保留方式是四舍五入，返回的是一个<strong>字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi.<span class="title function_">toFixed</span>(<span class="number">3</span>)); <span class="comment">//3.142</span></span><br></pre></td></tr></table></figure>

<h4 id="parseInt-parseFloat-类方法"><a href="#parseInt-parseFloat-类方法" class="headerlink" title="parseInt parseFloat 类方法"></a>parseInt parseFloat 类方法</h4><p><code>Number.parseInt()</code><br><code>parseInt()</code><br>这两个方法都没有四舍五入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="string">&#x27;123.521&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(num1).<span class="title function_">toFixed</span>(<span class="number">0</span>)); <span class="comment">//124</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(num1)); <span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(num1)); <span class="comment">//123.521</span></span><br><span class="line"><span class="comment">//其实也有全局的对应方法 放在window上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(num1)); <span class="comment">//123 不报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span> === <span class="title class_">Number</span>.<span class="property">parseInt</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开发中常用的是：toFixed,parseInt,parseFloat</li>
</ul>
<h3 id="数学对象-Math"><a href="#数学对象-Math" class="headerlink" title="数学对象 Math"></a>数学对象 Math</h3><p>Math 是一个对象，<strong>不是构造函数</strong><br>属性：Math.PI 圆周率<br>方法:<br>Math.floor 向下取整<br>Math.ceil 向上取整<br>Math.round 四舍五入<br>Math.random 随机数 包括 0 不包括 1<br>Math.pow 求幂</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(typeof Number); //function</span></span><br><span class="line"><span class="comment">// console.log(typeof Math); //object</span></span><br><span class="line"><span class="comment">// var num = new Number(123);</span></span><br><span class="line"><span class="comment">//var math = new Math();</span></span><br><span class="line"><span class="comment">//属性 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">//</span></span><br><span class="line"><span class="comment">//方法 Math.random() [0,1)包括0 不包括1</span></span><br><span class="line"><span class="comment">//其他方法一起使用 [0,1] [a,b]</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.55</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num)); <span class="comment">//3 向下取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num)); <span class="comment">//4 向上取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num)); <span class="comment">//4四舍五入</span></span><br><span class="line"><span class="comment">//生成[5,50)随机数</span></span><br><span class="line"><span class="comment">//[0,45) 50-5=45</span></span><br><span class="line"><span class="comment">//[5,50)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">45</span>) + <span class="number">5</span>);</span><br><span class="line"><span class="comment">//[5,50] 包括5,包括50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">46</span>) + <span class="number">5</span>);</span><br><span class="line"><span class="comment">//(5,50)  (n,m)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fullOpen</span>(<span class="params">n, m</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (m - n) + n;</span><br><span class="line">  <span class="keyword">while</span> (res === n) &#123;</span><br><span class="line">    res = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (m - n) + n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求幂</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">//2^4=16</span></span><br></pre></td></tr></table></figure>

<h3 id="String-的补充"><a href="#String-的补充" class="headerlink" title="String 的补充"></a>String 的补充</h3><h4 id="String-常见的属性"><a href="#String-常见的属性" class="headerlink" title="String 常见的属性"></a>String 常见的属性</h4><p>str.length 返回字符串的长度</p>
<h4 id="字符串的访问"><a href="#字符串的访问" class="headerlink" title="字符串的访问"></a>字符串的访问</h4><ol>
<li><code>str[索引]</code> <code>str[index]</code></li>
<li><code>str.charAt(索引)</code> <code>str.charAt(pos)</code><br>这两种方法正常访问没有区别，但是访问不存在的<br>[]返回 undfined chatAt 返回空字符</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">length</span>); <span class="comment">//11</span></span><br><span class="line"><span class="comment">//访问字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">charAt</span>(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message[<span class="number">20</span>]); <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">charAt</span>(<span class="number">20</span>)); <span class="comment">//空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//喇叭花数 100～999的一个数，abc = a!+b!+c!</span></span><br><span class="line"><span class="comment">//我们首先需要一个阶乘器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jc</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    result *= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">jc</span>(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//穷举100～999的所有数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> str = i.<span class="title function_">toString</span>(); <span class="comment">//转成字符串</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="title class_">Number</span>(str[<span class="number">0</span>]); <span class="comment">//第一位</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="title class_">Number</span>(str[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">var</span> c = <span class="title class_">Number</span>(str[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">jc</span>(a) + <span class="title function_">jc</span>(b) + <span class="title function_">jc</span>(c) === i) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h4><p>方式一:for 循环<br>方式二:for…of</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="comment">//for遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; msg.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for...of-&gt;可迭代</span></span><br><span class="line"><span class="comment">//两个可迭代：字符串 数组</span></span><br><span class="line"><span class="comment">//String对象内部是将字符串变成了一个可迭代的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> char <span class="keyword">of</span> msg) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(char);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h4><p>字符串的不可变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;Alex&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg[<span class="number">0</span>]); <span class="comment">//a</span></span><br><span class="line"><span class="comment">//字符串的不可更改性</span></span><br><span class="line">msg[<span class="number">0</span>] = <span class="string">&#x27;1232131231231231&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">//blex</span></span><br><span class="line"><span class="comment">//大小写转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">toLowerCase</span>()); <span class="comment">//小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">toUpperCase</span>()); <span class="comment">//大写 ALEX</span></span><br></pre></td></tr></table></figure>

<h4 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h4><p>方法一:indexOf<br><code>indexOf(你要查找的字符,开始查找的位置)</code><br><code>indexOf(searchString,position)</code></p>
<p><code>indexOfAll(你要查找的字符)</code>这个会返回所有符合的字符的索引</p>
<p>position 是可选的，不写的时候，从索引为 0 的位置开始查找</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一 查找字符串的位置</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      str.indexOf(serachString,[position])</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;my name is alex,我喜欢ikun&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">indexOf</span>(<span class="string">&#x27;alex&#x27;</span>)); <span class="comment">//11 返回的是索引</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">indexOf</span>(name, <span class="number">18</span>)); <span class="comment">//-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">indexOf</span>(<span class="string">&#x27;dog&#x27;</span>)); <span class="comment">//-1 找不到给你返回-1</span></span><br><span class="line"><span class="keyword">var</span> index = msg.<span class="title function_">indexOf</span>(name);</span><br><span class="line"><span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变量msg中有变量name&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二:includes<br>es6 新增的，是否包含字符串<br><code>str.includes(searchString,position)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法二 es6新增的 是否包含字符串</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      str.includes(searchString,position)</span></span><br><span class="line"><span class="comment">      position可以省略</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;my name is alex,我喜欢ikun&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">includes</span>(name)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">includes</span>(<span class="string">&#x27;alex.&#x27;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="查找开头和结尾是否包含你要的字符"><a href="#查找开头和结尾是否包含你要的字符" class="headerlink" title="查找开头和结尾是否包含你要的字符"></a>查找开头和结尾是否包含你要的字符</h4><ul>
<li>startsWith(你要的字符)</li>
<li>endsWith(你要的字符)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;my name is alex,我喜欢ikun&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (msg.<span class="title function_">startsWith</span>(<span class="string">&#x27;my&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg是以my开头的&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (msg.<span class="title function_">endsWith</span>(<span class="string">&#x27;ikun&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg是以ikun结尾的&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">startsWith</span>(name)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><p><code>str.replace(regexp|substr,newSubStr|function)</code><br>查找对应的字符串，并且用新的字符串替代<br>这里可以传入一个正则表达式(regexp)来查找，也可以传入一个函数来替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;my name is alex&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">replace</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;ikun&#x27;</span>));</span><br><span class="line">msg = msg.<span class="title function_">replace</span>(<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;ikun&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="comment">//函数的情况</span></span><br><span class="line"><span class="keyword">var</span> msg2 = msg.<span class="title function_">replace</span>(<span class="string">&#x27;ikun&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name.<span class="title function_">toUpperCase</span>(); <span class="comment">//TOM</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg2);</span><br></pre></td></tr></table></figure>

<h4 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h4><ul>
<li>slice(start,end) 从 start 到 end (不包含 end) 允许负值</li>
<li>substring(start,end) 从 start 到 end (不包含 end) 不允许负值(负值代表 0)</li>
<li>substr(start,length) 从 start 开始截取长度为 length 的字符串 允许 start 为负值</li>
<li>开发推荐 <strong>slice</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;Hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取子字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">//lo w</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">slice</span>(<span class="number">3</span>, -<span class="number">1</span>)); <span class="comment">//lo worl</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">slice</span>(<span class="number">3</span>)); <span class="comment">//lo world</span></span><br></pre></td></tr></table></figure>

<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ol>
<li>str.concat(str,[,…strN]) 拼接字符串</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;my&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;kern&#x27;</span>;</span><br><span class="line"><span class="comment">//1.学过的拼接方式 +</span></span><br><span class="line"><span class="keyword">var</span> newStr = str1 + str2 + str3;</span><br><span class="line"><span class="comment">//2.concat的链式调用</span></span><br><span class="line"><span class="keyword">var</span> newStr2 = str1.<span class="title function_">concat</span>(str2).<span class="title function_">concat</span>(str3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr, newStr2);</span><br><span class="line"><span class="keyword">var</span> newStr3 = str1.<span class="title function_">concat</span>(str2, str3, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bca&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr3);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除首尾空格<br><code>str.trim()</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ipt = <span class="string">&#x27;    alex       handsome            &#x27;</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ipt);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>字符串分割<br><code>str.split([separator[,limit]])</code><br>separator:以什么字符进行分割，也可以是一个正则<br>limit:限制返回的数量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;abc-cba-nba-mba&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = msg.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">//把字符串转成数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="comment">//1. 求数组内所有元素的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">  sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line"><span class="comment">//2. 求arr内的最大的数</span></span><br><span class="line"><span class="comment">//假设max是最大的</span></span><br><span class="line"><span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//一次和max进行比较，比他大就赋值给max，其他情况不变</span></span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">    max = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//简写</span></span><br><span class="line">  <span class="comment">// max = arr[i] &gt; max ? arr[i] : max;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="comment">//3. 求arr1内最小的数字的索引</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">1994</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">23</span>];</span><br><span class="line"><span class="comment">//设minIndex是最小数的索引 arr1[minIndex]</span></span><br><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr1[i] &lt; arr1[minIndex]) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minIndex);</span><br><span class="line"><span class="comment">//4. 循环得到一个10～20的所有整数，并且放到数组里面</span></span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">10</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//10 11 12 13 14 15...20</span></span><br><span class="line">  <span class="comment">//0  1  2  3</span></span><br><span class="line">  <span class="comment">//方法一:利用i和索引的关系</span></span><br><span class="line">  <span class="comment">// newArr[i - 10] = i;</span></span><br><span class="line">  <span class="comment">//方法二:利用索引添加</span></span><br><span class="line">  newArr[newArr.<span class="property">length</span>] = i;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">        []   0   10</span></span><br><span class="line"><span class="comment">        [10] 1   11  newArr[1]=11</span></span><br><span class="line"><span class="comment">        [10,11]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br><span class="line"><span class="comment">//5.把1000～2000之间的所有的闰年放到数组里面</span></span><br><span class="line"><span class="keyword">var</span> year = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1000</span>; i &lt;= <span class="number">2000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((i % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> !== <span class="number">0</span>) || i % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    year[year.<span class="property">length</span>] = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(year);</span><br></pre></td></tr></table></figure>

<h2 id="Date-日期"><a href="#Date-日期" class="headerlink" title="Date 日期"></a>Date 日期</h2><p>get 获取<br>year 年<br>month 月<br>day 日<br>date 日期<br>hour(s) 小时<br>minute(s) 分钟<br>second(s) 秒<br>millSeconds 毫秒<br>time 时间</p>
<h3 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h3><ul>
<li>new Date()在不传递参数的情况下返回的是当前时间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time); <span class="comment">//Tue Apr 18 2023 10:13:04 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>new Date 传递参数的多种情况</li>
</ul>
<ol>
<li>传递两个数字<br>第一个数字表示年份，第二个数字表示月份</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2023</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time); <span class="comment">//Wed Nov 01 2023 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//月份的范围0～11 0表示1月 11表示12月</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>传递三个<br>前两个不变，第三个表示该月的第几天 1~31</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2023</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time); <span class="comment">//今天</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>传递四个<br>前三个不变，最后一个是小时数 0~23</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2023</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>传递五个<br>前四个不变，最后一个表示分钟 0~59</p>
</li>
<li><p>传递六个<br>前五个不变，最后一个表示秒 0 ～ 59</p>
</li>
<li><p>传递字符串</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023-02&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023-02-18&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> time3 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023-02-18 13:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> time4 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023-02-18 13:13&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> time5 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023-02-18 13:13:13&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time, time1, time2, time3, time4, time5);</span><br></pre></td></tr></table></figure>

<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// function Date()&#123;</span></span><br><span class="line"><span class="comment">//   this.getMonth=function()&#123;</span></span><br><span class="line"><span class="comment">//     return 具体月份</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span><br><span class="line"><span class="comment">// Date - time  类(构造函数)-实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取年份 2023</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getFullYear</span>());</span><br><span class="line"><span class="comment">//获取月份 0～11表示</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getMonth</span>()); <span class="comment">//3</span></span><br><span class="line"><span class="comment">//获取那一天 18号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getDate</span>());</span><br><span class="line"><span class="comment">//小时 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getHours</span>());</span><br><span class="line"><span class="comment">//分钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getMinutes</span>());</span><br><span class="line"><span class="comment">//秒钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getSeconds</span>());</span><br><span class="line"><span class="comment">//周几  0～6 0表示周日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getDay</span>());</span><br><span class="line"><span class="comment">//获取执行时间到`格林威治时间的`毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="comment">//编程中比较特殊的一个时间`格林威治时间的`</span></span><br><span class="line"><span class="comment">//2023 xx  xx</span></span><br><span class="line"><span class="comment">//1970年1月1日00:00:00</span></span><br></pre></td></tr></table></figure>

<p>案例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化时间</span></span><br><span class="line"><span class="comment">//我们需要从时间中拿到 年 月 日...</span></span><br><span class="line"><span class="comment">//月份 需要+1</span></span><br><span class="line"><span class="comment">//判断 上午/下午</span></span><br><span class="line"><span class="comment">//调整为12小时</span></span><br><span class="line"><span class="comment">//调整星期 0～6</span></span><br><span class="line"><span class="comment">//格式化的结果打印</span></span><br><span class="line"><span class="keyword">var</span> year = time.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> month = time.<span class="title function_">getMonth</span>();</span><br><span class="line"><span class="keyword">var</span> date = time.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">var</span> hours = time.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">var</span> minutes = time.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">var</span> seconds = time.<span class="title function_">getSeconds</span>();</span><br><span class="line"><span class="keyword">var</span> day = time.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="comment">//处理月份</span></span><br><span class="line">month += <span class="number">1</span>;</span><br><span class="line"><span class="comment">//上午/下午</span></span><br><span class="line"><span class="keyword">var</span> str = hours &gt;= <span class="number">12</span> ? <span class="string">&#x27;下午&#x27;</span> : <span class="string">&#x27;上午&#x27;</span>;</span><br><span class="line"><span class="comment">//12小时</span></span><br><span class="line">hours %= <span class="number">12</span>;</span><br><span class="line"><span class="comment">//星期</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;日一二三四五六&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> week = <span class="string">`星期<span class="subst">$&#123;s[day]&#125;</span>`</span>;</span><br><span class="line"><span class="comment">// m &gt;10?m:0+m</span></span><br><span class="line"><span class="comment">//拼起来</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="string">`<span class="subst">$&#123;year&#125;</span>年<span class="subst">$&#123;month&#125;</span>月<span class="subst">$&#123;date&#125;</span>日<span class="subst">$&#123;str&#125;</span>--<span class="subst">$&#123;hours&#125;</span>点<span class="subst">$&#123;minutes&#125;</span>分<span class="subst">$&#123;seconds&#125;</span>秒--<span class="subst">$&#123;week&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h3 id="获取时间差"><a href="#获取时间差" class="headerlink" title="获取时间差"></a>获取时间差</h3><p>封装版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Date</span>&#125; curr 当前时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Date</span>&#125; tar 目标时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  处理好的时间差对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffTime</span>(<span class="params">curr, tar</span>) &#123;</span><br><span class="line">  <span class="comment">//curr表示当前时间</span></span><br><span class="line">  <span class="comment">//tar表示目标时间</span></span><br><span class="line">  <span class="keyword">var</span> diffMs = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((tar.<span class="title function_">getTime</span>() - curr.<span class="title function_">getTime</span>()) / <span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(diffMs); <span class="comment">//秒</span></span><br><span class="line">  <span class="comment">//推算出hour minute second</span></span><br><span class="line">  <span class="keyword">var</span> day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diffMs / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)); <span class="comment">//1.5   1天 xx小时</span></span><br><span class="line">  <span class="keyword">var</span> hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diffMs % (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)) / (<span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">  <span class="keyword">var</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diffMs % (<span class="number">60</span> * <span class="number">60</span>)) / <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">var</span> seconds = diffMs % <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">day</span>: day, <span class="attr">hours</span>: hours, <span class="attr">minutes</span>: minutes, <span class="attr">seconds</span>: seconds &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推导和使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1. 两个时间都转成毫秒数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2. 相减</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3. 转回你要的格式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//准备两个时间</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> current = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> target = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2023</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">00</span>, <span class="number">00</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(current, <span class="string">&#x27;-----&#x27;</span>, target);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//求相差的毫秒数 -&gt; 秒</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> diffMs = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((target.<span class="title function_">getTime</span>() - current.<span class="title function_">getTime</span>()) / <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(diffMs); <span class="comment">//秒</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//推算出hour minute second</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diffMs / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)); <span class="comment">//1.5   1天 xx小时</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diffMs % (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)) / (<span class="number">60</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diffMs % (<span class="number">60</span> * <span class="number">60</span>)) / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> seconds = diffMs % <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;day&#125;</span>天<span class="subst">$&#123;hours&#125;</span>时<span class="subst">$&#123;minutes&#125;</span>分<span class="subst">$&#123;seconds&#125;</span>秒`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//封装📦到函数里</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      =&gt;参数 几个参数？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        一个是当前时间 一个是目标时间</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      =&gt;返回值 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        字符串 `xx天xx时xx分xx秒`</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        数组 [10,6,59,33] [10,10,10,10]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        对象 &#123;day:10,hours:6,minutes:3,seconds:33&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">diffTime</span>(<span class="params">curr, tar</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//curr表示当前时间</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//tar表示目标时间</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2023-11-11 00:00:00&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> res = <span class="title function_">diffTime</span>(time1, time2);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="setTimeout-fn-时间"><a href="#setTimeout-fn-时间" class="headerlink" title="setTimeout(fn,时间)"></a>setTimeout(fn,时间)</h4><p>定时一段时间后执行 fn<br>时间是毫秒数，写 0&#x2F;不写 都会“立即执行”<br>定时器还可以有更多的参数，时间到了以后会把多余的参数按照顺序依次传递给 fn</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;时间到了&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&#x27;周末&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;放假&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;去正佳玩&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一秒后计算10+20</span></span><br><span class="line"><span class="comment">//add()直接调用了,函数在传递的时候 add</span></span><br><span class="line"><span class="built_in">setTimeout</span>(add, <span class="number">1000</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">//清除定时器</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">setTimeout</span>(add, <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//他是一个数字,表示当前页面的第几个定时器是用来清除定时器的</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(res); <span class="comment">//清除定时器</span></span><br></pre></td></tr></table></figure>

<h4 id="setInterval-fn-时间"><a href="#setInterval-fn-时间" class="headerlink" title="setInterval(fn,时间)"></a>setInterval(fn,时间)</h4><p>反复调用定时器<br>语法和 setTimeout 类似<br>清除定时器用 clearInterval(res)</p>
<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h1><h3 id="1-认识数组"><a href="#1-认识数组" class="headerlink" title="1.认识数组"></a>1.认识数组</h3><ul>
<li>是 js 的一个复杂数据类型，叫 Array</li>
<li>有序的存放多个数据的一种数据结构</li>
</ul>
<h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h3><h4 id="2-1-字面量创建"><a href="#2-1-字面量创建" class="headerlink" title="2.1 字面量创建"></a>2.1 字面量创建</h4><p>空数组:var arr &#x3D;[]<br>带有数据的:var arr &#x3D; [数据 1,数据 2,…]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;lyan&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;kern&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> product1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;西瓜&#x27;</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;键盘&#x27;</span>, <span class="attr">price</span>: <span class="number">300</span> &#125;,</span><br><span class="line">  product1, <span class="comment">//开发不推荐这样</span></span><br><span class="line">  <span class="comment">//studentName student-name StudentName</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h4 id="2-2-构造函数-Array-创建"><a href="#2-2-构造函数-Array-创建" class="headerlink" title="2.2 构造函数(Array)创建"></a>2.2 构造函数(Array)创建</h4><p>语法 var arr &#x3D; new Array(参数)<br>参数个数为 1:数组的长度，empty 填充<br>参数个数&gt;1:数组的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// []</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>); <span class="comment">//[&#x27;abc&#x27;,&#x27;cba&#x27;,&#x27;nba&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入一个数字,它会默认当成我们想要创建一个对应长度的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>); <span class="comment">//[empty*5]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-索引的问题"><a href="#2-3-索引的问题" class="headerlink" title="2.3 索引的问题"></a>2.3 索引的问题</h4><p>数组元素索引(index)从 0 开始<br>js 不支持负索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;lyan&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;kern&#x27;</span>];</span><br><span class="line"><span class="comment">//想访问最后一个元素 js不能写names[-1]</span></span><br><span class="line">names[names.<span class="property">length</span> - <span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h3 id="3-数组的基本操作"><a href="#3-数组的基本操作" class="headerlink" title="3 数组的基本操作"></a>3 数组的基本操作</h3><h4 id="3-1-访问数组中的元素"><a href="#3-1-访问数组中的元素" class="headerlink" title="3.1 访问数组中的元素"></a>3.1 访问数组中的元素</h4><ul>
<li>通过中括号[]来访问</li>
<li>arr.at(i)<br>i&gt;&#x3D;0 的时候和[]没有区别<br>i&lt;0,它是从数组的尾部向前数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names[<span class="number">1</span>]); <span class="comment">//&#x27;cba&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">at</span>(<span class="number">1</span>)); <span class="comment">//&#x27;cba&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names[-<span class="number">1</span>]); <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">at</span>(-<span class="number">1</span>)); <span class="comment">//&#x27;nba&#x27;</span></span><br><span class="line"><span class="comment">//实际开发很少用这种负数，阅读性太差</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-修改数组中的元素"><a href="#3-2-修改数组中的元素" class="headerlink" title="3.2 修改数组中的元素"></a>3.2 修改数组中的元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>];</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&#x27;jack&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-增加数组中的元素-x2F-删除数组中的元素-了解"><a href="#3-3-增加数组中的元素-x2F-删除数组中的元素-了解" class="headerlink" title="3.3 增加数组中的元素&#x2F;删除数组中的元素(了解)"></a>3.3 增加数组中的元素&#x2F;删除数组中的元素(了解)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>];</span><br><span class="line"><span class="comment">//             0       1     2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改动前&#x27;</span>, names);</span><br><span class="line"><span class="comment">// names[3] = &#x27;jack&#x27;;</span></span><br><span class="line"><span class="keyword">delete</span> names[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改动后&#x27;</span>, names);</span><br></pre></td></tr></table></figure>

<h3 id="4-数组的添加、删除方法-一"><a href="#4-数组的添加、删除方法-一" class="headerlink" title="4.数组的添加、删除方法(一)"></a>4.数组的添加、删除方法(一)</h3><h4 id="push-pop-shift-unshift"><a href="#push-pop-shift-unshift" class="headerlink" title="push-pop shift-unshift"></a>push-pop shift-unshift</h4><ul>
<li>在数组的尾端添加或者删除元素<br>push 添加<br>pop 删除</li>
<li>在数组的首端添加或删除元素<br>shift 删除<br>unshift 添加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>];</span><br><span class="line"><span class="comment">//1.在尾部添加和删除元素</span></span><br><span class="line"><span class="comment">// names.push(&#x27;jack&#x27;, &#x27;alex&#x27;, &#x27;tom&#x27;);</span></span><br><span class="line"><span class="comment">//没有参数，而且一次只能删除一个</span></span><br><span class="line"><span class="comment">//如果需要拿到被删除的可以拿到，不需要的话 不管他</span></span><br><span class="line"><span class="comment">// var a = names.pop();</span></span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"><span class="comment">//2.头部</span></span><br><span class="line"><span class="comment">//一次添加多个</span></span><br><span class="line">names.<span class="title function_">unshift</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>);</span><br><span class="line"><span class="comment">//一次只能删除一个</span></span><br><span class="line">names.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br></pre></td></tr></table></figure>

<h3 id="5-数组的添加、删除方法-二"><a href="#5-数组的添加、删除方法-二" class="headerlink" title="5.数组的添加、删除方法(二)"></a>5.数组的添加、删除方法(二)</h3><p>splice 可以添加，删除，替换元素<br>语法<br><code>array.splice(start[,deleteCount[,item1[,item2[,...]]]])</code></p>
<blockquote>
<p>中括号不是数组的意思，可选的意思</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var names = [&#x27;abc&#x27;, &#x27;cba&#x27;, &#x27;nba&#x27;, &#x27;15-5&#x27;];</span></span><br><span class="line"><span class="comment">//参数一:start，从什么位置开始操作元素</span></span><br><span class="line"><span class="comment">//参数二:deleteCount，删除的元素个数</span></span><br><span class="line"><span class="comment">// //1.删除</span></span><br><span class="line"><span class="comment">// names.splice(1, 2);</span></span><br><span class="line"><span class="comment">// //splice方法会直接改变原数组</span></span><br><span class="line"><span class="comment">// console.log(names);</span></span><br><span class="line"><span class="comment">//2.新增</span></span><br><span class="line"><span class="comment">//deleteCount:0,后面可以再跟上其他你要添加的元素</span></span><br><span class="line"><span class="comment">// var names = [&#x27;abc&#x27;, &#x27;cba&#x27;, &#x27;nba&#x27;, &#x27;15-5&#x27;];</span></span><br><span class="line"><span class="comment">// names.splice(1, 0, &#x27;麦当劳&#x27;, &#x27;KFC&#x27;, &#x27;汉堡王&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(names);</span></span><br><span class="line"><span class="comment">//3.替换元素</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>, <span class="string">&#x27;15-5&#x27;</span>];</span><br><span class="line">names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一般情况下头部和尾部的操作我们还是用那两对，只是在处理中间的情况下更多的用到 splice</p>
</blockquote>
<h3 id="6-length-属性"><a href="#6-length-属性" class="headerlink" title="6.length 属性"></a>6.length 属性</h3><ul>
<li>length 属性用于获取数组的长度<br>当我们修改数组的时候，他的长度会自动更新</li>
<li>length 属性另一个特点是可写的<br>如果我们修改为一个大于原来的值，会用 empty 填充<br>如果小于，数组被截断</li>
<li>清空数组最快办法:<code>arr.length =0</code></li>
</ul>
<h3 id="7-数组的遍历"><a href="#7-数组的遍历" class="headerlink" title="7 数组的遍历"></a>7 数组的遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dogs = [<span class="string">&#x27;二哈&#x27;</span>, <span class="string">&#x27;边牧&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>];</span><br><span class="line"><span class="comment">//1. 普通的for遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dogs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//i索引</span></span><br><span class="line">  <span class="comment">//dogs[i]元素</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dogs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. for...in遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> dogs) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dogs[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. for...of遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> dogs) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-数组方法"><a href="#8-数组方法" class="headerlink" title="8 数组方法"></a>8 数组方法</h3><h4 id="8-1-slice"><a href="#8-1-slice" class="headerlink" title="8.1 slice"></a>8.1 slice</h4><ul>
<li>arr.slice 用于对数组进行截取(和字符串的类似)<br><code>arr.slice(begin[,end])</code><br>包含 begin 元素但是不包含 end</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dogs = [<span class="string">&#x27;二哈&#x27;</span>, <span class="string">&#x27;边牧&#x27;</span>, <span class="string">&#x27;柯基&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>];</span><br><span class="line"><span class="comment">//slice方法，不回修改原数组</span></span><br><span class="line"><span class="comment">//splice会修改原有的数组</span></span><br><span class="line"><span class="comment">//start从什么地方开始</span></span><br><span class="line"><span class="comment">//end结束为止</span></span><br><span class="line"><span class="keyword">var</span> res = dogs.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dogs);</span><br><span class="line"><span class="comment">//不传任何参数，把原数组复制一份给我们</span></span><br><span class="line"><span class="keyword">var</span> res1 = dogs.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line"><span class="comment">//填负数</span></span><br><span class="line"><span class="keyword">var</span> res2 = dogs.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">// [&#x27;边牧&#x27;, &#x27;柯基&#x27;, &#x27;alex&#x27;]</span></span><br><span class="line"><span class="comment">//故意找茬</span></span><br><span class="line"><span class="keyword">var</span> res3 = dogs.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-concat"><a href="#8-2-concat" class="headerlink" title="8.2 concat"></a>8.2 concat</h4><p>创建一个新的数组，其中包含其他数组&#x2F;其他项的值<br>进行数组的拼接<br><code>arr.concat(value1[,value2[...[,valueN]]])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">concat</span>(<span class="string">&#x27;新来的&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> res1 = arr.<span class="title function_">concat</span>(<span class="string">&#x27;又一个新来的&#x27;</span>, [<span class="number">100</span>, <span class="number">200</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res, res1);</span><br><span class="line"><span class="keyword">var</span> name1 = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> name2 = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1.<span class="title function_">concat</span>(name2));</span><br></pre></td></tr></table></figure>

<h4 id="8-3-join"><a href="#8-3-join" class="headerlink" title="8.3 join"></a>8.3 join</h4><p>把数组的所有元素连接成一个字符串并返回这个字符串<br><code>arr.join([连接符])</code></p>
<p>功能相反的一个字符串方法<code>str.split([连接符])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组&#x27;</span>, arr);</span><br><span class="line"><span class="comment">//不传任何连接符，默认使用逗号</span></span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">join</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="keyword">var</span> res1 = arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line"><span class="keyword">var</span> res2 = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//10203040</span></span><br><span class="line"><span class="keyword">var</span> res3 = arr.<span class="title function_">join</span>(<span class="string">&#x27;^.^&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;get-element-by-id&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">//[&#x27;get&#x27;, &#x27;element&#x27;, &#x27;by&#x27;, &#x27;id&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="9-数组方法-查找元素"><a href="#9-数组方法-查找元素" class="headerlink" title="9 数组方法-查找元素"></a>9 数组方法-查找元素</h3><h4 id="9-1-indexOf"><a href="#9-1-indexOf" class="headerlink" title="9.1 indexOf"></a>9.1 indexOf</h4><p><code>arr.indexOf(searchElment[,fromIndex])</code><br>从 fromIndex 开始查找，如果找到返回索引，没有找到返回-1，也有对应的 lastIndexOf 方法</p>
<h4 id="9-2-includes"><a href="#9-2-includes" class="headerlink" title="9.2 includes"></a>9.2 includes</h4><p>从 fromIndex 开始搜索 searchElment，如果找到了返回 true，找不到的话返回 false<br><code>arr.includes(searchElment[,fromIndex])</code></p>
<h4 id="9-3-find-和-findIndex"><a href="#9-3-find-和-findIndex" class="headerlink" title="9.3 find 和 findIndex"></a>9.3 find 和 findIndex</h4><p>都是 es6 新增的</p>
<p>9.3-1 findIndex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nnd&#x27;</span>];</span><br><span class="line"><span class="comment">//item是元素 index索引 arr当前数组</span></span><br><span class="line"><span class="keyword">var</span> res = names.<span class="title function_">findIndex</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(item, index, arr);</span></span><br><span class="line">  <span class="keyword">return</span> item === <span class="string">&#x27;nnd&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//2 &#x27;nnd&#x27;的索引</span></span><br></pre></td></tr></table></figure>

<p>9.3-2 find<br><code>arr.find(function(item,index,arr)&#123;&#125;)</code></p>
<ul>
<li>返回值:你找到的数据</li>
<li>查找条件以 return 的形式来书写</li>
<li>往往用在复杂数据类型中查找</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> students = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">38</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&#x27;kern&#x27;</span>, <span class="attr">age</span>: <span class="number">88</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">//查找id为101的学生的所有信息</span></span><br><span class="line"><span class="keyword">var</span> stu = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//自己用for循环配合if寻找</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// students[i]</span></span><br><span class="line">  <span class="keyword">if</span> (students[i].<span class="property">id</span> === <span class="number">101</span>) &#123;</span><br><span class="line">    stu = students[i];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu);</span><br><span class="line"><span class="comment">// if (stu) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;展示stu&#x27;);</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;查无此人&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> stu2 = students.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">id</span> === <span class="number">101</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu2);</span><br><span class="line"><span class="comment">// //简单的</span></span><br><span class="line"><span class="comment">// var arr = [100, 200, 301, 400, 500];</span></span><br><span class="line"><span class="comment">// //我要查找arr中的奇数</span></span><br><span class="line"><span class="comment">// var res = arr.find(function (item) &#123;</span></span><br><span class="line"><span class="comment">//   //以return的形式书写条件</span></span><br><span class="line"><span class="comment">//   return item % 2 === 1;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// console.log(res);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//往往会用在复杂类型中查找</span></span><br><span class="line"><span class="keyword">var</span> objArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;迪丽热巴&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;刘亦菲&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">//要求接受用户输入的id，根据id查找🐟的所有信息</span></span><br><span class="line"><span class="keyword">var</span> inputId = <span class="title class_">Number</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入你要查询的🐟的id&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> fish = objArr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="comment">//条件</span></span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">id</span> === inputId;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">alert</span>(fish); <span class="comment">//他只能识别字符串，当你想把一个对象强行识别为字符串 就会遇到[object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的🐟的完整信息:&#x27;</span>, fish);</span><br></pre></td></tr></table></figure>

<h3 id="10-数组的排序-sort-x2F-reverse"><a href="#10-数组的排序-sort-x2F-reverse" class="headerlink" title="10 数组的排序- sort&#x2F;reverse"></a>10 数组的排序- sort&#x2F;reverse</h3><h4 id="10-1-sort"><a href="#10-1-sort" class="headerlink" title="10.1 sort"></a>10.1 sort</h4><p>按照你制定的规则来排序<br>参数:两个</p>
<ul>
<li>arr.sort() 把数据一位一位的看待</li>
<li>arr.sort(a-b) 从小到大排</li>
<li>arr.sort(b-a) 从大到小</li>
</ul>
<p>返回值:排序后的数组</p>
<p><code>arr.sort[compareFunction]</code><br>如果 compareFunction（a，b）&lt;0 那么 a 会排到 b 的前面<br>如果 compareFunction（a，b）&#x3D;0 那么 a b 的相对位置保持不变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始的数组&#x27;</span>, arr);</span><br><span class="line"><span class="comment">//不写参数 把每个数据 一位一位的看待</span></span><br><span class="line"><span class="comment">// var res = arr.sort();</span></span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">a=3     b=1   -2&lt;0    3,1</span></span><br><span class="line"><span class="comment">a = 100 b=3     &lt;0  100,3,1</span></span><br><span class="line"><span class="comment">a=10   b=100    &gt;0  100,10,3,1</span></span><br><span class="line"><span class="comment">a=5  b=10       &gt;0  100,10,5,3,1</span></span><br><span class="line"><span class="comment">a=4  b=5        &gt;0  100,10,5,4,3,1</span></span><br><span class="line"><span class="comment">a=2  b=4        &gt;0  100,10,5,4,2,3,1</span></span><br><span class="line"><span class="comment">a=3  b=2        &lt;0  100,10,5,4,3,2,1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//a是下一位数，b是上一位数</span></span><br><span class="line">  <span class="comment">// console.group();</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;a&#x27;, a);</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;b&#x27;, b);</span></span><br><span class="line">  <span class="comment">// console.groupEnd();</span></span><br><span class="line">  <span class="comment">//从小到大排</span></span><br><span class="line">  <span class="comment">// return a - b;</span></span><br><span class="line">  <span class="keyword">return</span> b - a; <span class="comment">// [100, 10, 5, 4, 3, 2, 1]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用方法之后的数组&#x27;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复杂类型排序</span></span><br><span class="line"><span class="keyword">var</span> good = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;麦当劳&#x27;</span>, <span class="attr">price</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&#x27;KFC&#x27;</span>, <span class="attr">price</span>: <span class="number">99</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&#x27;华莱士&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&#x27;奈雪的茶&#x27;</span>, <span class="attr">price</span>: <span class="number">28</span> &#125;,</span><br><span class="line">];</span><br><span class="line">good.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">//a.price  b.price</span></span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">price</span> - b.<span class="property">price</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="10-2-reverse"><a href="#10-2-reverse" class="headerlink" title="10.2 reverse"></a>10.2 reverse</h4><p>颠倒数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">nums.<span class="title function_">reverse</span>(); <span class="comment">//[4,3,2,1]</span></span><br></pre></td></tr></table></figure>

<p>返回值：颠倒之后的数组</p>
<h3 id="11-数组的其他高阶方法"><a href="#11-数组的其他高阶方法" class="headerlink" title="11 数组的其他高阶方法"></a>11 数组的其他高阶方法</h3><h4 id="11-1-forEach"><a href="#11-1-forEach" class="headerlink" title="11.1 forEach"></a>11.1 forEach</h4><p>遍历数组，并且让数组中的每一个元素都执行一次对应的方法<br>语法:arr.forEach(function(item,index,arr){})</p>
<ul>
<li>item 数组内的每一项</li>
<li>index 每一项的索引</li>
<li>arr 被遍历的数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">35</span>, <span class="number">66</span>, <span class="number">10</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">//讲过三种数组的遍历 ，新增的一种遍历方式</span></span><br><span class="line"><span class="comment">//a以后都没有必要去写，只是为了记笔记方便</span></span><br><span class="line"><span class="comment">//a函数我们定义 但是不由我们调用 -- 回调函数</span></span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        forEach的原理 </span></span><br><span class="line"><span class="comment">          根据数组成员的数量来调用a函数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, arr);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">arr1.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  sum += item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h4 id="11-2-every"><a href="#11-2-every" class="headerlink" title="11.2 every"></a>11.2 every</h4><p>自带遍历，对每个元素进行条件判断，如果每个元素都成立返回 true，只要有一项不成立返回 false<br>参数:function(item,index){<br>item 每个元素<br>index 元素的索引<br>}</p>
<h4 id="11-3-some"><a href="#11-3-some" class="headerlink" title="11.3 some"></a>11.3 some</h4><p>自带遍历，对每个元素进行条件判断，只要有一个成立返回 true，都不成立才返回 false<br>参数:function(item,index){<br>item 每个元素<br>index 元素的索引<br>}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res1 = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br></pre></td></tr></table></figure>

<h4 id="11-4-filter"><a href="#11-4-filter" class="headerlink" title="11.4 filter"></a>11.4 filter</h4><p>语法:arr.filter(function(item,index,arr){})<br>item 每个元素<br>index 元素对应的下标<br>arr 当前过滤的数组<br>过滤条件也是以 return 的形式书写<br>返回值:过滤后的新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="comment">//以return形式书写过滤的条件</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">200</span>;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        filter的原理</span></span><br><span class="line"><span class="comment">        1.准备一个的空数组 []</span></span><br><span class="line"><span class="comment">        2.开始根据数组内的成员调用对应次数的a函数</span></span><br><span class="line"><span class="comment">          2-1 a(111) 返回false 111不加到第一步的数组中 []</span></span><br><span class="line"><span class="comment">          2-2 a(222) ....</span></span><br><span class="line"><span class="comment">          </span></span><br><span class="line"><span class="comment">          五次都走完之后 [222,333,444,555]</span></span><br><span class="line"><span class="comment">        3.返回[222,333,444,555]给res</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//得到的是条件成立的每一项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">88</span>, <span class="number">32</span>];</span><br><span class="line"><span class="comment">//只要奇数</span></span><br><span class="line"><span class="comment">//for...of</span></span><br><span class="line"><span class="keyword">var</span> newNums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    newNums.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//filter实现</span></span><br><span class="line"><span class="keyword">var</span> res2 = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1 true    0 false</span></span><br><span class="line"><span class="comment">// var res3 = nums.filter(item=&gt;item%2)</span></span><br></pre></td></tr></table></figure>

<h4 id="11-5-map"><a href="#11-5-map" class="headerlink" title="11.5 map"></a>11.5 map</h4><ul>
<li>语法:arr.map(function(item,index,arr){})</li>
<li>作用:映射数组</li>
<li>返回值:<ul>
<li>是一个新数组，并且长度和原数组一致</li>
<li>新数组里面的每一个元素都是根据原数组的每个元素映射出来的</li>
<li>映射的条件以 return 形式书写</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> good = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;麦当劳&#x27;</span>, <span class="attr">price</span>: <span class="number">25</span>, <span class="attr">sold</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&#x27;KFC&#x27;</span>, <span class="attr">price</span>: <span class="number">99</span>, <span class="attr">sold</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&#x27;华莱士&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>, <span class="attr">sold</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&#x27;奈雪的茶&#x27;</span>, <span class="attr">price</span>: <span class="number">28</span>, <span class="attr">sold</span>: <span class="number">5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">//  外卖平台 要抽成100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>];</span><br><span class="line"><span class="comment">//开始映射</span></span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">map</span>(<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">0.1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//[10, 20, 30, 40, 50]</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      原理</span></span><br><span class="line"><span class="comment">      1.准备一个新数组[]</span></span><br><span class="line"><span class="comment">      2.根据原始的数据进行遍历</span></span><br><span class="line"><span class="comment">        =&gt;第一次调用a(100,0,arr) 返回值10 把10放到新数组里面 [10]</span></span><br><span class="line"><span class="comment">        =&gt;第二次调用a(200,1,arr)      20   20      [10,20]</span></span><br><span class="line"><span class="comment">        ...</span></span><br><span class="line"><span class="comment">        [10,20,30,40,50]</span></span><br><span class="line"><span class="comment">      3.把最终的数组作为map函数的返回值给到res</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> goodNewPrice = good.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">price</span> + <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(goodNewPrice);</span><br></pre></td></tr></table></figure>

<h4 id="11-6-reduce"><a href="#11-6-reduce" class="headerlink" title="11.6 reduce"></a>11.6 reduce</h4><ul>
<li>语法:arr.reduce(function(prev,item,index,arr){},intial)<ul>
<li>prev:初始值或者每一次叠加后的结果</li>
<li>item</li>
<li>index</li>
<li>arr</li>
<li>intial:默认是 0，表示从什么位置开始叠加</li>
</ul>
</li>
<li>返回值:累加后的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> good = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;麦当劳&#x27;</span>, <span class="attr">price</span>: <span class="number">25</span>, <span class="attr">sold</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&#x27;KFC&#x27;</span>, <span class="attr">price</span>: <span class="number">99</span>, <span class="attr">sold</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&#x27;华莱士&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>, <span class="attr">sold</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&#x27;奈雪的茶&#x27;</span>, <span class="attr">price</span>: <span class="number">28</span>, <span class="attr">sold</span>: <span class="number">5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> res1 = good.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + item.<span class="property">price</span> * item.<span class="property">sold</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">prev, item</span>) &#123;</span><br><span class="line">  <span class="comment">//以return的形式书写每次叠加的操作</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(prev + item);</span><br><span class="line">  <span class="keyword">return</span> prev + item;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        reduce的原理</span></span><br><span class="line"><span class="comment">        1.准备一个初始值，按照你传递的第二个参数来定</span></span><br><span class="line"><span class="comment">        2.根据arr来调用a函数</span></span><br><span class="line"><span class="comment">          第一次 a(0,100,0,arr) return 0+100 把这个返回值赋给intial 100</span></span><br><span class="line"><span class="comment">          第二次 a(100,200,1,arr) return 100+200 把这个返回值赋给intial 300</span></span><br><span class="line"><span class="comment">          第三次 a(300,300,2,arr) return 300+300 把这个返回值赋给intial 600</span></span><br><span class="line"><span class="comment">          第四次 a(600,400,3,arr) return 600+400 把这个返回值赋给intial 1000</span></span><br><span class="line"><span class="comment">          第五次 a(1000,500,4,arr) return 1000+500 把这个返回值赋给intial 1500</span></span><br><span class="line"><span class="comment">        3.把intial的结果当作reduce的返回值 给到res</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//面试题 统计数组中每个元素出现的次数</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = arr1.<span class="title function_">reduce</span>(<span class="keyword">function</span> <span class="title function_">haha</span>(<span class="params">prev, item</span>) &#123;</span><br><span class="line">  <span class="comment">// if (prev[item]) &#123;</span></span><br><span class="line">  <span class="comment">//   prev[item] += 1;</span></span><br><span class="line">  <span class="comment">//   return prev;</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//   prev[item] = 1;</span></span><br><span class="line">  <span class="comment">//   return prev;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  prev[item] = prev[item] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      1. prev = &#123;&#125; 调用haha(&#123;&#125;,&quot;a&quot;) return &#123;a:1&#125; 并且赋给prev</span></span><br><span class="line"><span class="comment">      2. prev= &#123;a:1&#125; 调用haha(&#123;a:1&#125;,&quot;a&quot;) return &#123;a:2&#125; 并赋值给prev</span></span><br><span class="line"><span class="comment">      ...</span></span><br><span class="line"><span class="comment">      最后一次</span></span><br><span class="line"><span class="comment">      prev=&#123;</span></span><br><span class="line"><span class="comment">        a:2,</span></span><br><span class="line"><span class="comment">        b:2,</span></span><br><span class="line"><span class="comment">        c:3</span></span><br><span class="line"><span class="comment">        d:5</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      把最终的prev当作reduce的返回值给到obj</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//综合练习</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">88</span>, <span class="number">32</span>]; <span class="comment">//19168</span></span><br><span class="line"><span class="comment">//过滤得到所有的偶数，映射所有偶数的平方 最后计算他们的和</span></span><br><span class="line"><span class="keyword">var</span> total = nums</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item * item;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + item;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// var toal = nums</span></span><br><span class="line"><span class="comment">// .filter(item=&gt;item%2===0)</span></span><br><span class="line"><span class="comment">// .map(item=&gt;item*item)</span></span><br><span class="line"><span class="comment">// .reduce((prev,item)=&gt;prev+item,0)</span></span><br></pre></td></tr></table></figure>

<h3 id="12-数组塌陷"><a href="#12-数组塌陷" class="headerlink" title="12 数组塌陷"></a>12 数组塌陷</h3><h4 id="12-1-概念"><a href="#12-1-概念" class="headerlink" title="12.1 概念"></a>12.1 概念</h4><ul>
<li>当你在数组中删除内容的时候，就会产生塌陷</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求:一个数组，每次删除一个元素，把所有的内容删除完毕</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原来的数组&#x27;</span>, arr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除过后的数组&#x27;</span>, arr);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      [1,2,3,4]</span></span><br><span class="line"><span class="comment">      当你把1删除以后</span></span><br><span class="line"><span class="comment">      原来的2会往前移动，原来2索引是1 现在索引0</span></span><br><span class="line"><span class="comment">      [1,2,3,4] len=4</span></span><br><span class="line"><span class="comment">      i=0 </span></span><br><span class="line"><span class="comment">      arr.splice(0,1)</span></span><br><span class="line"><span class="comment">      [2,3,4] len=3</span></span><br><span class="line"><span class="comment">      i=1</span></span><br><span class="line"><span class="comment">      arr.splice(1,1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [2,4] len=2</span></span><br><span class="line"><span class="comment">      i=2 退出循环</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure>

<h4 id="12-2-解决办法"><a href="#12-2-解决办法" class="headerlink" title="12.2 解决办法"></a>12.2 解决办法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：倒着循环</span></span><br><span class="line"><span class="comment">// var arr = [1, 2, 3, 4];</span></span><br><span class="line"><span class="comment">// console.log(&#x27;原来的数组&#x27;, arr);</span></span><br><span class="line"><span class="comment">// for (var i = arr.length - 1; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="comment">//   arr.splice(i, 1);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;删除过后的数组&#x27;, arr);</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      代码执行</span></span><br><span class="line"><span class="comment">      [1,2,3,4] len=4</span></span><br><span class="line"><span class="comment">      i=3 </span></span><br><span class="line"><span class="comment">      arr.splice(3,1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [1,2,3] len=3</span></span><br><span class="line"><span class="comment">      i=2</span></span><br><span class="line"><span class="comment">      arr.splice(2,1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [1,2] len=2</span></span><br><span class="line"><span class="comment">      i=1</span></span><br><span class="line"><span class="comment">      arr.splice(1,1)</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      [1] len=1</span></span><br><span class="line"><span class="comment">      i=0</span></span><br><span class="line"><span class="comment">      arr.splice(0,1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [] len=0</span></span><br><span class="line"><span class="comment">      i=-1</span></span><br><span class="line"><span class="comment">      退出循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="comment">//方法二：每次让i跟着变化</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原来的数组&#x27;</span>, arr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//删除一个</span></span><br><span class="line">  arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">  i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除过后的数组&#x27;</span>, arr);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">        [1,2,3,4] len=4</span></span><br><span class="line"><span class="comment">        i=0 </span></span><br><span class="line"><span class="comment">        arr.splice(0,1)</span></span><br><span class="line"><span class="comment">        i--  i=&gt;-1 i=&gt;0</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        [2,3,4] len=3</span></span><br><span class="line"><span class="comment">        i=0</span></span><br><span class="line"><span class="comment">        arr.splice(0,1)</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        [3,4] len=2</span></span><br><span class="line"><span class="comment">        i=0</span></span><br><span class="line"><span class="comment">        arr.splice(0,1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        [4] len=1</span></span><br><span class="line"><span class="comment">        i=0 </span></span><br><span class="line"><span class="comment">        arr.splice(0,1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        [] len=0</span></span><br><span class="line"><span class="comment">        i=0</span></span><br><span class="line"><span class="comment">        循环退出</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure>

<h3 id="13-数组去重（重点）"><a href="#13-数组去重（重点）" class="headerlink" title="13 数组去重（重点）"></a>13 数组去重（重点）</h3><h4 id="13-1-排序后删除相邻"><a href="#13-1-排序后删除相邻" class="headerlink" title="13.1 排序后删除相邻"></a>13.1 排序后删除相邻</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//方案一</span></span><br><span class="line"><span class="comment">//1.排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2.把重复的删除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//判断当前的和下一个是否相等</span></span><br><span class="line">  <span class="keyword">if</span> (arr[i] === arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//解决塌陷</span></span><br><span class="line">    i--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      [1(0),1(1),1(2),1(3)] len=15</span></span><br><span class="line"><span class="comment">      i=0</span></span><br><span class="line"><span class="comment">      arr[i]=== arr[i+1]</span></span><br><span class="line"><span class="comment">      i-&gt;-1   i++-&gt;0</span></span><br><span class="line"><span class="comment">      [1(1),1(2),1(3)] len=14</span></span><br><span class="line"><span class="comment">      arr[i] === arr[i+1]</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure>

<h4 id="13-2-push-时判断是否重复"><a href="#13-2-push-时判断是否重复" class="headerlink" title="13.2 push 时判断是否重复"></a>13.2 push 时判断是否重复</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      方案2:</span></span><br><span class="line"><span class="comment">      1. 准备新数组</span></span><br><span class="line"><span class="comment">      2. 遍历原来的数组，一个个添加进去</span></span><br><span class="line"><span class="comment">        添加的时候我们需要判断是否已经存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        =&gt;判断数组是否已经存在某个元素</span></span><br><span class="line"><span class="comment">        indexOf </span></span><br><span class="line"><span class="comment">        =&gt; -1 没有</span></span><br><span class="line"><span class="comment">        =&gt; 只要不是-1 有</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure>

<h4 id="13-3-利用对象键名不重复"><a href="#13-3-利用对象键名不重复" class="headerlink" title="13.3 利用对象键名不重复"></a>13.3 利用对象键名不重复</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      方案:利用对象的key不能重复</span></span><br><span class="line"><span class="comment">        1.准备好一个空对象</span></span><br><span class="line"><span class="comment">        2.遍历原来的数组把item当作对象的key 添加到对象内</span></span><br><span class="line"><span class="comment">        3.把对象变成数组</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = arr[i];</span><br><span class="line">  <span class="comment">//item拿到的就是每个元素</span></span><br><span class="line">  <span class="comment">//把item作为对象的key添加进去 value不管</span></span><br><span class="line">  obj[item] = <span class="string">&#x27;好痛苦&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="comment">//键名 key obj[key]</span></span><br><span class="line">  newArr.<span class="title function_">push</span>(key - <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure>

<h4 id="13-4-set"><a href="#13-4-set" class="headerlink" title="13.4 set"></a>13.4 set</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      es6 有一个数据结构叫set 他天生不允许重复</span></span><br><span class="line"><span class="comment">      new Set 创建一个set</span></span><br><span class="line"><span class="comment">      ... 就是把set里面的东西全部倒出来</span></span><br><span class="line"><span class="comment">      []声明数组</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]);</span><br></pre></td></tr></table></figure>

<h4 id="13-5-挨个比较"><a href="#13-5-挨个比较" class="headerlink" title="13.5 挨个比较"></a>13.5 挨个比较</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">      去重方法:</span></span><br><span class="line"><span class="comment">      1.循环遍历原数组</span></span><br><span class="line"><span class="comment">      2.每一个item去和后面所有item挨个比较</span></span><br><span class="line"><span class="comment">        如果相同 把后面的item删除splice(？,1)</span></span><br><span class="line"><span class="comment">        如果不同 什么都不做</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//arr[i]就是item</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        2.判断重复</span></span><br><span class="line"><span class="comment">          var arr = [1, 2, 3, 4, 1, 1, 2, 3, 2, 3, 1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="comment">                     0  1</span></span><br><span class="line"><span class="comment">          如果我拿到的是数据1，去检查是否和后面的1相同？</span></span><br><span class="line"><span class="comment">          arr.indexOf(1,0+1)// 0数据本身的索引+1 跳过自己往后查找</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          arr.indexOf(2,1+1)</span></span><br><span class="line"><span class="comment">          ...</span></span><br><span class="line"><span class="comment">          arr.indexOf(数据,数据索引+1)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  <span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(arr[i], i + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//表明后面有重复，删除它</span></span><br><span class="line">    arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    i--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;处理完的数组&#x27;</span>, arr);</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>数组常用方法通用语法:数组名.xxx()</p>
<ul>
<li>方法名不同</li>
<li>参数不同</li>
</ul>
</li>
<li><p>方法<br>push-pop shift-unshift<br>splice<br>slice<br>concat<br>join - split<br>indexOf、lastIndexOf<br>includes<br>find、findIndex<br>sort<br>reverse<br>forEach(function(item,index,arr){})<br>every<br>some<br>filter<br>map<br>reduce</p>
</li>
</ul>
<ol>
<li>会修改原数组的方法<br>push-pop、unshift-shift、splice<br>sort、reverse</li>
<li>不会修改原数组的方法<br>slice、concat、join、indexOf、lastIndexOf、<br>includes、find、findIndex、forEach、every、some<br>filter、map、reduce</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记02-事件与语句</title>
    <url>/2022/04/28/b05%20javascript%E5%85%A5%E9%97%A802/</url>
    <content><![CDATA[<h2 id="事件、字符串、运算符"><a href="#事件、字符串、运算符" class="headerlink" title="事件、字符串、运算符"></a>事件、字符串、运算符<span id="more"></span></h2><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件即指发生在html中的一些浏览器行为，或者用户行为。前面我们已经使用过<code>onclick</code>，即指当按钮点击时。</p>
<p>以下是一些常见的事件：</p>
<table>
<thead>
<tr>
<th align="left">事件</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onchange</td>
<td align="left">HTML 元素改变</td>
</tr>
<tr>
<td align="left">onclick</td>
<td align="left">用户点击 HTML 元素</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td align="left">鼠标指针移动到指定的元素上时发生</td>
</tr>
<tr>
<td align="left">onmouseout</td>
<td align="left">用户从一个 HTML 元素上移开鼠标时发生</td>
</tr>
<tr>
<td align="left">onkeydown</td>
<td align="left">用户按下键盘按键</td>
</tr>
<tr>
<td align="left">onload</td>
<td align="left">浏览器已完成页面的加载</td>
</tr>
</tbody></table>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>字符串可以存储一系列字符，如 “John Doe”。</li>
<li>字符串可以是插入到引号中的任何字符。你可以使用单引号或双引号：</li>
<li>字符串的索引是从0开始，第一个字符索引值为[0]，第二个字符索引值为[1]</li>
<li>字符串由于是用单双引号来定义的，字符串里可以使用引号，但是不能和字符串的符号一样，例如<code>var answer = &quot;He is called &#39;Johnny&#39;&quot;;</code>所以在字符串里的单双引号需要加&#x2F;来转义，例子：<code>var y = &quot;He is called \&quot;Johnny\&quot;&quot;;</code></li>
<li>字符串的长度可以用<code>txt.length</code>来获得</li>
<li>字符串可以是对象，但是单纯的字符串≠对象（因为对象要有方法，有属性）</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>除了常见的加减乘除符号，js还有一些特殊的运算符</p>
<p>特别留意<code>++</code>和<code>--</code>符号,他们代表自增和自减符号，什么意思呢？就当式子<strong>从左到右</strong>按顺序计算到这个符号后，例如–y，等于y自减1，那为什么–符号放在y前面和后面，x的值不一样？因为式子是<strong>从左到右</strong>计算，当x&#x3D;y–时，计算x的值，只计算到x&#x3D;y就结束了<strong>对x的计算</strong>。</p>
<p>当y等于5时：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>x结果</th>
<th>y结果</th>
</tr>
</thead>
<tbody><tr>
<td>x&#x3D;y++</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>x&#x3D;++y</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>x&#x3D;y–</td>
<td>5</td>
<td>4</td>
</tr>
<tr>
<td>x&#x3D;–y</td>
<td>4</td>
<td>4</td>
</tr>
</tbody></table>
<h4 id="js赋值运算符"><a href="#js赋值运算符" class="headerlink" title="js赋值运算符"></a>js赋值运算符</h4><p>给定 <strong>x&#x3D;10</strong> 和 <strong>y&#x3D;5</strong>，下面的表格解释了赋值运算符：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">例子</th>
<th align="left">等同于</th>
<th align="left">运算结果</th>
<th align="left">在线实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;</td>
<td align="left">x&#x3D;y</td>
<td align="left"></td>
<td align="left">x&#x3D;5</td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_oper_equal">实例 »</a></td>
</tr>
<tr>
<td align="left">+&#x3D;</td>
<td align="left">x+&#x3D;y</td>
<td align="left">x&#x3D;x+y</td>
<td align="left">x&#x3D;15</td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_oper_plusequal">实例 »</a></td>
</tr>
<tr>
<td align="left">-&#x3D;</td>
<td align="left">x-&#x3D;y</td>
<td align="left">x&#x3D;x-y</td>
<td align="left">x&#x3D;5</td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_oper_minequal">实例 »</a></td>
</tr>
<tr>
<td align="left">*&#x3D;</td>
<td align="left">x*&#x3D;y</td>
<td align="left">x&#x3D;x*y</td>
<td align="left">x&#x3D;50</td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_oper_multequal">实例 »</a></td>
</tr>
<tr>
<td align="left">&#x2F;&#x3D;</td>
<td align="left">x&#x2F;&#x3D;y</td>
<td align="left">x&#x3D;x&#x2F;y</td>
<td align="left">x&#x3D;2</td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_oper_divequal">实例 »</a></td>
</tr>
<tr>
<td align="left">%&#x3D;</td>
<td align="left">x%&#x3D;y</td>
<td align="left">x&#x3D;x%y</td>
<td align="left">x&#x3D;0</td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_oper_modequal">实例 »</a></td>
</tr>
</tbody></table>
<h4 id="js比较和逻辑运算符"><a href="#js比较和逻辑运算符" class="headerlink" title="js比较和逻辑运算符"></a>js比较和逻辑运算符</h4><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p>
<p>x&#x3D;5，下面的表格解释了比较运算符：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">比较</th>
<th align="left">返回值</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;&#x3D;</td>
<td align="left">等于</td>
<td align="left">x&#x3D;&#x3D;8</td>
<td align="left"><em>false</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison1">实例 »</a></td>
</tr>
<tr>
<td align="left">x&#x3D;&#x3D;5</td>
<td align="left"><em>true</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison2">实例 »</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&#x3D;&#x3D;&#x3D;</td>
<td align="left">绝对等于（值和类型均相等）</td>
<td align="left">x&#x3D;&#x3D;&#x3D;”5”</td>
<td align="left"><em>false</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison3">实例 »</a></td>
</tr>
<tr>
<td align="left">x&#x3D;&#x3D;&#x3D;5</td>
<td align="left"><em>true</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison4">实例 »</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">!&#x3D;</td>
<td align="left">不等于</td>
<td align="left">x!&#x3D;8</td>
<td align="left"><em>true</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison5">实例 »</a></td>
</tr>
<tr>
<td align="left">!&#x3D;&#x3D;</td>
<td align="left">不绝对等于（值和类型有一个不相等，或两个都不相等）</td>
<td align="left">x!&#x3D;&#x3D;”5”</td>
<td align="left"><em>true</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison6">实例 »</a></td>
</tr>
<tr>
<td align="left">x!&#x3D;&#x3D;5</td>
<td align="left"><em>false</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison7">实例 »</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于</td>
<td align="left">x&gt;8</td>
<td align="left"><em>false</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison8">实例 »</a></td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">小于</td>
<td align="left">x&lt;8</td>
<td align="left"><em>true</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison9">实例 »</a></td>
</tr>
<tr>
<td align="left">&gt;&#x3D;</td>
<td align="left">大于或等于</td>
<td align="left">x&gt;&#x3D;8</td>
<td align="left"><em>false</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison10">实例 »</a></td>
</tr>
<tr>
<td align="left">&lt;&#x3D;</td>
<td align="left">小于或等于</td>
<td align="left">x&lt;&#x3D;8</td>
<td align="left"><em>true</em></td>
<td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison11">实例 »</a></td>
</tr>
</tbody></table>
<p>逻辑运算符用于测定变量或值之间的逻辑。</p>
<p>给定 x&#x3D;6 以及 y&#x3D;3，下表解释了逻辑运算符：</p>
<p>即与或非三种类型，</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">and</td>
<td align="left">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">or</td>
<td align="left">(x&#x3D;&#x3D;5 || y&#x3D;&#x3D;5) 为 false</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">not</td>
<td align="left">!(x&#x3D;&#x3D;y) 为 true</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记04-函数</title>
    <url>/2022/04/28/b08%20javascript%E5%85%A5%E9%97%A804%20%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数<span id="more"></span></h2><h3 id="程序里面的-foo、bar、baz"><a href="#程序里面的-foo、bar、baz" class="headerlink" title="程序里面的 foo、bar、baz"></a>程序里面的 foo、bar、baz</h3><p>通常被用来作为<strong>函数、变量、文件</strong>的命名<br>目前已经变成了<strong>编程术语</strong>的一部份<br>他们本身并<strong>没有特殊的用途和意义</strong><br>被称为“伪变量”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stackover flow</span></span><br><span class="line"><span class="keyword">var</span> foo = xxxxxx;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> baz = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>函数其实就是某种特定功能的代码的封装</p>
<p>函数的使用：</p>
<ol>
<li><p>声明函数–封装 独立的功能<br>在 js 中也可以称为定义函数<br>声明函数的过程是对某些功能的封装<br>在后续开发中，我们会根据不同的需求定义很多函数</p>
</li>
<li><p>调用函数–享受封装的成果<br>也称为函数调用</p>
</li>
</ol>
<p>函数的作用：提高开发效率，复用代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//实现非常复杂的功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<h3 id="函数的声明和调用"><a href="#函数的声明和调用" class="headerlink" title="函数的声明和调用"></a>函数的声明和调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line"><span class="comment">//制作好一个工具，但是这个工具默认情况下是不会被使用的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="comment">//使用工具</span></span><br><span class="line"><span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure>

<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">  <span class="comment">//函数封装的代码</span></span><br><span class="line">&#125;</span><br><span class="line">函数名();</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>函数的命名规则和之前的变量命名规则一样</li>
<li>函数要尽量做到见名知意(函数通常使用动词更多)</li>
<li>函数定义完后，里面的代码不会执行，必须调用才会执行</li>
</ol>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>增加函数的通用性，针对相同的逻辑处理，能适应更多变的数据就有了函数的参数</p>
<ul>
<li>在函数的内部，把参数当作变量使用，进行你要的处理</li>
<li>函数调用时，按照函数参数的定义时的顺序，传递进去</li>
<li>形参(param):<strong>定义</strong>函数时，小括号中的参数，是用来接受实际参数用的，在函数内部 作为变量使用</li>
<li>实参(argument):<strong>调用</strong>函数时,小括号中的参数,是用来把真实的数据传递到函数内部用的</li>
</ul>
<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>return 关键字来定义返回值<br>return 除了返回值以外还能终止函数的执行</p>
<h3 id="arguments-实参列表"><a href="#arguments-实参列表" class="headerlink" title="arguments 实参列表"></a>arguments 实参列表</h3><p>函数内部存在特别的对象:arguments 对象<br>里面存放的是函数接受到的所有实际参数<br>他的数据类型是一个 object 类型，伪数组(array-like)</p>
<p>你调用函数的时候，传递了多少个实参，这个变量里面就有多少个数据索引&#x2F;下标:从0开始，依次+1</p>
<p>访问arguments内的每一个数据：利用索引访问:arguments[索引]  <code> arguments[0]</code></p>
<p>arguments的长度调用函数时具体传递的实际参数的个数<code> arguments.length</code></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数自己调用自己有一个专业的名词，叫递归(Recursion)</p>
<p>将一个复杂的任务，转化成重复执行的相同(小)任务。</p>
<h3 id="局部和全局变量"><a href="#局部和全局变量" class="headerlink" title="局部和全局变量"></a>局部和全局变量</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>在 js(es6 之前)中没有块级作用域的概念的，但是函数是可以定义自己的作用域的</p>
<ul>
<li>作用域(Scope)：表示一些标识符的作用有效范围(那块代码这个变量可以使用)</li>
<li>函数作用域:表示在函数内部定义的变量，只有函数内部可以访问到</li>
</ul>
<h4 id="局部和全局变量-1"><a href="#局部和全局变量-1" class="headerlink" title="局部和全局变量"></a>局部和全局变量</h4><ul>
<li>局部变量:定义在函数内部的变量，称为局部变量</li>
<li>外部变量:定义在函数外部的变量,称为外部变量</li>
<li>全局变量:在任何函数中&#x2F;函数外都能访问到的变量，就是全局变量(var 声明的全局变量是在 window 上添加一个属性)</li>
</ul>
<h4 id="变量定义的机制"><a href="#变量定义的机制" class="headerlink" title="变量定义的机制"></a>变量定义的机制</h4><p>​      你定义在那个作用域下的变量，就是那个作用域的私有变量，就只能在该作用域及其后代作用域中使用</p>
<h4 id="变量的访问顺序"><a href="#变量的访问顺序" class="headerlink" title="变量的访问顺序"></a>变量的访问顺序</h4><p>在函数中访问变量时，优先找自己，如果自己没有就去外部找，最终找到 window 都没有那就报错</p>
<ul>
<li>块级作用域，作用域链，变量提升，AO，VO，GO 高阶学习</li>
</ul>
<h4 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h4><pre><code>     1. 当你给一个变量赋值的时候
</code></pre>
<ol start="2">
<li><p>如果自己作用域内有该变量，那么给自己赋值</p>
</li>
<li><p>如果自己作用域内没有，那么给父级的变量赋值</p>
</li>
<li><p>如果父级还没有，那就给父级的父级变量赋值</p>
</li>
<li><p>以此类推到window对象，还没有</p>
</li>
<li><p>那么就会把这个变量定义为全局变量，并且赋值</p>
</li>
</ol>
<h3 id="函数的头等公民"><a href="#函数的头等公民" class="headerlink" title="函数的头等公民"></a>函数的头等公民</h3><p>函数的表达式(Function Expressions)<br>在 js 中函数并不是神奇的语法结构，而是一种特殊的值(是一种特殊的对象 Object 类型)<br>之前我们定义函数的方式–函数的声明(Function Declaration)<br>其实，还有另一种写法是函数表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo函数&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>头等函数(first-class-function:第一级函数),指在程序设计语言中，函数被当作头等公民</p>
<ul>
<li>函数可以作为其他函数的参数、函数的返回值、赋值给变量、或者存储在其他的数据结构中</li>
<li>通常对头等函数的编程方式，称为函数式编程。</li>
</ul>
<h3 id="回调函数（callback-function）"><a href="#回调函数（callback-function）" class="headerlink" title="回调函数（callback function）"></a>回调函数（callback function）</h3><p>高阶函数必须满足以下两个条件之一</p>
<ul>
<li>接收一个&#x2F;多个函数作为参数</li>
<li>输出一个函数(返回一个函数)</li>
</ul>
<h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>Immediately-Invoked Function Expression(IIFE)</p>
<h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><ul>
<li>在所有代码执行之前，对代码进行通读并解释</li>
</ul>
<h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>function以及用var 关键字定义的变量，在浏览器解析的时候会首先将<strong>声明</strong>提升至前排，再按照顺序解析<strong>定义</strong></p>
<p>这就是为什么下面代码块会提示undefined而不是直接报错。</p>
<h4 id="预解析-var-关键字"><a href="#预解析-var-关键字" class="headerlink" title="预解析 var 关键字"></a>预解析 var 关键字</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//解析var关键字</span></span><br><span class="line"><span class="comment">//1. var num</span></span><br><span class="line"><span class="comment">//2. num=100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">打开页面</span></span><br><span class="line"><span class="comment">  预解析</span></span><br><span class="line"><span class="comment">    =&gt; var num</span></span><br><span class="line"><span class="comment">      -&gt;告诉浏览器我定义一个变量叫num，但是没有赋值</span></span><br><span class="line"><span class="comment">  执行代码</span></span><br><span class="line"><span class="comment">    = 第一行代码 在控制台打印num</span></span><br><span class="line"><span class="comment">      - 因为预解析的时候，已经声明过num变量，但是没有赋值</span></span><br><span class="line"><span class="comment">      - num存在，但是没有值</span></span><br><span class="line"><span class="comment">      - undefined</span></span><br><span class="line"><span class="comment">    = 第二行代码</span></span><br><span class="line"><span class="comment">      - 给已经声明的num赋值为100</span></span><br><span class="line"><span class="comment">    = 第三行代码</span></span><br><span class="line"><span class="comment">      - 打印num变量</span></span><br><span class="line"><span class="comment">      - 由于第二行代码的执行 num已经被赋值为100</span></span><br><span class="line"><span class="comment">      - 打印100    </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是fn&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  1 fn()</span></span><br><span class="line"><span class="comment">  2 var fn = funciton()&#123;&#125;</span></span><br><span class="line"><span class="comment">  3 fn()</span></span><br><span class="line"><span class="comment">  打开页面</span></span><br><span class="line"><span class="comment">    预解析</span></span><br><span class="line"><span class="comment">      = var fn</span></span><br><span class="line"><span class="comment">        - 告诉浏览器我定义了一个变量叫fn，但是没有赋值</span></span><br><span class="line"><span class="comment">    执行代码</span></span><br><span class="line"><span class="comment">      = 第一行代码 fn()</span></span><br><span class="line"><span class="comment">        - 把fn变量名，当作函数名来调用</span></span><br><span class="line"><span class="comment">        - 但是fn只是声明了变量，并没有赋值，所以fn是undefined</span></span><br><span class="line"><span class="comment">        - 我们就相当于在做 undefined()</span></span><br><span class="line"><span class="comment">        - 报错 fn is not a function    </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="解析-声明式-函数"><a href="#解析-声明式-函数" class="headerlink" title="解析 声明式 函数"></a>解析 声明式 函数</h4><ul>
<li>在所有代码执行前，把函数名进行声明提前，并且赋值为一个函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是fn&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1 fn()</span></span><br><span class="line"><span class="comment">2 function fn()&#123;&#125;</span></span><br><span class="line"><span class="comment">3 fn()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">打开页面</span></span><br><span class="line"><span class="comment">  预解析</span></span><br><span class="line"><span class="comment">    = function fn()&#123;&#125;</span></span><br><span class="line"><span class="comment">    - 告诉浏览器，我定义了一个fn变量，并且这个fn变量里面保存的是一个函数</span></span><br><span class="line"><span class="comment">  代码执行</span></span><br><span class="line"><span class="comment">    = 第一行代码 fn()</span></span><br><span class="line"><span class="comment">      - 拿到fn变量保存的值，当作一个函数来使用</span></span><br><span class="line"><span class="comment">      - 因为预解析阶段，fn里面就是一个函数</span></span><br><span class="line"><span class="comment">      - 正常调用 不报错</span></span><br><span class="line"><span class="comment">    = 第二行代码</span></span><br><span class="line"><span class="comment">    = 第三行代码</span></span><br><span class="line"><span class="comment">      - 拿到fn变量保存的值，当作一个函数来使用</span></span><br><span class="line"><span class="comment">      - 因为预解析阶段，fn里面就是一个函数</span></span><br><span class="line"><span class="comment">      - 正常调用 不报错</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="预解析的无节操"><a href="#预解析的无节操" class="headerlink" title="预解析的无节操"></a>预解析的无节操</h4><ol>
<li>不管 if 是否为 true，if 里面的代码依旧会预解析</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">//var num会提升到最顶上，但是num=100赋值操作还是留在原地</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于如下代码</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>函数体内，return 后面的代码虽然不执行，但是还是会预解析</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是fn内的代码&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(anum); <span class="comment">//undefined  不会报错，因为var anum提升到函数作用域内的顶部</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> anum = <span class="number">100</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(anum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于如下代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> anum;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是fn内的代码&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(anum);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> anum = <span class="number">100</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(anum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重名问题</li>
</ol>
<ul>
<li>当你使用 var 定义的变量 和 声明式的函数 重名的时候 以函数为准</li>
<li>只在预解析阶段以函数为准</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">num</span>();</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">num</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是num&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">num</span>();</span><br><span class="line"><span class="comment">//相当于如下代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是num&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="title function_">num</span>();</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">num</span>();</span><br><span class="line"><span class="title function_">num</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1 num();</span></span><br><span class="line"><span class="comment">2 var num = 100;</span></span><br><span class="line"><span class="comment">3 num();</span></span><br><span class="line"><span class="comment">4 function num() &#123; console.log(&#x27;我是num&#x27;);&#125;</span></span><br><span class="line"><span class="comment">5 num();</span></span><br><span class="line"><span class="comment">  打开页面</span></span><br><span class="line"><span class="comment">    预解析</span></span><br><span class="line"><span class="comment">    = var num</span></span><br><span class="line"><span class="comment">      - 告诉浏览器我定义了一个变量叫做num，但是没有赋值</span></span><br><span class="line"><span class="comment">    = function num()&#123;&#125;</span></span><br><span class="line"><span class="comment">      - 告诉浏览器，我定义了一个变量叫num，里面放的是头等公民--函数</span></span><br><span class="line"><span class="comment">    = 预解析结束</span></span><br><span class="line"><span class="comment">      - num里面放的是函数</span></span><br><span class="line"><span class="comment">    执行代码</span></span><br><span class="line"><span class="comment">      1 num()</span></span><br><span class="line"><span class="comment">        - 拿到num内的值，当作函数调用</span></span><br><span class="line"><span class="comment">        - 因为预解析，所以正常调用</span></span><br><span class="line"><span class="comment">      2 num=100</span></span><br><span class="line"><span class="comment">        - 把变量num内的值，我不管你之前里面是什么，现在是100</span></span><br><span class="line"><span class="comment">        - 从此以后，num里面就是100</span></span><br><span class="line"><span class="comment">      3 num()</span></span><br><span class="line"><span class="comment">        - 拿到num内的值，当作函数调用</span></span><br><span class="line"><span class="comment">        - 但是num里面已经是数字100而不是函数</span></span><br><span class="line"><span class="comment">        - 报错</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>面试题</p>
<blockquote>
<p>链式赋值会从右往左解析，例如下题就是先将10赋值给b，然后再将b的值赋值给a</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (b = <span class="number">10</span>);</span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b; <span class="comment">//报错</span></span><br><span class="line"><span class="comment">//拿到b保存的值赋值给a</span></span><br><span class="line"><span class="comment">//访问b</span></span><br><span class="line"><span class="comment">//自己没有 全局也没有</span></span><br><span class="line"><span class="comment">//访问一个全局都不存在的变量 报错</span></span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记03-js条件语句，switch语句，循环语句</title>
    <url>/2022/04/28/b06%20javascript%E5%85%A5%E9%97%A803/</url>
    <content><![CDATA[<h2 id="js条件语句，switch语句，循环语句"><a href="#js条件语句，switch语句，循环语句" class="headerlink" title="js条件语句，switch语句，循环语句"></a>js条件语句，switch语句，循环语句<span id="more"></span></h2><h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><p>我们可以用if来设置在条件为true的时候执行的代码，else则是在条件为false时执行的代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;function1()&quot;</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        p标签里原来要有一点文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">function1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> x =<span class="string">&quot;&quot;</span> ;<span class="comment">//注意给x一个空的值的表达</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (time&lt;=<span class="number">20</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                x = <span class="string">&quot;还不起来上班！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                x = <span class="string">&quot;狗都比你起的早！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>).<span class="property">innerHTML</span>=x;<span class="comment">//注意驼峰命名</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="if…elseif-else语句"><a href="#if…elseif-else语句" class="headerlink" title="if…elseif..else语句"></a>if…elseif..else语句</h3><p>其实就是在中间再插入了一个条件为true时执行的代码块</p>
<p>例子：根据不同的时间产生亲切的问候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">function1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> x =<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>();</span><br><span class="line">        <span class="keyword">if</span> (time&lt;<span class="number">10</span>)&#123;</span><br><span class="line">            x = <span class="string">&quot;还不起来上班！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(time&gt;=<span class="number">10</span> &amp;&amp; time&lt;<span class="number">20</span>)&#123;</span><br><span class="line">            x =<span class="string">&quot;上班别摸鱼！&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x = <span class="string">&quot;狗都比你起的早！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>).<span class="property">innerHTML</span>=x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>用switch语句来基于不同的条件来执行不同的动作</p>
<p>工作原理：首先设置表达式 <em>n</em>（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 <strong>break</strong> 来阻止代码自动地向下一个 case 运行。</p>
<p>另外，我们还可以用<strong>default</strong>来设置当数据不匹配时返回的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>();</span><br><span class="line">    <span class="keyword">switch</span>(d)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:d=<span class="string">&quot;今天是星期日&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:d=<span class="string">&quot;今天是星期一&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:d=<span class="string">&quot;今天是星期二&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:d=<span class="string">&quot;今天是星期三&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:d=<span class="string">&quot;今天是疯狂星期四&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:d=<span class="string">&quot;今天是星期五&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:d=<span class="string">&quot;今天周六&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>用for循环可以很方便的将函数执行多次</p>
<p>for 循环是您在希望创建循环时常会用到的工具。</p>
<p>下面是 for 循环的语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (*语句 1*; *语句 2*; *语句 3*)</span><br><span class="line">&#123;</span><br><span class="line">  *被执行的代码块*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语句 1</strong> （代码块）开始前执行</p>
<p><strong>语句 2</strong> 定义运行循环（代码块）的条件</p>
<p><strong>语句 3</strong> 在循环（代码块）已被执行之后执行</p>
<p>例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;function1()&quot;</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        p标签里原来要有一点文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">function1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> x = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                x=x+<span class="string">&quot;该数字为&quot;</span>+i+<span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>).<span class="property">innerHTML</span>=x;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>语句123都可以省略不写，但是要保留分号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    car=[<span class="string">&quot;toyota&quot;</span>,<span class="string">&quot;honda&quot;</span>,<span class="string">&quot;lexus&quot;</span>,<span class="string">&quot;bmw&quot;</span>,<span class="string">&quot;benz&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i= <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    l= car.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(;i&lt;l;)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(car[i]+<span class="string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            i++</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="for-x2F-in-循环"><a href="#for-x2F-in-循环" class="headerlink" title="for&#x2F;in 循环"></a>for&#x2F;in 循环</h3><p>in循环会遍历对象的属性：这里先做了解，后面会有详细的学习</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击下面的按钮，循环遍历对象 &quot;person&quot; 的属性。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> x</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> txt=<span class="string">&quot;&quot;</span><span class="comment">//这里写这一行的顺序是给txt变量确定数据类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> person = &#123;<span class="attr">age</span>:<span class="number">56</span>,<span class="attr">name</span>:<span class="string">&quot;bill&quot;</span>,<span class="attr">lastname</span>:<span class="string">&quot;yes&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(x <span class="keyword">in</span> person)&#123;</span></span><br><span class="line"><span class="language-javascript">            txt=txt+person[x]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=txt;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环有点类似上面的for循环</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(x&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        y=<span class="string">&quot;现在显示的数字为&quot;</span>+x;</span></span><br><span class="line"><span class="language-javascript">        x++</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>while循环还有一个变体，do while循环</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x=<span class="string">&quot;&quot;</span>;<span class="keyword">let</span> y=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">do</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        y=<span class="string">&quot;现在x的数字是&quot;</span>+x</span></span><br><span class="line"><span class="language-javascript">        x++ <span class="comment">//不要忘记加x++，不然会进入死循环</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(x&lt;<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>不要忘记添加循环中所用变量的值，否则循环将不会结束</strong>！</p>
<p>补充案例：如何在white循环里套if条件语句</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> sum= <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(x&lt;=<span class="number">100</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(x%<span class="number">2</span>===<span class="number">0</span>)&#123;<span class="comment">//判断x是奇数还是偶数</span></span></span><br><span class="line"><span class="language-javascript">            sum=sum+x <span class="comment">//求x=1-100的总和</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        x++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上的案例首先判断x是否为偶数，只有偶数才累加进循环里</p>
<h3 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h3><ul>
<li>break语句可以跳出循环，continue效果是跳过循环中的一个迭代</li>
<li>break语句使用后，还会执行其后的代码（如有），而continue如果后面还有代码则不会执行.</li>
<li>形象的举例，break就是我要吃五个包子，在吃到第三个的时候有虫，于是剩下的都不吃看，continue是跳过有虫的第三个，继续吃第四个第五个。</li>
</ul>
<p>continue实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">    x=x + <span class="string">&quot;The number is &quot;</span> + i + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在for里面，在i&#x3D;3时，后面的函数会被跳过，不会输出结果。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 笔记01-初认识</title>
    <url>/2022/04/27/b04%20javascript%E5%85%A5%E9%97%A801/</url>
    <content><![CDATA[<p>本系列文章是参考<a href="https://www.runoob.com/js/js-tutorial.html">JavaScript 教程 | 菜鸟教程 (runoob.com)</a>自学，以及结合课堂学习的一些个人笔记</p>
<span id="more"></span>

<h3 id="js的常用规范"><a href="#js的常用规范" class="headerlink" title="js的常用规范"></a>js的常用规范</h3><p>js一般使用驼峰命名法命名</p>
<h4 id="小驼峰法"><a href="#小驼峰法" class="headerlink" title="小驼峰法"></a>小驼峰法</h4><p>变量一般用小驼峰法标识。驼峰法的意思是：除第一个单词之外，其他单词首字母大写。譬如</p>
<p>int myStudentCount;</p>
<p>变量myStudentCount第一个单词是全部<a href="https://baike.baidu.com/item/%E5%B0%8F%E5%86%99/1769537?fromModule=lemma_inlink">小写</a>，后面的单词首字母大写。</p>
<p>常用于函数名。</p>
<h4 id="大驼峰法"><a href="#大驼峰法" class="headerlink" title="大驼峰法"></a>大驼峰法</h4><p>相比小<a href="https://baike.baidu.com/item/%E9%A9%BC%E5%B3%B0/18011182?fromModule=lemma_inlink">驼峰</a>法，大驼峰法（即<a href="https://baike.baidu.com/item/%E5%B8%95%E6%96%AF%E5%8D%A1%E5%91%BD%E5%90%8D%E6%B3%95/9464494?fromModule=lemma_inlink">帕斯卡命名法</a>）把第一个单词的首字母也大写了。常用于类名，属性，<a href="https://baike.baidu.com/item/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/2887476?fromModule=lemma_inlink">命名空间</a>等。譬如</p>
<p>public class DataBaseUser;</p>
<h2 id="js的输出方式"><a href="#js的输出方式" class="headerlink" title="js的输出方式"></a>js的输出方式</h2><p>js本身没有任何可打印的函数，但是我们可以用几种命令将js运行的结果反应在控制台中或者html中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用js输出</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>()</span><br><span class="line"><span class="comment">// 弹窗提醒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line"><span class="comment">// 打印log到控制台</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="comment">// 直接写进HTML里</span></span><br><span class="line">innerhtml</span><br><span class="line"><span class="comment">// 常常配和id选择特定的html标签</span></span><br></pre></td></tr></table></figure>
<p>另外，还有一种方式用于操纵html元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>() </span><br></pre></td></tr></table></figure>

<p>这种方式需要html里的标签使用<code>id=&quot;&quot;</code></p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        p标签里原来要有一点文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>).<span class="property">innerHTML</span> =<span class="string">&quot;页面已修改&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//document.getElementById(&quot;demo&quot;) 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//innerHTML = &quot;段落已修改。&quot; 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 同样的代码，只是大小写不同，运行后只能显示正确的那个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">date</span>());</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注意js有大小写敏感，要注意大小写！</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//js同样可以直接将一个值写进html中</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上个例子的script标签放在<strong>body的底部</strong>，这和html的加载顺序有关，要注意代码规范！</p>
<h3 id="打印到控制台"><a href="#打印到控制台" class="headerlink" title="打印到控制台"></a>打印到控制台</h3><p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure>

<p>我向控制台输出了Date（）的值，在浏览器开f12可以看到</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230327154300419.png" alt="image-20230327154300419"></p>
<h2 id="js语法、语句"><a href="#js语法、语句" class="headerlink" title="js语法、语句"></a>js语法、语句</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>​		字面量，即文本，分为：</p>
<ul>
<li><p><strong>数字字面量</strong>（123这类数字），如果其中有使用运算符，即成为表达式字面量</p>
</li>
<li><p><strong>字符串字面量</strong>（“123”、“一二三”、’123’这类用单引号或者双引号括起来的文本或者数字，叫字符串</p>
</li>
<li><p>数组字面量，[1,2,3,4,5,6],</p>
</li>
<li><p>对象(object)字面量<code>&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</code></p>
</li>
<li><p>函数字面量，即定义函数·<code>function myFunction(a, b) &#123; return a * b;&#125;</code>js的数据类型</p>
</li>
</ul>
<p>在 2015 年以前，我们使用 var 关键字来声明 JavaScript 变量。</p>
<p>在 2015 后的 JavaScript 版本 (ES6) 允许我们使用 const 关键字来定义一个常量，使用 let 关键字定义的限定范围内作用域的变量。</p>
<p>更多 const 和 let 内容可以参阅：<a href="https://www.runoob.com/js/js-let-const.html">JavaScript let 和 const。</a></p>
<p>Safari 10 和 Edge 14 是第一批支持 ES6 所有特性的浏览器：</p>
<p>可以通过<code>var</code>或者<code>let</code>来创建一个新的变量，给变量复制</p>
<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">16</span>;                                  <span class="comment">// Number 通过数字字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> points = x * <span class="number">10</span>;                              <span class="comment">// Number 通过表达式字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Johnson&quot;</span>;                         <span class="comment">// String 通过字符串字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];              <span class="comment">// Array  通过数组字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>&#125;;  <span class="comment">// Object 通过对象字面量赋值</span></span><br></pre></td></tr></table></figure>

<p>数据类型是一个重要的概念，“123”和123的数据类型完全不同</p>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>浏览器将会按顺序执行js语句</p>
<p>js的规范比较类似之前的html和css，</p>
<ul>
<li>用<code>；</code>结尾</li>
<li>可以用<code>&#123;&#125;</code>来将不同的js语句结合在一起</li>
<li>使用<code>\</code>反斜杠对代码进行折行</li>
<li>使用<code>//</code>添加单行注释</li>
<li>使用<code>/* */</code>添加多行注释</li>
</ul>
<h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h3><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p>
<p><strong>引用数据类型（对象类型）</strong>：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。</p>
<p>关于各个类型的详细定义，请到<a href="https://www.runoob.com/js/js-datatypes.html">JavaScript 数据类型 | 菜鸟教程 (runoob.com)</a>查看。</p>
<p>js拥有动态类型，即给一个对象可以赋多次不同类型的值，会覆盖前一次的赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;               <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;           <span class="comment">// 现在 x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>;      <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>

<p>可以用<code>typeof</code>命令查询当前对象的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;John&quot;</span>                <span class="comment">// 返回 string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>                  <span class="comment">// 返回 number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>                 <span class="comment">// 返回 boolean</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]             <span class="comment">// 返回 object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>:<span class="number">34</span>&#125; <span class="comment">// 返回 object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是我们对一个物体进行描述</p>
<p>真实生活中，一辆汽车是一个对象。</p>
<p>对象有它的属性，如重量和颜色等，方法有启动停止等:</p>
<p><img src="https://img-1317399392.cos.ap-guangzhou.myqcloud.com/img/image-20230327163741115.png" alt="汽车模型"></p>
<p>对象的定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>在定义对象的时候要注意里面的<strong>数据类型</strong></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</strong>汽车是否可以批量生产？因为对象已经定义好了（设计图已经设计好了），接下来只等重复调用（生产）即可</p>
<p>函数练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        p标签里原来要有一点文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;welcome(&#x27;ricky&#x27;,&#x27;driver&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 点击这个按钮的时候会向welcome这个函数返回两个值 --&gt;</span></span><br><span class="line">        点我试试</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">50</span>,<span class="attr">name</span>:<span class="string">&quot;joe&quot;</span>,<span class="attr">lastname</span>:<span class="string">&quot;trump&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            fullname : <span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;&quot;</span>+<span class="variable language_">this</span>.<span class="property">lastname</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>).<span class="property">innerHTML</span> = person.<span class="title function_">fullname</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//注意：引用函数的时候我在fullname后面加了一对括号，才会返回函数的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>).<span class="property">innerHTML</span> = person.<span class="property">fullname</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//如果我这里不加括号的话，则会直接返回fullname : function()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">welcome</span>(<span class="params">name,job</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;welcome&quot;</span>+name+<span class="string">&quot;the&quot;</span>+job);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意练习里面的注释，加括号表示是返回对象的”方法”，联想一下汽车的图，汽车的方法是？加油门，刹车等</p>
</li>
<li><p>函数可以调用参数，如上面代码框的welcome函数，可以在调用的时候给其赋值，返回不同的结果。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 20 音视频标签以及常见布局</title>
    <url>/2021/04/21/19%20%E9%9F%B3%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE%E5%92%8C%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="音频和视频标签"><a href="#音频和视频标签" class="headerlink" title="音频和视频标签"></a>音频和视频标签</h2><span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 音频标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- controls 控制面板 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- autoplay 自动播放 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- muted 静音 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;../yhbk.mp3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> audioElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;audio&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  audioElement.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视频标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../fcrs.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="流体布局"><a href="#流体布局" class="headerlink" title="流体布局"></a>流体布局</h2><ul>
<li>流式布局:在对布局没有进行任何更改之前，在页面上显示“块”“内联”元素的方式</li>
<li>流体布局: 按照屏幕宽度自适应平铺排列，并在换行的时候左对齐。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--itemWidth</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="built_in">var</span>(--itemWidth);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一栏布局"><a href="#一栏布局" class="headerlink" title="一栏布局"></a>一栏布局</h2><p><img src="/assets/2023-03-21-10-36-16.png" alt="2023-03-21-10-36-16.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一栏布局-通栏"><a href="#一栏布局-通栏" class="headerlink" title="一栏布局(通栏)"></a>一栏布局(通栏)</h2><p><img src="/assets/2023-03-21-10-36-36.png" alt="2023-03-21-10-36-36.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="两列的自适应布局"><a href="#两列的自适应布局" class="headerlink" title="两列的自适应布局"></a>两列的自适应布局</h2><p>一列宽度固定，另外一列撑满剩余宽度</p>
<h2 id="三列"><a href="#三列" class="headerlink" title="三列"></a>三列</h2><p>中间撑满，两边宽度固定</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 19 移动端适配</title>
    <url>/2021/04/20/18%20%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h2 id="什么是移动端适配？"><a href="#什么是移动端适配？" class="headerlink" title="什么是移动端适配？"></a>什么是移动端适配？</h2><ul>
<li>移动端开发目前主要包括三类<ul>
<li>原生 App 开发(ios android RN uniapp flutter)</li>
<li>小程序(原生小程序 uniapp taro)</li>
<li>web 页面</li>
</ul>
</li>
<li>因为目前移动端的设备非常多，所以需要对其进行一些适配</li>
<li>两个概念<ul>
<li>自适应:根据不同设备的屏幕大小来自动调整尺寸、大小</li>
<li>响应式:会随着屏幕的实时变动而自动调整，是一种自适应<span id="more"></span></li>
</ul>
</li>
</ul>
<h2 id="认识视口"><a href="#认识视口" class="headerlink" title="认识视口"></a>认识视口</h2><p>视口的概念：</p>
<ul>
<li>在一个浏览器中，<strong>我们可以看到的区域就是视口</strong></li>
<li>fixed 是相对于视口来进行定位的</li>
<li>在 pc 端中，我们<strong>不需要对视口进行区分</strong>，因为我们的<strong>布局视口和视觉视口是同一个</strong></li>
</ul>
<p>在移动端视口的情况不太一样，</p>
<ul>
<li>因为手机的<strong>屏幕往往比较小</strong>，我们可能会希望一个大的网页在移动端可以<strong>完整的显示</strong></li>
<li>在默认情况下，<strong>移动端的布局视口是大于视觉视口</strong></li>
</ul>
<p>在移动端，视口划分为三种情况</p>
<ul>
<li>布局视口(layout viewport)<ul>
<li>默认情况下，一个 pc 的网页在移动端是如何展示？</li>
<li>第一：按照宽度为 980px 来布局</li>
<li>第二：为了显示完整的网页，它会对整个页面进行缩小</li>
</ul>
</li>
<li>视觉视口(visual viewport)<ul>
<li>默认情况下，按照 980px 来显示内容，右侧会有区域看不到，所以手机端的浏览器会缩放到能够完整显示</li>
<li>那显示在可见区域的这个视口就是视觉视口</li>
</ul>
</li>
<li>理想视口(ideal viewport)<ul>
<li>默认情况下的 layout viewport 980px 并不适合我们布局</li>
<li>我们可以对 viewport 进行设置，以满足在正常的移动端窗口布局</li>
<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,user-scalable=no,minimum-scale=1.0,maximum-scale=1.0&quot; /&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><blockquote>
<p>理解移动端适配</p>
</blockquote>
<p>100<em>100 的盒子<br>375px -&gt; 100</em>100<br>320px -&gt;90<em>90<br>414px -&gt;110</em>110<br>其他的尺寸也如此 比如 padding margin border left font-size…</p>
<ol>
<li>百分比 ❌</li>
<li>rem+动态 font-size ✅</li>
<li>vw ✅✅✅</li>
</ol>
<h2 id="rem-动态的-html-的-font-size"><a href="#rem-动态的-html-的-font-size" class="headerlink" title="rem+动态的 html 的 font-size"></a>rem+动态的 html 的 font-size</h2><p>动态 font-size</p>
<ol>
<li>媒体查询<ol>
<li>需要针对不同的屏幕编写大量的媒体查询</li>
<li>如果动态改变尺寸，不会实时更新</li>
</ol>
</li>
<li>手写 js 设置<ol>
<li>根据 html 的宽度计算出 font-size 大小然后设置到 html 上</li>
<li>监听页面宽度变化，并重新设置 font-size</li>
</ol>
</li>
<li>利用 lib-flexible</li>
</ol>
<h2 id="rem-的单位换算"><a href="#rem-的单位换算" class="headerlink" title="rem 的单位换算"></a>rem 的单位换算</h2><ol>
<li>手动计算</li>
<li>scss 函数</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> pxToRem(<span class="variable">$px</span>, <span class="variable">$baseFs</span>: <span class="number">37.5px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> (<span class="variable">$px</span>/<span class="variable">$baseFs</span>) * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">pxToRem</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>插件<br>px to rem &amp; px to vw</li>
</ol>
<h2 id="适配方案-vw"><a href="#适配方案-vw" class="headerlink" title="适配方案 vw"></a>适配方案 vw</h2><p>vw 相比 rem 有很多优势</p>
<ol>
<li>不需要去计算 html 的 font-size 大小，也不需要去设置这样一个字体大小</li>
<li>不会因为设置了 html 的 font-size 而还需要单独设置 body 的 font-size</li>
<li>不依赖于 font-size 属性，所以不用担心 html 的 font-size 被改掉而导致页面混乱</li>
<li>vw 相比 rem 更加语义化，1vw 刚好是 1&#x2F;100 viewport 大小</li>
<li>可以同时具有之前 rem 的所有优点</li>
</ol>
<p>vw 的换算</p>
<ol>
<li>手动</li>
<li>scss 函数</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> px2Vw(<span class="variable">$px</span>, <span class="variable">$baseRatio</span>: <span class="number">3.75px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> (<span class="variable">$px</span>/<span class="variable">$baseRatio</span>) * <span class="number">1vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">px2Vw</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>插件</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 01 md基本语法</title>
    <url>/2021/03/20/00%20md%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><p>这个系列的文章是将我在学生时期学习的一些笔记上传留作纪念和备份，如果能帮助到一些新手朋友那就更好了。</p>
</li>
<li><p>如果笔记有误或者有更多建议，欢迎在评论区指出！</p>
<span id="more"></span></li>
</ul>
<h1 id="代表一级标题"><a href="#代表一级标题" class="headerlink" title="#代表一级标题"></a>#代表一级标题</h1><h2 id="代表二级"><a href="#代表二级" class="headerlink" title="代表二级"></a>代表二级</h2><h3 id="三级，一共有六级标题"><a href="#三级，一共有六级标题" class="headerlink" title="三级，一共有六级标题"></a>三级，一共有六级标题</h3><p>字体<br><strong>两个星号包裹的文字会加粗</strong><br><em>一个星号或者两边下划线包裹的文字会倾斜</em><br><em>这里也是倾斜</em><br><em><strong>斜体加粗</strong></em><br><del>英文波浪线删除</del></p>
<blockquote>
<p>用大于号</p>
<blockquote>
<p>引用的内容可以嵌套引用</p>
</blockquote>
</blockquote>
<hr>
<p>三个—代表分割线<br><img src="/img.jpg"><br>超链接<br><a href="http://www.baidu.com/">百度</a></p>
<p>列表</p>
<p>无序列表</p>
<ul>
<li>列表1</li>
<li>列表2</li>
</ul>
<p>有序列表</p>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
</ol>
<h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><p>单行代码<br><code>hello wolrd</code></p>
<p>多行代码框</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 04 css介绍</title>
    <url>/2021/03/20/03%20css%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="css"><a href="#css" class="headerlink" title="css"></a><strong>css</strong></h1><span id="more"></span>

<p>层叠样式表<br>美化网页</p>
<h3 id="语言特点"><a href="#语言特点" class="headerlink" title="语言特点"></a>语言特点</h3><p>从上往下执行，同名覆盖<br>三大特性: <strong>继承性，优先级，层叠性</strong></p>
<ul>
<li>结构与表现分离(html 只负责结构,使得页面更加的简洁)</li>
<li>减少开发的工作量(子元素可以继承父元素的样式，减少了重复的代码)</li>
<li>提高了页面的浏览速度</li>
<li>易于升级</li>
</ul>
<h3 id="厂商前缀"><a href="#厂商前缀" class="headerlink" title="厂商前缀"></a>厂商前缀</h3><p>浏览器厂商通过<strong>厂商前缀</strong>来标记试验性的功能或者属于该厂商的浏览器专属属性<br>Chrome -webkit-<br>Opera -o-<br>IE -ms-<br>FireFox -moz-</p>
<h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ol>
<li>行内(内联)样式<br><code>&lt;header style=&quot;font-size: 12px&quot;&gt;&lt;/header&gt;</code></li>
<li>页内<br>直接在 html 的头部中<code>style</code>进行设置</li>
<li>页外<br>在头部 通过<code> &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</code>引入</li>
</ol>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h3 id="1-元素选择器"><a href="#1-元素选择器" class="headerlink" title="1. 元素选择器"></a>1. 元素选择器</h3><p>通过一个简单的<strong>元素选择器</strong>，就能大范围的将所有该元素的样式进行统一的修改</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-群组选择器"><a href="#2-群组选择器" class="headerlink" title="2.群组选择器"></a>2.群组选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-通配符选择器"><a href="#3-通配符选择器" class="headerlink" title="3.通配符选择器"></a>3.通配符选择器</h3><p>通配符选择器,能匹配到所有元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面中所有的字体颜色都会变成红色</p>
<h3 id="4-类-和-id-选择器"><a href="#4-类-和-id-选择器" class="headerlink" title="4. 类 和 id 选择器"></a>4. 类 和 id 选择器</h3><p>类选择器<br>通过 class 属性添加，css 的样式是通过<code>.</code>+<code>类名</code>去选择到对应类名的标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alex</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>id 选择器<br>通过 id 属性添加，css 的样式是通过<code>#</code>+<code>id 名</code>来选择到对应的标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#alex</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-权重问题"><a href="#5-权重问题" class="headerlink" title="5.权重问题"></a>5.权重问题</h3><p>!important 无限大权重<br>行内样式 优先级 1000<br>id 选择器 0100<br>类选择器 0010<br>元素选择器 0001<br>通配符选择器 0000</p>
<h3 id="6-关系选择器"><a href="#6-关系选择器" class="headerlink" title="6.关系选择器"></a>6.关系选择器</h3><p>关系选择器，是根据文档的结构来进行选择。</p>
<h4 id="同时选择两个元素"><a href="#同时选择两个元素" class="headerlink" title="同时选择两个元素"></a>同时选择两个元素</h4><p>用逗号隔开，可以同时选中两个元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>祖先元素 <code>space</code> 后代元素<br>用<strong>空格</strong>隔开</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><p>使用<code>&gt;</code>分隔,来选择某个子代的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &gt; span &#123;</span><br><span class="line">  font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    1 号 span，在 div 中。</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2 号 span，在 div 中的 span 中。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>3 号 span，不在 div 中。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">/* 此时，只有div下的1号span，才会将字体大小变成100px */</span><br></pre></td></tr></table></figure>

<h4 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h4><p>使用<code>+</code>来分隔，选择与该元素相邻的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> + <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>alex老师非常努力<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>经过多年的摸爬滚打<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>终于在社会阶级上<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>往下掉到了底层<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时只有内容为‘经过多年的摸爬滚打’的 span 标签字体颜色有变化，其他的 span 标签字体颜色则没有变化</p>
<h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><p><code>~</code>来分隔，选择与该元素同级的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复杂选择器"><a href="#复杂选择器" class="headerlink" title="复杂选择器"></a>复杂选择器</h2><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪类选择器大致分两种,一种是<strong>结构类的伪类选择器</strong>，另外一种是<strong>与用户界面相关的伪类选择器</strong></p>
<h4 id="a-标签的"><a href="#a-标签的" class="headerlink" title="a 标签的"></a>a 标签的</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 链接未被访问时字体的颜色 默认蓝色*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 链接被访问过 默认紫色 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标悬停时 默认是pointer*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* cursor: none; */</span></span><br><span class="line">  <span class="comment">/* 文字装饰属性 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 点击 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意<code>a</code>设置伪类的状态时，必须遵循一定的顺序<br><code>:link</code>&gt;<code>:visited</code>&gt;<code>:hover</code>&gt;<code>active</code></p>
</blockquote>
<h4 id="input-相关的"><a href="#input-相关的" class="headerlink" title="input 相关的"></a>input 相关的</h4><p>单选、复选框用<code>appearance: none;</code>来取消默认的样式比较合适。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 获取焦点 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.username</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 外轮廓  solid单实线 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline</span>: <span class="number">5px</span> solid pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.password</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 背景色 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.checkbox</span><span class="selector-pseudo">:checked</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 清除单选/多选框的默认样式 */</span></span></span><br><span class="line"><span class="language-css">    appearance: none;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 边框 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.radio</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">    appearance: none;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 边框 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="匹配任意顺序的元素"><a href="#匹配任意顺序的元素" class="headerlink" title="匹配任意顺序的元素"></a>匹配任意顺序的元素</h4><p>掌握<code>child</code>和<code>type</code>的应用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">      p是父元素的第一个子元素，上面的代码会导致第一个p标签的字体颜色发生改变</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      当我们将p改为span后，并没有出现我们想要的效果-div中第一个span标签字体颜色改变</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      因为span并不是div的第一个子元素(first-child) 所以样式 没有生效</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      last-child</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-of-type &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* div中第一个类型为span标签的字体设置为蓝色 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* div中最后一个p标签 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">p</span><span class="selector-pseudo">:last-of-type</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* ul下的 第三个 li标签 */</span></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* ul li:nth-child(3) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-size: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125; */</span></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 偶数 odd*/</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 奇数 even*/</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> 我是 span 标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> 我是 span 标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> 我是 span 标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> 我是 span 标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> 我是 span 标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第5个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第6个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第7个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第8个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><code>标签名[属性]&#123;样式&#125;</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中type属性为text的input框 设置背景色为红色 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>首字母，首行，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 首字母 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 字体大小除了可以设置像素值以外 还可以用百分比 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 首行 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">      不管有多少个字/词语，只要在首行，样式就会生效</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Today is hot<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前置，后置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 前置内容元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27;[[&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: silver;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 后置内容元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27;&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式重置"><a href="#样式重置" class="headerlink" title="样式重置"></a>样式重置</h3><p>做练习&#x2F;平常写作业，直接使用如下重置方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="comment">/* 清除列表 前面的序号/圆点 */</span></span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重置样式表<br><a href="https://meyerweb.com/eric/tools/css/reset/">重置样式表</a><br>往往命名为<code>_reset.css</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 03 表单、表格</title>
    <url>/2021/03/20/02%20%E8%A1%A8%E5%8D%95%E3%80%81%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><span id="more"></span>

<h3 id="表单的基本结构"><a href="#表单的基本结构" class="headerlink" title="表单的基本结构"></a>表单的基本结构</h3><p>一个可以和后台进行数据交互的表单,至少要包含<strong>form 标签</strong>，输入框，提交按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 密码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 提交 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="form-元素特有的属性"><a href="#form-元素特有的属性" class="headerlink" title="form 元素特有的属性"></a>form 元素特有的属性</h3><h4 id="action-属性"><a href="#action-属性" class="headerlink" title="action 属性"></a>action 属性</h4><p>action 用于设置将数据发送给谁，表单的数据提交目标</p>
<h4 id="method-属性"><a href="#method-属性" class="headerlink" title="method 属性"></a>method 属性</h4><ul>
<li>get 明文发送(数据通过地址栏传递)</li>
<li>post 暗文发送数据(数据不通过地址栏发送)</li>
</ul>
<h3 id="input-元素"><a href="#input-元素" class="headerlink" title="input 元素"></a>input 元素</h3><p>input 元素的表现形式是由该元素的 type 值来决定的</p>
<ul>
<li>type:确定 input 展示为那种类型的输入框</li>
<li>name:规定 input 元素的名称，提交表单的时候 name 作为数据一起提交</li>
<li>value:input 的值，如果填写的话就作为 input 的默认值</li>
<li>readonly:只读，用户不能修改</li>
<li><strong>required:设置为必填项，提交表单时，该内容绝对不能为空</strong></li>
<li><strong>placeholder:当内容为空时，展示的提示信息</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 文本框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;alex&quot;</span> <span class="attr">readonly</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 密码框 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- input[type=&quot;password&quot;] --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的密码，注意保密&quot;</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 数字输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">&quot;10&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单选框 要想实现当选必须有相同的name属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span>女</span><br><span class="line">  <span class="comment">&lt;!-- 多选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span> /&gt;</span>吃饭</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> /&gt;</span>睡觉</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;steam&quot;</span> /&gt;</span>学英语</span><br><span class="line">  <span class="comment">&lt;!-- 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 重置按钮 清空表单内的所有用户输入的数据，恢复到默认状态--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 按钮 需要程序员通过js来定义对应的操作--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- label标签,点击文字也能选中 提升用户体验 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单选框 要想实现当选必须有相同的name属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span>女</span><br><span class="line">  <span class="comment">&lt;!-- 多选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span> /&gt;</span>吃饭 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> /&gt;</span>睡觉</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;steam&quot;</span> /&gt;</span>学英语</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- selected表示默认情况下选中的元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4399&quot;</span>&gt;</span>4399小游戏<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;7k7k&quot;</span> <span class="attr">selected</span>&gt;</span>7k7k小游戏<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给下拉框分组</span></span><br><span class="line"><span class="comment">        optgroup=option group</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;flash&quot;</span>&gt;</span>4399<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fps&quot;</span>&gt;</span>csgo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;moba&quot;</span>&gt;</span>dota<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;吃饭&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;goodEat&quot;</span>&gt;</span>美餐乐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;m&quot;</span>&gt;</span>金拱门<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;w&quot;</span>&gt;</span>喷射战士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p>文本域可以通过css定义宽高，注意<strong>不要漏了form标签</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        cols和rows</span></span><br><span class="line"><span class="comment">        column列</span></span><br><span class="line"><span class="comment">        row行</span></span><br><span class="line"><span class="comment">        并不是限制文本域内文字内容的行列数</span></span><br><span class="line"><span class="comment">        而且控制文本域的宽高</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>一般实际开发除特殊场合外，不推荐用表格来搭建页面结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span></span><br><span class="line">    表格标题</span><br><span class="line">  <span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tr*2&gt;td&#123;$&#125;*3 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>table 一个表格</li>
<li>caption 表格标题 加粗居中</li>
<li>thead 表格的头部区域</li>
<li>tbody 表格的主体区域</li>
<li>tfoot 表格的底部区域</li>
<li>tr 表格的行</li>
<li>th 表格的表头单元格 加粗</li>
<li>td 表格的单元格 一般是 tbody&#x2F;tfoot 中 tr 的子元素</li>
</ul>
<h3 id="表格的嵌套规则"><a href="#表格的嵌套规则" class="headerlink" title="表格的嵌套规则"></a>表格的嵌套规则</h3><p><code>table</code>元素下 只能直接包含 <code>caption,thead,tbody,tfoot</code></p>
<blockquote>
<p>实际尝试后，可以直接用td、tr搭建页面结构，但是这种方法不规范</p>
</blockquote>
<p><code>thead,tbody,tfoot</code>下可以直接包含<code>tr</code></p>
<p><code>tr</code>下可以包含的是<code>td</code></p>
<h3 id="表格的单元格合并-important"><a href="#表格的单元格合并-important" class="headerlink" title="表格的单元格合并!important"></a>表格的单元格合并!important</h3><blockquote>
<p>单元格的合并不是<strong>吞并</strong>而是扩大,每次合并单元格后，记得删除多余的那个</p>
</blockquote>
<p>rowspan 行合并 下一个 tr 中同样位置的第 n 个<br>colspan 列合并 同个 tr 中根据 n 来决定</p>
<h3 id="表格相关的一些问题"><a href="#表格相关的一些问题" class="headerlink" title="表格相关的一些问题"></a>表格相关的一些问题</h3><ol>
<li>caption 是否必须<br>标题标签不是必须的，对于一个 table 来说，可能存在标题，也可能不存在。</li>
<li>tbody，thead，tfoot 是否必须<br>他们都是非必须书写的，对于 tbody 也可以不写，现在的主流浏览器都会自动添加 tbody，但是为了规范，最好加上</li>
<li>tbody，thead，tfoot 元素的顺序是否能改变<br>完全可以，只是不利于维护阅读。</li>
</ol>
<h2 id="表格表单练习"><a href="#表格表单练习" class="headerlink" title="表格表单练习"></a>表格表单练习</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户注册页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">bordercolor</span>=<span class="string">&quot;red&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span>男</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>听音乐 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>看电影</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>玩游戏</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 05 HTML5语义化</title>
    <url>/2021/03/20/04%20html5%20%E8%AF%AD%E4%B9%89%E5%8C%96/</url>
    <content><![CDATA[<h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><span id="more"></span>

<h3 id="1-为什么需要语义化"><a href="#1-为什么需要语义化" class="headerlink" title="1.为什么需要语义化"></a>1.为什么需要语义化</h3><ul>
<li>由于语义化的可读性，便于团队的开发和维护</li>
<li>在没有 css 的情况下，页面也能呈现出很好的内容和结构</li>
<li>搜索引擎能够更好的理解页面，可以更快更准确的搜索到信息</li>
</ul>
<h3 id="2-新增的语义元素"><a href="#2-新增的语义元素" class="headerlink" title="2.新增的语义元素"></a>2.新增的语义元素</h3><ol>
<li>header 页面头部</li>
<li>footer 页面的底部</li>
<li>main 主体部分</li>
<li>nav 导航栏</li>
<li>aside 侧边栏</li>
<li>section 节&#x2F;段</li>
<li>article 文章 论坛里的帖子 某个用户的评论</li>
</ol>
<h3 id="3-使用的注意事项"><a href="#3-使用的注意事项" class="headerlink" title="3. 使用的注意事项"></a>3. 使用的注意事项</h3><ul>
<li>没有语义的情况下，就要使用 div</li>
<li>不要为了语义而语义</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_article&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对比</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 06 css字体</title>
    <url>/2021/03/20/05%20css%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><span id="more"></span>

<h3 id="字体类的样式"><a href="#字体类的样式" class="headerlink" title="字体类的样式"></a>字体类的样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br><span class="line"><span class="comment">/* 例子 */</span></span><br><span class="line"><span class="attribute">font</span>: normal bold <span class="number">30px</span>/<span class="number">50px</span> Times;</span><br></pre></td></tr></table></figure>

<p>使用 font 属性必须按照上述顺序来书写，而且<code>font-size</code>和<code>font-family</code>是不可忽略的。<br>每个参数仅允许有一个值，忽略将会使用默认值。</p>
<p><strong>实际开发，更倾向于分开来设置字体属性</strong></p>
<h4 id="字体风格-font-style"><a href="#字体风格-font-style" class="headerlink" title="字体风格 font-style"></a>字体风格 font-style</h4><p>设置元素的字体风格(是否倾斜)</p>
<ul>
<li>默认 normal 指定字体的文本样式为正常的字体</li>
<li>italic 指定字体的文本样式为斜体 展示该字体的斜体</li>
<li>oblique 斜体 强行把字体斜着</li>
<li>inherit 继承 继承父元素的字体样式</li>
</ul>
<h4 id="字体粗细-font-weight"><a href="#字体粗细-font-weight" class="headerlink" title="字体粗细 font-weight"></a>字体粗细 font-weight</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>: normal | bold |bolder|lighter |&lt;integer&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>默认值:normal 正常字体 相当于数值 400</li>
<li>bold:粗体，相当于数值 700</li>
<li>bolder:定义比继承更重的字体</li>
<li>lighter:定义比继承更轻的字体</li>
<li>integer:用数字来表示字体的粗细，100-900</li>
<li>bolder 和 lighter 表示的字体的粗细是基于从父元素继承而来的字重计算得到的，与 normal 和 bold 所表示的字重无关</li>
</ul>
<h4 id="字体大小-font-size"><a href="#字体大小-font-size" class="headerlink" title="字体大小 font-size"></a>字体大小 font-size</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: length | % |em;</span><br></pre></td></tr></table></figure>

<ul>
<li>length 和% 是平时开发中最常用的书写方式</li>
<li>em 主要用于移动端，是相对于父元素字体大小的一个相对长度</li>
<li>网页中最小的字体:12px</li>
<li>chrome 默认字体大小:16px</li>
</ul>
<h4 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: red|<span class="number">#000</span>|<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h4 id="自定义字体类型"><a href="#自定义字体类型" class="headerlink" title="自定义字体类型"></a>自定义字体类型</h4><p><a href="https://www.fontsquirrel.com/">字体下载网站</a></p>
<p>使用方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 是为我们自己引入的字体提供一个名称 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: myFont;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../alex-brush/AlexBrush-Regular.ttf&#x27;</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: myFont;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Today is KFC Crazy Thursday<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Today is KFC Crazy Thursday<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="line-height行高"><a href="#line-height行高" class="headerlink" title="line-height行高"></a><code>line-height</code>行高</h3><p>设置当前元素中每行文本的高度</p>
<p>normal:默认，合理的行高<br>length:设置固定的，例如 30px 的行高<br>%:用百分比指定行高，基于文本的<code>font-size</code>进行计算</p>
<p>使用 line-height 时尽量不要让行高小于字体大小，这样会导致多行文本的情况下，发生上下行文字重叠的情况</p>
<p>单行文本居中:设置行高为容器高度</p>
<h3 id="文本装饰text-decoration"><a href="#文本装饰text-decoration" class="headerlink" title="文本装饰text-decoration"></a>文本装饰<code>text-decoration</code></h3><p>设置元素的文本修饰，比如下划线，上划线，删除线。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: text-decoration-line||text-decoration-style||text-decoration-color;</span><br></pre></td></tr></table></figure>

<ol>
<li>text-decoration-line<br>none 没有<br>underline 下划线<br>overline 上划线<br>line-through 贯穿线</li>
<li>text-decoration-style<br>solid 单实线<br>double 双实线<br>dotted 点划线<br>dashed 虚线<br>wavy 波浪线</li>
<li>text-decoration-color<br>设置装饰线的颜色</li>
</ol>
<p>实际开发中我们往往只需要用到第一个<br><code>text-decoration-line</code></p>
<h3 id="首行缩进-text-indent"><a href="#首行缩进-text-indent" class="headerlink" title="首行缩进 text-indent"></a>首行缩进 <code>text-indent</code></h3><p><code>text-indent: 2em;</code></p>
<blockquote>
<p>为什么<code>text-indent</code>最常用的单位是 em<br>假设当前的段落字体大小 16px，如果你希望一个段落的文字能够缩进两个字体大小，可以用<code>text-indent:32px;</code>;也可以使用<code>text-indent:2em</code>。假如后期段落字体大小调整为 14px，如果之前写的是 32，现在就需要修改为 28px，但是如果是 em 的话，就不需要任何变动.</p>
</blockquote>
<h3 id="水平文本对齐text-align-重点"><a href="#水平文本对齐text-align-重点" class="headerlink" title="水平文本对齐text-align (重点)"></a>水平文本对齐<code>text-align</code> (重点)</h3><p>设置元素中文本的水平对齐方式<br>left 左对齐<br>right 右对齐<br>center 居中对齐<br>start 内容对齐开始边界<br>end 内容对齐结束边界<br>justify 内容两端对齐 但是对于强制打断的行以及最后一行(包括 only 一行文字的情况)不会两端对齐而是遵循默认的对齐方式</p>
<h3 id="word-spacing-和-letter-spacing"><a href="#word-spacing-和-letter-spacing" class="headerlink" title="word-spacing 和 letter-spacing"></a>word-spacing 和 letter-spacing</h3><p>word-spacing 单词间隔<br>letter-spacing 字母间隔</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 下外边距 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.word_longger</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-spacing</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.word_shorter</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-spacing</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.letter_longer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">letter-spacing</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.letter_shorter</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">letter-spacing</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是正常的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;word_longger&quot;</span>&gt;</span>加大 word-spacing<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;word_shorter&quot;</span>&gt;</span>减小 word-spacing<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;letter_longer&quot;</span>&gt;</span>加大 letter-spacing<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;letter_shorter&quot;</span>&gt;</span>减小 letter-spacing<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单来说，<code>letter-spacing</code>添加的是字母(中文文字)之间的空白;<code>word-spacing</code>添加每个单词之间的空白，对中文无效</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 07 显示模式</title>
    <url>/2021/03/20/06%20%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h2><span id="more"></span>

<ol>
<li>元素的主要显示模式有哪些</li>
<li>块级元素和行内元素的特点和区别</li>
</ol>
<h3 id="显示模式-1"><a href="#显示模式-1" class="headerlink" title="显示模式"></a>显示模式</h3><p>元素的显示模式，规定了元素在页面上以<strong>什么方式</strong>显示,例如<code>p</code>标签会独占一行，而<code>span</code>却可以同行排列</p>
<p>这些元素的特性(元素的显示模式),由<code>display</code>这个属性来控制的</p>
<h4 id="显示属性-display"><a href="#显示属性-display" class="headerlink" title="显示属性 display"></a>显示属性 display</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: block;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>none 此元素不会被渲染</p>
</li>
<li><p>block 此元素会显示为块级元素，该元素前后带有换行符</p>
</li>
<li><p>inline 此元素会显示为内联元素，前后没有换行符</p>
</li>
<li><p>inline-block 此元素显示为行内块元素，同时具有行内和块级的一些特点</p>
</li>
<li><p>list-item 此元素会作为列表显示，例如<code>&lt;li&gt;</code></p>
</li>
<li><p>table 此元素会作为块级表格来展示，例如<code>&lt;table&gt;</code></p>
</li>
</ul>
<h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><ul>
<li>默认的宽高由内容撑开，与其他(非块级)元素 能够共行</li>
<li>不能设置宽高</li>
<li>外边距失效</li>
<li>内部只能嵌套行内元素</li>
</ul>
<h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul>
<li>默认独占父级的一整行，不能与其他元素共行</li>
<li>能够设置宽高和外边距</li>
<li>内部可以嵌套块级元素和行内元素</li>
</ul>
<h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><ul>
<li>可以和行内、行内块元素共行，但是会存在空白间隙</li>
<li>默认宽高由内容撑开</li>
<li>宽高和边距都能手动设置</li>
</ul>
<h4 id="display-在开发中真正的用途"><a href="#display-在开发中真正的用途" class="headerlink" title="display 在开发中真正的用途"></a>display 在开发中真正的用途</h4><p><code>none</code>,<code>inline-block</code>,<code>block</code></p>
<ul>
<li>某些特定情况下，需要更改标签的显示属性</li>
<li>在一些超链接的文本中，我们会设置<code>a</code>标签为<code>display:block;</code>，扩大或者缩小超链接的范围</li>
<li>对于图像标签，我们会设置<code>display:block;</code>,来清除空白间隙</li>
<li>在 js 制作一些网页特效的时候，会比较频繁的用到<code>display:none;</code>和<code>display:block;</code>来控制元素的显示隐藏</li>
</ul>
<h3 id="置换元素和非置换元素"><a href="#置换元素和非置换元素" class="headerlink" title="置换元素和非置换元素"></a>置换元素和非置换元素</h3><h4 id="置换元素"><a href="#置换元素" class="headerlink" title="置换元素"></a>置换元素</h4><p>css 渲染模型不会考虑对此内容进行渲染，也就是说浏览器会根据元素的标签和属性，来决定元素的具体显示内容</p>
<p>比如 img 标签，最终展示在页面上是一张图片，但是我们查看具体的源代码，看不到图片的具体信息内容<br>img input a select</p>
<h4 id="非置换元素"><a href="#非置换元素" class="headerlink" title="非置换元素"></a>非置换元素</h4><p>html 绝大多数标签都是非置换元素，内容是什么，页面就渲染什么</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 09 图形绘制以及圆角边框</title>
    <url>/2021/03/20/08%20%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E4%B8%8E%E5%9C%86%E8%A7%92%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<h2 id="图形绘制与圆角边框"><a href="#图形绘制与圆角边框" class="headerlink" title="图形绘制与圆角边框"></a>图形绘制与圆角边框</h2><span id="more"></span>

<h3 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h3><p>理解三角形如何绘制</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">100px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f30</span> <span class="number">#00f</span> <span class="number">#396</span> <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时我们会得到一个花花绿绿的图形<br>既然每个边框都能设置颜色，能不能设置成透明的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">100px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f30</span> transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到了一个等腰梯形,而且发现这个等腰梯形窄边的宽度由内容宽度来决定，当我们把盒子的宽度设置为 0 的时候，就形成了一个尖角，这样就得到了我们的三角形</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">100px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f30</span> transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三角形的宽高与 width 和 height 无关，是由边框的厚度来决定的</p>
<p>小练习</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">200px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f30</span> <span class="number">#f30</span> transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>小米 200w 图标<br>画圆，设置<code>border-radius</code>为宽高的一半或者 50%都可</p>
<p>圆角边框<br><code>border-radius:lenght|%</code></p>
<ul>
<li>一个值:4 个角的值相同</li>
<li>两个值:左上和右下；右上和左下</li>
<li>三个值:左上；右上和左下；右下</li>
<li>四个值:左上；右上；右下；左下</li>
</ul>
<p>理解圆角边框:内切圆<br>练习</p>
<p>实心上半圆</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="comment">/* 是宽度的一半 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实心左半圆</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 宽度要是高度的一半 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>圆角矩形</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="comment">/* 半径最少是高度的一半 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:h-shadow v-shadow blur     spread color inset;</span><br><span class="line">盒子阴影 ： x轴偏移量 y轴偏移量  模糊半径  阴影扩散范围  颜色  投影方式</span><br></pre></td></tr></table></figure>

<p>x 轴偏移量:正值右移动，负值左移动<br>y 轴：正值上移动，负值下移动<br>模糊半径：值越大越模糊 为 0 时 和原来的图形一样<br>阴影扩散范围：正值放大，负值缩小<br>投影方式：inset&#x2F;outset 内阴影&#x2F;外阴影</p>
<p>实际开发我们调阴影会选择<a href="https://shadows.brumm.af/">阴影</a>来加快效率</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 10 定位</title>
    <url>/2021/03/20/09%20%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><span id="more"></span>

<p>常见的布局方式：浮动，定位，弹性，(网格)。</p>
<p>多个层叠状态，会优先考虑定位布局。如：弹窗，返回顶部按钮…</p>
<p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: static|relative|absolute|fixed|sticky;</span><br></pre></td></tr></table></figure>

<p>元素可以使用顶部，底部，左侧，右侧这四个定位属性；然而这四个属性无法工作，除非你设定了 position 属性。</p>
<h3 id="static-静态定位"><a href="#static-静态定位" class="headerlink" title="static 静态定位"></a>static 静态定位</h3><p>html 元素默认值，没有定位，遵循正常文档流的现象，静态定位的元素不会收到 top,bottom,left,right 的影响。</p>
<h3 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h3><p>relative 表示，相对默认位置(static)进行你要的偏移，即相对定位的基准点是元素的默认位置(static)，遵循正常文档流</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.app</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>移动相对定位的元素，但是它原本所占的空间并不会改变<br>相对定位的元素，常常被用来作为绝对定位元素的容器</p>
<h3 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h3><p>absolute 表示，相对于最近的一个定位属性不为<code>static</code>的祖先元素，如果都没有，则一直回溯到 html 元素。脱离文档流</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.children</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>absolute定位使得元素脱离文档流，因此不占据空间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>absolute定位的元素可以和其他元素重叠<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h3><p>元素的位置相对于浏览器窗口固定<br>即使是窗口滚动它也不会动</p>
<p>fixed 使得元素脱离文档流，也不占据空间<br>fixed 元素可以和其他元素重叠</p>
<h3 id="三个特点"><a href="#三个特点" class="headerlink" title="三个特点"></a>三个特点</h3><p>absolute 和 fixed 的元素有三个特点<br>块状化，包裹性，破坏性。</p>
<h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><p>在<strong>设置的值</strong>(阈值)到达前都是 relative，到达后变成了 fixed<br>阈值，一定要设置;<code>top``bottom``left``right </code>必须有一个，才能使得粘性定位生效</p>
<p>sticky由于使用时bug多，不推荐使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.stickyCon</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.sticky</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: sticky;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;stickyCon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>123123123123123312<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;sticky&quot;</span>&gt;</span>我是粘性定位的鬼东西<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>很多个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="重叠元素的-z-index"><a href="#重叠元素的-z-index" class="headerlink" title="重叠元素的 z-index"></a>重叠元素的 z-index</h3><p>谁的 z-index 大，谁在上面</p>
<p>练习</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>钝角<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-width</span>: <span class="number">200px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-color</span>: transparent <span class="number">#f30</span> <span class="number">#f30</span> transparent;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-color</span>: transparent <span class="number">#fff</span> <span class="number">#fff</span> transparent;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定位练习 1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.black</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -<span class="number">175px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">125px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.yellow_box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yellow_box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定位练习 2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son1</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son2</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son3</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son4</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 08 盒子模型</title>
    <url>/2021/03/20/07%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><span id="more"></span>

<ol>
<li>什么是盒子模型</li>
<li>盒子模型由哪几部分构成</li>
<li>边框，边距，统一设置，单边设置的方法</li>
<li>margin 使块级元素水平居中的原理</li>
<li>标准盒模型和怪异盒模型的区别</li>
</ol>
<h3 id="什么是盒子模型"><a href="#什么是盒子模型" class="headerlink" title="什么是盒子模型"></a>什么是盒子模型</h3><p>在 html 中，每个元素在浏览器中的解析，都可以被看作一个<strong>盒子</strong>，拥有盒子一样的外形和平面空间。完整的盒子模型是由<strong>width,height</strong>（宽度和高度构成的内容区域），<strong>border(边框)</strong>,<strong>padding（内边距</strong>，<strong>margin（外边距)</strong></p>
<ul>
<li>margin 外边距 透明的</li>
<li>border 围绕在内边距和外边距的边框</li>
<li>padding 围绕在内容周围的区域 透明的</li>
<li>content 盒子的内容 显示的是文本或者图像</li>
</ul>
<h3 id="生活中的盒模型–鱼缸"><a href="#生活中的盒模型–鱼缸" class="headerlink" title="生活中的盒模型–鱼缸"></a>生活中的盒模型–鱼缸</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终的效果：<br>蓝色区域-鱼缸<br>绿色区域-泡沫<br>黑色区域-纸盒厚度<br>橙色-外部间隙</p>
<h3 id="标准盒模型和怪异盒-ie-模型"><a href="#标准盒模型和怪异盒-ie-模型" class="headerlink" title="标准盒模型和怪异盒(ie)模型"></a>标准盒模型和怪异盒(ie)模型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content-box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: content-box;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box border-box&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box content-box&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>标准盒模型中 width 指的是内容 content 的宽度；<br>标准盒模型下 盒子大小&#x3D;content+border+padding+margin</li>
<li>怪异盒模型中 width 指的是<strong>内容，边框，内边距</strong>的总宽度（content+border+padding）；<br>怪异盒模型下 盒子的大小&#x3D;width(content+border+padding)+margin</li>
</ol>
<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>css 尺寸属性允许我们控制元素的高度和宽度</p>
<p>默认情况下，元素的宽度<code>width</code>是指从 左内边界 到 右内边界 的 距离<br>当他的值为百分比时，它是相对于父元素的宽度或者高度</p>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p><code>border</code>是一个复合属性，一个边框包括边框的宽度，边框的颜色，边框的类型<br><code>border:5px solid pink;</code></p>
<h4 id="边框宽度"><a href="#边框宽度" class="headerlink" title="边框宽度"></a>边框宽度</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-width</span>: <span class="number">3px</span>｜<span class="number">3em</span>;</span><br></pre></td></tr></table></figure>

<h4 id="边框的样式"><a href="#边框的样式" class="headerlink" title="边框的样式"></a>边框的样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-style</span>: &lt;style&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>none 默认值，无边框</li>
<li>solid 单实线</li>
<li>dotted 点划线</li>
<li>dashed 虚线</li>
<li>double 双实线</li>
</ul>
<h4 id="边框的颜色"><a href="#边框的颜色" class="headerlink" title="边框的颜色"></a>边框的颜色</h4><p>边框的颜色实际上是根据字体颜色来决定的，当然也可以单独设置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: red|<span class="number">#000</span>|<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>) |<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span><br><span class="line">  |transparent透明|inherit继承;</span><br></pre></td></tr></table></figure>

<p>rbga:和 rbg 概念一样，只是多了一个 alpha 的属性值，它代表了透明度，(0~1),0 是全透明，1 是不透明</p>
<h4 id="单边框的设置"><a href="#单边框的设置" class="headerlink" title="单边框的设置"></a>单边框的设置</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-style</span>: dotted;</span><br><span class="line">  <span class="attribute">border-right-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-bottom-style</span>: double;</span><br><span class="line">  <span class="attribute">border-left-style</span>: dashed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>top 上<br>right 右<br>bottom 下<br>left 左<br>除了边框的样式<code>witdh color</code>都可以单独设置一边的</p>
<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: auto|length|percentage;</span><br></pre></td></tr></table></figure>

<ul>
<li>auto:浏览器自动计算外边距</li>
<li>length:具体单位比如 100px em…</li>
<li><code>%</code>:基于<strong>父元素宽度</strong>的百分比外边距，如果父元素没有宽度，则寻找祖辈元素的宽度，如果都没有，就会按照屏幕的宽度来作为参考对象.</li>
</ul>
<h4 id="margin-分写属性"><a href="#margin-分写属性" class="headerlink" title="margin 分写属性"></a>margin 分写属性</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure>

<p>这种方式书写起来代码比较多，使用场景相对特殊，通常我们都用合写的写法。</p>
<h4 id="margin-合写属性"><a href="#margin-合写属性" class="headerlink" title="margin 合写属性"></a>margin 合写属性</h4><p><code>magin</code>属性合写属性一共有 4 个值，值与方向的对应顺序为 从顶部顺时针转下来<br>这种方式书写起来比较常用</p>
<h5 id="分别设置上下，左右两部分的值"><a href="#分别设置上下，左右两部分的值" class="headerlink" title="分别设置上下，左右两部分的值"></a>分别设置上下，左右两部分的值</h5><p>第一个值是上下外边距，第二个值是左右外边距</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line"><span class="comment">/* 等同于下面的设置 */</span></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure>

<h5 id="分别设置上，左右，下三个部分的值"><a href="#分别设置上，左右，下三个部分的值" class="headerlink" title="分别设置上，左右，下三个部分的值"></a>分别设置上，左右，下三个部分的值</h5><p>第一个值 上外边距<br>第二个值 左右外边距<br>第三个值 下外边距</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">200px</span> <span class="number">300px</span>;</span><br><span class="line"><span class="comment">/* 等同于下面的设置 */</span></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<h4 id="margin-的特殊作用"><a href="#margin-的特殊作用" class="headerlink" title="margin 的特殊作用"></a>margin 的特殊作用</h4><p>将元素的水平方向 margin 值 设为<code>auto</code>，可以让块级元素在父级盒子内水平居中.</p>
<blockquote>
<p>如果想要垂直居中，后面会提到flex布局的应用</p>
</blockquote>
<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p><code>padding</code>内边距，即盒子模型中，边框距离内容区域的距离，这个区域会被盒子的背景色填充。<br>也可以理解为<strong>当前元素与元素的边框之间的距离</strong></p>
<ul>
<li>内边距的值与外边距的值类似,都有 4 个值，计算的方式 方向也相同</li>
<li>内边距也有 padding-left 的设置，也有四个方向的分写写法</li>
<li>内边距没有负值，设置负值时相当于<code>padding:0px;</code></li>
<li>内边距为百分比时，也是相对于<strong>父元素的宽度</strong>进行计算</li>
</ul>
<p>在没有设置盒子的宽高时，<code>padding</code>值不会影响到盒子大小</p>
<h3 id="关于盒模型的一些常见的问题"><a href="#关于盒模型的一些常见的问题" class="headerlink" title="关于盒模型的一些常见的问题"></a>关于盒模型的一些常见的问题</h3><h4 id="margin-0-auto-中的auto到底是什么含义？"><a href="#margin-0-auto-中的auto到底是什么含义？" class="headerlink" title="margin:0 auto;中的auto到底是什么含义？"></a><code>margin:0 auto;</code>中的<code>auto</code>到底是什么含义？</h4><p>垂直方向的外边距为 0，水平方向的外边距为<code>auto</code>，此时左右外边距的具体值<br><strong>(父级元素内容区域宽度-含边框内边距的当前元素宽度)&#x2F;2</strong></p>
<p>auto 这个属性做了一件事:将父元素的剩余空间<strong>平分</strong>给子元素的左右外边距，这样就会实现水平居中。</p>
<h4 id="如果对行内元素使用margin-0-auto-会怎么样？"><a href="#如果对行内元素使用margin-0-auto-会怎么样？" class="headerlink" title="如果对行内元素使用margin:0 auto;会怎么样？"></a>如果对行内元素使用<code>margin:0 auto;</code>会怎么样？</h4><p>不能居中，而且宽高属性失效了.<br>其实是<strong>行内元素不支持宽高属性，也不支持内外边距的设置</strong></p>
<h4 id="一定要给元素设置宽度才能水平居中吗？"><a href="#一定要给元素设置宽度才能水平居中吗？" class="headerlink" title="一定要给元素设置宽度才能水平居中吗？"></a>一定要给元素设置宽度才能水平居中吗？</h4><p><code>auto</code>居中的原理是将父元素的剩余空间<strong>平分</strong>给子元素的左右外边距，当你不设置宽度时，<strong>块级元素的宽度默认继承父级元素 100%的宽度</strong>,导致没有剩余空间分配给外边距.</p>
<h4 id="border-0-和border-none-的区别"><a href="#border-0-和border-none-的区别" class="headerlink" title="border:0;和border:none;的区别"></a><code>border:0;</code>和<code>border:none;</code>的区别</h4><p>当<code>border:0;</code>时，表示设置边框，只是边框的宽度为 0，此时浏览器还是要正常的渲染元素的边框，会占用内存空间.<br>当<code>border:none;</code>时，表示不设置边框，浏览器不会进行任何边框相关的渲染，不会占用内存空间.</p>
<p>所以取消边框时，尽量用<code>border:none;</code>来实现.</p>
<h4 id="纵向外边距叠加"><a href="#纵向外边距叠加" class="headerlink" title="纵向外边距叠加"></a>纵向外边距叠加</h4><p>通过后续的<strong>BFC</strong>来解决</p>
<h4 id="padding-和-margin-的选择"><a href="#padding-和-margin-的选择" class="headerlink" title="padding 和 margin 的选择"></a>padding 和 margin 的选择</h4><p>父子用 padding<br>兄弟用 margin</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.boxA</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* padding: 70px 55px; */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.boxB</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">196px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">196px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* margin-bottom: 40px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">70px</span> <span class="number">55px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.boxC</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">196px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">196px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">55px</span> <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxA&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 12 浮动</title>
    <url>/2021/03/20/11%20%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><span id="more"></span>

<h3 id="浮动属性"><a href="#浮动属性" class="headerlink" title="浮动属性"></a>浮动属性</h3><p>语法<br><code>float:left|right|none;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当父元素的宽度&gt;450px 时，三个元素共行；<br>宽度&lt;450px 时，第三个元素被换到第二行<br>宽度&lt;300px 时，三个元素各占一行</p>
<h3 id="可能被阻挡的浮动元素"><a href="#可能被阻挡的浮动元素" class="headerlink" title="可能被阻挡的浮动元素"></a>可能被阻挡的浮动元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4 box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="浮动的影响"><a href="#浮动的影响" class="headerlink" title="浮动的影响"></a>浮动的影响</h3><p>文档流</p>
<p>元素一般存在两种情况：一种是普通流(文档流)，另一种叫脱离文档流(脱标)。</p>
<p>普通流</p>
<blockquote>
<p>普通流又称为常规流，文档流。是文档可显示独享排列时所占用的位置。可以将整个网页看成一个文档，这个文档自上而下分成一行一行的，并且在每行中按照从左到右的顺序，依次排放元素.</p>
</blockquote>
<p>脱离文档流</p>
<blockquote>
<p>设置了浮动，绝对定位的元素会脱离文档流，此时该元素不存在普通流中，而是飞到了普通元素的上方，就像云层一样。<br>由于这种特性，导致本属于普通流的元素设置浮动或者定位后，其父元素内部不存在其他元素。就到导致父元素高度为 0 的现象，这个现象就叫高度塌陷</p>
</blockquote>
<h3 id="浮动元素对父元素高度的影响"><a href="#浮动元素对父元素高度的影响" class="headerlink" title="浮动元素对父元素高度的影响"></a>浮动元素对父元素高度的影响</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* height: 500px; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="浮动元素对兄弟元素布局的影响"><a href="#浮动元素对兄弟元素布局的影响" class="headerlink" title="浮动元素对兄弟元素布局的影响"></a>浮动元素对兄弟元素布局的影响</h3><p>浮动元素会对兄弟元素造成影响，但是仅仅只针对他后面的兄弟元素，并不会对前面的元素布局造成影响。</p>
<h3 id="清除浮动的影响"><a href="#清除浮动的影响" class="headerlink" title="清除浮动的影响"></a>清除浮动的影响</h3><p>对与浮动元素或者浮动元素的父元素我们需要进行一些微操，微操的目的就是为了清除浮动</p>
<p>clear 属性<br>用于清除浮动，规定元素的那一侧不允许存在其他浮动元素<br><code>clear:both|left|right|none;</code></p>
<ul>
<li>both 元素左右两侧都不允许出现浮动元素</li>
<li>left 左侧不允许出现浮动元素</li>
<li>right 右侧不允许出现浮动元素</li>
<li>none 默认值 允许两侧出现浮动元素</li>
</ul>
<h4 id="为兄弟元素清除浮动影响"><a href="#为兄弟元素清除浮动影响" class="headerlink" title="为兄弟元素清除浮动影响"></a>为兄弟元素清除浮动影响</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.con2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.con3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 清除con2浮动带来的影响 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con1&quot;</span>&gt;</span>第1个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con2&quot;</span>&gt;</span>第2个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con3&quot;</span>&gt;</span>第3个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>并非所有浮动元素的兄弟元素都需要清除浮动，只需要对浮动元素的下一个兄弟元素设置清除浮动即可让所有的元素恢复正常布局<br>如果希望在浮动元素和正常元素之间有一定的间距，给正常元素设置时会失效(会与上方空白处叠加)，now 可以给浮动元素设置 margin 值即可</p>
</blockquote>
<h4 id="空标签清除浮动"><a href="#空标签清除浮动" class="headerlink" title="空标签清除浮动"></a>空标签清除浮动</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clear</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然空标签清除浮动通俗易懂，操作方便，但是会添加大量的无意义标签，不利于后期维护.</p>
<h4 id="为父元素设置overflow-hidden"><a href="#为父元素设置overflow-hidden" class="headerlink" title="为父元素设置overflow:hidden;"></a>为父元素设置<code>overflow:hidden;</code></h4><p>原理是在父元素中创建了一个 BFC(块级格式化上下文)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="利用伪元素清除浮动"><a href="#利用伪元素清除浮动" class="headerlink" title="利用伪元素清除浮动"></a>利用伪元素清除浮动</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* .box::after &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        content: &#x27;&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        clear: both;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        display: block;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        height: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 实际开发 往往专门 封装一个类用来清除浮动 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浮动的练习 1-分页器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一页 <span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浮动的练习 2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">290px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">370px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* margin负值的应用 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* .item:nth-child(4),</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      .item:nth-child(6) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-right: 0px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125; */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浮动的练习 3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">221px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">167px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrap</span> <span class="selector-class">.item</span><span class="selector-class">.special</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item special&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 13 git命令</title>
    <url>/2021/03/20/12%20git/</url>
    <content><![CDATA[<span id="more"></span>

<p>git –version<br>git add .<br>git commit -m ‘init’<br>git clone</p>
<p>配置用户信息<br>git config –global user.name ‘手机号’<br>git config -g user.email ‘邮箱’<br>git config -g user.password ‘密码’</p>
<h2 id="上传的步骤"><a href="#上传的步骤" class="headerlink" title="上传的步骤"></a>上传的步骤</h2><h3 id="在删除本地文件的情况下"><a href="#在删除本地文件的情况下" class="headerlink" title="在删除本地文件的情况下"></a>在删除本地文件的情况下</h3><ul>
<li>git clone 克隆远程的仓库</li>
</ul>
<h3 id="其余步骤都是通用的步骤"><a href="#其余步骤都是通用的步骤" class="headerlink" title="其余步骤都是通用的步骤"></a>其余步骤都是通用的步骤</h3><ul>
<li>cd 仓库名字，进入仓库</li>
<li>git add .    把当前仓库的所有内容添加到提交队列</li>
<li>git commit -m ‘你的备注’ 准备提交至远程，可以修改备注</li>
<li>git push     开始提交</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 11 emmrt和bfc</title>
    <url>/2021/03/20/10%20emmet%E5%92%8CBFC/</url>
    <content><![CDATA[<h2 id="emmet-和-BFC"><a href="#emmet-和-BFC" class="headerlink" title="emmet 和 BFC"></a>emmet 和 BFC</h2><span id="more"></span>

<h3 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h3><ol>
<li>子元素<code>&gt;</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- div&gt;ul&gt;li --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>相邻元素<code>+</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- div+p+h1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>层级提升<code>^</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- div+div&gt;p&gt;span+span^^h1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>数量<code>*</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ul&gt;li*5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>分组<code>()</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有分组 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- div&gt;header&gt;ul&gt;li*2&gt;a+footer&gt;p --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有分组 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>id 和 class</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- span.a 生成类名为a的span标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- span#b 生成id为b的span标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7.条目自动生成序号<code>$</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ul&gt;li.item$*5  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ul&gt;li.item$$$*5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p&#123;我是段落&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p><code>BFC</code>即 Block Formatting Context（块级格式化上下文），它是页面中的一块区域，并且有一套渲染规则，它将决定其子元素如何定位，以及对其他元素的影响</p>
<p>具有 BFC 特性的元素，可以看作是隔离的独立容器，容器里面的元素不会在布局上影响到外面的元素，而且 BFC 容器具有一些其他普通容器没有的特点。</p>
<h3 id="如何创建-bfc"><a href="#如何创建-bfc" class="headerlink" title="如何创建 bfc"></a>如何创建 bfc</h3><ul>
<li>body 根元素</li>
<li>float 除了 none 以外的值</li>
<li>绝对定位的元素</li>
<li>display 为 inline-block、flex</li>
<li>overflow 除了 visible 以外的值(hidden、auto、scroll)</li>
</ul>
<h3 id="BFC-特性的应用"><a href="#BFC-特性的应用" class="headerlink" title="BFC 特性的应用"></a>BFC 特性的应用</h3><p>触发BFC可以解决外边距塌陷的问题（盒子之间的margin值相加而不是默认的取大值）</p>
<ol>
<li>外边距重叠<br>由于两个 div 同处于一个 BFC 下，所以第一个 div 的 margin-bottom 会和第二个的 margin-top 发生重叠</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.boxA</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.boxB</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 触发了BFC，生成了独立的容器盒子，在没有触发之前明明应该距离200px的a和b此时却只有100，加上下面这行代码之后 顶开的距离变成了我们想要的200 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>清除浮动(解决父元素高度塌陷)</p>
<blockquote>
<p>高度塌陷：指父元素如果没有指定height，则不会被内容撑开（因为盒子的内容已经浮动脱出标准流了）</p>
</blockquote>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>父子元素的 margin 传递问题</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>阻止元素被浮动覆盖</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.aa</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.bb</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 下方的代码可以让bb盒子不被浮动元素覆盖掉 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>我是一个左浮动的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb&quot;</span>&gt;</span>我是一个没有设置浮动，也没有触发bfc的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 15 动画与形变</title>
    <url>/2021/03/20/14%20%E5%8A%A8%E7%94%BB%EF%BC%8C%E5%BD%A2%E5%8F%98/</url>
    <content><![CDATA[<h2 id="元素的显示隐藏"><a href="#元素的显示隐藏" class="headerlink" title="元素的显示隐藏"></a>元素的显示隐藏</h2><span id="more"></span>

<p>隐藏元素<br><code>display:none;</code> 从页面布局中消失<br><code>visibility:hidden;</code> 该元素还是会占位<br><code>opacity:0;</code> 该元素还是会占位<br><code>宽高设为0</code>该元素还是会占位<br><code>设置绝对定位并移动到页面不可见的区域</code> 该元素还是会占位</p>
<h2 id="文本溢出处理"><a href="#文本溢出处理" class="headerlink" title="文本溢出处理"></a>文本溢出处理</h2><p><code>overflow:visible|hidden|scroll|auto</code></p>
<ul>
<li>visible 默认值，溢出的部份可见</li>
<li>hidden 溢出部份不可见</li>
<li>scroll 溢出的部份会被裁剪但是可以通过滚动条看见</li>
<li>auto 没有溢出正常显示，有溢出就显示为滚动条</li>
</ul>
<h3 id="1-单行"><a href="#1-单行" class="headerlink" title="1.单行"></a>1.单行</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第一步 把超出的部份隐藏掉 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;   </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第二步 强制文本不换行 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第三步 溢出部份显示为省略号 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>疯狂星期四，谁请我吃<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-多行"><a href="#2-多行" class="headerlink" title="2.多行"></a>2.多行</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第一步 隐藏溢出部份 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第二步 设置元素为弹性伸缩盒 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第三步 设置盒子纵向排列 */</span></span></span><br><span class="line"><span class="language-css">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第四步 设置显示多少行以后将内容隐藏*/</span></span></span><br><span class="line"><span class="language-css">    -webkit-line-clamp: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>很多文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>css3 渐变 可以让我们再两个或者多个指定的颜色之间显示平稳的过渡</p>
<h3 id="线性渐变-从上到下-默认"><a href="#线性渐变-从上到下-默认" class="headerlink" title="线性渐变-从上到下(默认)"></a>线性渐变-从上到下(默认)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* skyblue是开始的颜色 pink是结束的颜色*/</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(skyblue, pink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线性渐变-从左到右"><a href="#线性渐变-从左到右" class="headerlink" title="线性渐变-从左到右"></a>线性渐变-从左到右</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, skyblue, pink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线性渐变-对角"><a href="#线性渐变-对角" class="headerlink" title="线性渐变-对角"></a>线性渐变-对角</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom right, skyblue, pink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重复的线性渐变"><a href="#重复的线性渐变" class="headerlink" title="重复的线性渐变"></a>重复的线性渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">    <span class="number">10deg</span>,</span><br><span class="line">    red,</span><br><span class="line">    yellow <span class="number">10%</span>,</span><br><span class="line">    green <span class="number">20%</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>可以指定渐变的中心，渐变的形状，大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(形状 大小 位置, 颜色, ..., 颜色);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        默认是根据盒子的宽高</span></span><br><span class="line"><span class="comment">        circle是圆</span></span><br><span class="line"><span class="comment">        ellipse椭圆</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  <span class="comment">/* 设置位置就不能设置形状 */</span></span><br><span class="line">  <span class="comment">/* closest-side关闭渐变的位置</span></span><br><span class="line"><span class="comment">        第一个值x轴 第二个值y轴 */</span></span><br><span class="line">  <span class="comment">/*farthest-side   </span></span><br><span class="line"><span class="comment">        第一个值x轴 第二个值y轴</span></span><br><span class="line"><span class="comment">        它往往会放大我们的渐变</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">    farthest-side at <span class="number">80%</span> <span class="number">55%</span>,</span><br><span class="line">    red,</span><br><span class="line">    green,</span><br><span class="line">    black</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="形变-transform"><a href="#形变-transform" class="headerlink" title="形变 transform"></a>形变 transform</h2><h3 id="1-rotate-旋转"><a href="#1-rotate-旋转" class="headerlink" title="1. rotate 旋转"></a>1. rotate 旋转</h3><p><code>transform: rotate(30deg);</code><br>旋转是以顺时针方向来旋转，默认以元素本身为旋转中心</p>
<ul>
<li>当值为+，以顺时针方向</li>
<li>当值为负值，逆时针</li>
</ul>
<blockquote>
<p>如果角度大于 360 度，将按照 360 的余数的角度旋转</p>
</blockquote>
<p>形变中心 transform-origin<br><code>transform-origin:left top;</code><br>他的属性可以使用如下的值(x,y)</p>
<ul>
<li>left right top bottom center</li>
<li>20% 60%</li>
<li>10px 400px</li>
</ul>
<h3 id="2-平移-translate"><a href="#2-平移-translate" class="headerlink" title="2.平移 translate"></a>2.平移 translate</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);</span><br><span class="line"><span class="comment">/* 水平移动50px */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>);</span><br><span class="line"><span class="comment">/* 垂直移动 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">50px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-缩放-scale"><a href="#3-缩放-scale" class="headerlink" title="3.缩放 scale"></a>3.缩放 scale</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>();</span><br></pre></td></tr></table></figure>

<p>表示缩放但是不需要单位，1 原始大小，&lt;1 缩小，&gt;1 放大</p>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ol>
<li>translateX 中的 x 是不是一定要大写？<br>可以不大写，但是建议大写，主要是方便开发人员查看</li>
<li>对于 rotate(0deg)可以不可以写成 rotate(0)?<br>原则上来说可以简写，但是在 firefox 的部分版本中无法读取没有单位的角度值，出于兼容性的考虑，不要省略单位</li>
<li>变形的顺序会不会影响结果？<br>可能会有影响，所以在日常开发中，需要先考虑好变形的顺序，防止因为变形产生莫名其妙的问题</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>) <span class="built_in">translateX</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>一个元素在不同样式之间的变化自动添加了 补间动画。即在一段时间内属性值从一个变成另一个，让整个变化过程更加丝滑 流畅</p>
<h3 id="过渡基本属性"><a href="#过渡基本属性" class="headerlink" title="过渡基本属性"></a>过渡基本属性</h3><ul>
<li>transition-porperty 过渡的属性名称 比如 color，实际往往直接写 all</li>
<li>transition-duration 过渡的时间 默认是 0s，必须添加 s 的单位</li>
<li>transition-timing-function 过渡方式<ul>
<li>linear 线性过渡</li>
<li>ease 平滑过渡 逐渐变慢</li>
<li>ease-in 由慢到快</li>
<li>ease-out 由快到慢</li>
<li>ease-in-out 先加速后减速</li>
<li>bezier 值 <a href="https://cubic-bezier.com/#.17,.67,.83,.67">在线贝塞尔曲线</a></li>
</ul>
</li>
</ul>
<h3 id="transition-合写属性"><a href="#transition-合写属性" class="headerlink" title="transition 合写属性"></a>transition 合写属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 过渡的属性||过渡的时间||过渡方式||过渡的延迟时间;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="comment">/* transition-property: all;</span></span><br><span class="line"><span class="comment">        transition-duration: 0.6s;</span></span><br><span class="line"><span class="comment">        transition-timing-function: ease; */</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关键帧选择符"><a href="#关键帧选择符" class="headerlink" title="关键帧选择符"></a>关键帧选择符</h3><p>from-0%<br>to-100%<br>如果关键帧属性值一样，也可以用,一起书写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span>,</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动画的属性"><a href="#动画的属性" class="headerlink" title="动画的属性"></a>动画的属性</h3><ol>
<li>name 必填 动画名称</li>
<li>duration 必填 动画时长</li>
<li>timing-function 默认是 ease 也可以用类似过渡的里面的贝塞尔值</li>
<li>delay 动画的延迟时间</li>
<li>iteration-count 循环的次数 默认是 1 infinite 无限次</li>
<li>direction 动画是否反向运动 normal 正常 alternate 反向</li>
<li>fill-mode 最后动画停住时 是运行还是暂停 running paused</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">25%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">75%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move <span class="number">1s</span> ease <span class="number">0s</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="逐帧动画（步进动画）"><a href="#逐帧动画（步进动画）" class="headerlink" title="逐帧动画（步进动画）"></a>逐帧动画（步进动画）</h3><p>利用 timing-function 的特殊值<br>steps(数字)，数字代表这个动画有多少帧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.rocket</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">149px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./rocket.png&#x27;</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> fly &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-position</span>: -<span class="number">148px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-position</span>: -<span class="number">892px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.rocket</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: fly <span class="number">0.3s</span> <span class="built_in">steps</span>(<span class="number">5</span>) <span class="number">0s</span> infinite;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rocket&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023-03-10-10-55-14.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 14 背景与精灵图</title>
    <url>/2021/03/20/13%20%E8%83%8C%E6%99%AF%E5%92%8C%E7%B2%BE%E7%81%B5%E5%9B%BE/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: red|<span class="number">#000</span>|<span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) |<span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)</span><br><span class="line">  |transparent（默认值）;</span><br></pre></td></tr></table></figure>

<p>transparent 不要忘记</p>
<h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>任何元素，都可以有背景图<br>背景图的设置要通过<code>background-image:url();</code><br>其中 url 就是图片路径</p>
<h3 id="背景重复"><a href="#背景重复" class="headerlink" title="背景重复"></a>背景重复</h3><p><code>background-repeat</code></p>
<ul>
<li>repeat 默认，背景图将会在 x 轴 y 轴上重复</li>
<li>no-repeat 不重复，背景图只显示一次</li>
<li>repeat-y 背景图只在 y 轴重复</li>
<li>repeat-x 背景图只在 x 轴重复</li>
</ul>
<h3 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h3><p>控制背景图从哪里开始显示<br><code>background-position:x y;</code><br>常见的是像素值，但是实际上我们更常用的<br>top right left bottom center<br>可以只写一个值，此时另外一个值默认为<code>center</code></p>
<h3 id="背景固定"><a href="#背景固定" class="headerlink" title="背景固定"></a>背景固定</h3><p><code>background-attachment</code></p>
<ul>
<li>scroll 默认值，背景图会跟随页面滚动</li>
<li>fixed 背景图固定，常常用来做<strong>视差滚动</strong></li>
</ul>
<h3 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h3><p><code>background-size:&lt;length&gt;|%|||</code></p>
<ul>
<li>length 第一个值为水平宽度，第二个值为垂直高度，当只写一个值的时候，另一个为 auto</li>
<li><code>%</code> 也是两个值，是相对于父元素的百分比</li>
<li>cover 让图片完全覆盖背景，这个属性一般会让背景图显示不全</li>
<li>contain 会把图片缩放到合适大小，让图片完全显示，一般会让部分区域空白</li>
</ul>
<h3 id="复合写法"><a href="#复合写法" class="headerlink" title="复合写法"></a>复合写法</h3><p><code>background: 颜色 路径 重复？ 位置/尺寸</code></p>
<ul>
<li>背景尺寸必须紧跟在背景位置的后面，两者之间用一条<code>/</code>分隔</li>
<li>值的规则仍然适用，横向的值在前，纵向的值在后</li>
</ul>
<h3 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h3><ol>
<li>背景图和背景颜色，从哪里开始显示?(边框？内边距？)<br>背景颜色从<strong>边框区域</strong>开始渲染,而背景图片从<strong>内边距</strong>开始渲染<br>某些情况下，需要将背景图渲染的位置发生改变，我们就可以用到<br><code>background-origin:border-box|padding-box|content-box</code></li>
</ol>
<ul>
<li>border-box:图像从边框区域开始</li>
<li>padding-box:图像从内边距开始(默认值)</li>
<li>content-box:图像从内容区域开始</li>
</ul>
<h3 id="2-什么时候用-img？什么时候用-bgi"><a href="#2-什么时候用-img？什么时候用-bgi" class="headerlink" title="2.什么时候用 img？什么时候用 bgi?"></a>2.什么时候用 img？什么时候用 bgi?</h3><ul>
<li><p>img<br>img 标签虽然不是块级元素，但是他可以设置宽高，占位<br>img 设置宽度以后，高度会自动匹配，如果设置高度那么宽度也一样，如果同时设置宽高，图片可能会变形。</p>
</li>
<li><p>bgi<br>他只是一个 css 属性，并不占位，可以结合其他属性来设置背景图的大小，位置，重复与否。她所在的元素必须设置宽高</p>
</li>
</ul>
<p>他们的不同</p>
<ol>
<li>img 是标签占位；bgi 不是标签不占位</li>
<li>img 是 docment 对象中可以操作的，但是 bgi 不行</li>
<li>在网页的加载过程中，img 是结构的一部分，会在加载结构的时候加载，而 bgi 是样式，它会在结构加载完成以后再加载</li>
<li>img 标签点击会选中&#x2F;放大图片，bgi 不会</li>
</ol>
<p>使用 img</p>
<ul>
<li>作为结构</li>
<li>展示后台传过来的数据</li>
<li>对图片进行缩放</li>
<li>seo 搜索引擎优化</li>
<li>对语义化有明确要求</li>
<li>图片是作为页面的组成部份而不是修饰部份</li>
<li>显示图片只给定宽&#x2F;定高 而且不能截断的时候</li>
</ul>
<p>使用 bgi</p>
<ul>
<li>不是结构的一部分</li>
<li>图像代替文本使用</li>
<li>禁止用户缩放时</li>
<li>允许图片 拉伸 重复平铺 截取</li>
</ul>
<h2 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h2><p>雪碧图是一种网页处理图片的方式，它允许将一个页面涉及到的所有零星的图片都整合到一张大图中。当访问该页面的时候，载入的图片就不会像往常那样慢慢显示出来。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>简单来说，使用雪碧图的主要目的就是为了<strong>有效的减少 Http 请求数量</strong>和<strong>加速内容的显示</strong></p>
<h3 id="雪碧图的使用规则"><a href="#雪碧图的使用规则" class="headerlink" title="雪碧图的使用规则"></a>雪碧图的使用规则</h3><p>虽然 css sprite 能够优化网络资源的加载情况，但是并不是每个图片适合用雪碧图，必须满足以下条件</p>
<ul>
<li>静态图片，不会因为用户的差异性而发生变化</li>
<li>小图片，图片的体积比较小，对清晰度要求不高</li>
</ul>
<h2 id="git-的使用"><a href="#git-的使用" class="headerlink" title="git 的使用"></a>git 的使用</h2><p>安装<br><a href="https://git-scm.com/">git 官网</a></p>
<p>配置环境变量</p>
<p>clear 清屏<br>git –version 查看版本号<br>git add . 把当前仓库的所有内容添加到提交队列<br>git commit -m ‘提交信息’<br>git push<br>git clone 从远端拉取仓库</p>
<p>配置用户信息<br>git config –global user.name ‘手机号码’<br>git config –global user.email ‘你的邮箱’<br>git config –global user.password ‘你的 git 密码’</p>
<p>查看 git 的配置<br>git config -l</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 17 scss安装与使用</title>
    <url>/2021/03/20/16%20scss/</url>
    <content><![CDATA[<h2 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h2><span id="more"></span>

<h3 id="安装-scss"><a href="#安装-scss" class="headerlink" title="安装 scss"></a>安装 scss</h3><ol>
<li>mac<br>安装前检查版本 更新</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gem update --system</span><br></pre></td></tr></table></figure>

<p>安装走起</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gem install sass</span><br><span class="line">gem install compass</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sass -v</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果上述命令不提示则输入下方命令</span></span><br><span class="line">sass --version</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>windows</li>
</ol>
<p>要先安装 Ruby 环境<br><a href="https://rubyinstaller.org/downloads/"></a><br>务必以管理员身份运行安装包，安装的时候注意勾选<code>Add Ruby executables to your PATH</code>,将 Rub<br>y 添加到环境变量<br>安装完成后，在 cmd 运行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<p>正确显示版本号以后 安装 sass</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gem install sass</span><br><span class="line">gem install compass</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sass -v</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果上述命令不提示则输入下方命令</span></span><br><span class="line">sass --version</span><br></pre></td></tr></table></figure>

<h3 id="单文件编译"><a href="#单文件编译" class="headerlink" title="单文件编译"></a>单文件编译</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scss --watch input.scss:output.css</span><br></pre></td></tr></table></figure>

<p>这句话的意思是用 scss 自动监听当前文件夹下的<strong>input.scss</strong>,并且编译成<br><strong>output.css</strong><br>如果要编译 scss 文件夹里面的 scss 文件并输出到 css 文件夹下可以这样写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scss --watch scss/input.scss:css/output.css</span><br></pre></td></tr></table></figure>

<p>多个 scss 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scss --watch scss:css</span><br></pre></td></tr></table></figure>

<p>实际开发使用<code>live sass compiler</code>插件帮助我们编译并且自动生成到对应的文件夹下，此插件有 bug 不能有中文路径</p>
<h3 id="导入其他样式文件"><a href="#导入其他样式文件" class="headerlink" title="导入其他样式文件"></a>导入其他样式文件</h3><p><code>@import &quot;文件名.scss&quot;</code></p>
<h3 id="忽略编译"><a href="#忽略编译" class="headerlink" title="忽略编译"></a>忽略编译</h3><p>以<code>_</code>开头的文件，将不会被编译，另外在引入这种文件的时候，可以不带上下划线，而且 3.7.4 版本的 scss 可以不带文件后缀名.</p>
<h3 id="scss-五大基础语法"><a href="#scss-五大基础语法" class="headerlink" title="scss 五大基础语法"></a>scss 五大基础语法</h3><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h4><p><code>$变量名:变量值;</code></p>
<h4 id="2-嵌套"><a href="#2-嵌套" class="headerlink" title="2.嵌套"></a>2.嵌套</h4><p>可以按照 html 的结构来嵌套</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bgc</span>: <span class="number">#87ceeb</span>;</span><br><span class="line"><span class="variable">$w</span>: <span class="number">1000px</span>;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">  &amp; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">// &amp;代表的是父元素</span></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h4><p>允许一个选择器继承另一个选择器的属性<br>通过<code>@extend 选择器名</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bgc</span>: <span class="number">#87ceeb</span>;</span><br><span class="line"><span class="variable">$w</span>: <span class="number">1000px</span>;</span><br><span class="line"><span class="selector-class">.common-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">  &amp; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .common-wrap;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>占位符<code>%</code><br>用占位符声明的代码，如果不被<code>@extend</code>调用就不回被编译</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%common &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %common;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-Mixin-混合器"><a href="#4-Mixin-混合器" class="headerlink" title="4.Mixin 混合器"></a>4.Mixin 混合器</h4><p>需要先声明再使用</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> gColor &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#87ceeb</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="keyword">@include</span> gColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以传递参数</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> gColor(<span class="variable">$color</span>: pink, <span class="variable">$size</span>: <span class="number">20px</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="keyword">@include</span> gColor(skyblue, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单独改变size</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="keyword">@include</span> gColor(<span class="variable">$size</span>: <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以传递样式片段</p>
<p>在 mixin 中添加<code>@content</code>语句即可，后续传递的代码片段就会取代<code>@content</code>，出现在对应的位置</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> common &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="keyword">@content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> common &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-自定义函数"><a href="#5-自定义函数" class="headerlink" title="5.自定义函数"></a>5.自定义函数</h4><p>需要通过<code>@function</code>来声明一个函数，然后通过<code>@return</code>来返回值</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> sum(<span class="variable">$sumA</span>, <span class="variable">$sumB</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$sumA</span> + <span class="variable">$sumB</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">sum</span>(<span class="number">10px</span>, <span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题，用-mixin-还是用-extend"><a href="#问题，用-mixin-还是用-extend" class="headerlink" title="问题，用@mixin 还是用@extend?"></a>问题，用@mixin 还是用@extend?</h4><ol>
<li>如果某段样式代码不需要用到自定义参数，那可以考虑继承</li>
<li>mixin 和 extend 的区别</li>
</ol>
<p>extend 的编译结果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-b</span>,</span><br><span class="line"><span class="selector-class">.button-a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125; <span class="comment">/*# sourceMappingURL=index.css.map */</span></span><br></pre></td></tr></table></figure>

<p>mixin 的结果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-b</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，在使用继承时，我们首先要保证不需要传递参数，然后要确保继承的元素最好是同一类型的。那么用<br><code>@extend</code>来创造<strong>DRY</strong>代码是一个不错的选择，其他情况下，还是用<code>@mixin</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 16 flex布局</title>
    <url>/2021/03/20/15%20flex/</url>
    <content><![CDATA[<h1 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h1><span id="more"></span>

<h3 id="Flexbox-翻译为弹性盒子"><a href="#Flexbox-翻译为弹性盒子" class="headerlink" title="Flexbox 翻译为弹性盒子"></a>Flexbox 翻译为弹性盒子</h3><ul>
<li>弹性盒子是一种用于按行或者按列布局元素的一维的布局方法;</li>
<li>元素可以膨胀以填充额外的空间，收缩以适应更小的空间</li>
<li>通常我们用 flexbox 来布局的方案称之为 flex 布局(flex layout)<br><img src="/2023-03-10-10-55-14.png"></li>
</ul>
<h3 id="flex-布局的重要概念"><a href="#flex-布局的重要概念" class="headerlink" title="flex 布局的重要概念"></a>flex 布局的重要概念</h3><p>两个重要的概念</p>
<ul>
<li>开启了 flex 布局的元素叫 flex container</li>
<li>flex container 里面的<strong>直接</strong>子元素叫做 flex item</li>
</ul>
<p>当 flex container 中的子元素变成 flex item 时，具备以下一些特点</p>
<ul>
<li>flex item 的布局将受到 flex container 的属性来控制</li>
<li>flex item 不再严格区分块级&#x2F;行内级元素</li>
<li>flex item 默认情况下是包裹内容的，但是可以设置宽高</li>
</ul>
<p>设置 display 属性为 flex 或者 inline-flex 可以成为 flex container</p>
<h2 id="flex-的属性"><a href="#flex-的属性" class="headerlink" title="flex 的属性"></a>flex 的属性</h2><ul>
<li>flex container 上的属性<ol>
<li>flex-flow</li>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ol>
</li>
<li>flex item 上的属性<ol>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>order</li>
<li>align-self</li>
<li>flex</li>
</ol>
</li>
</ul>
<h2 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h2><p>flex items 默认都是沿着主轴方向从 main start 开始往 main end 排布</p>
<ul>
<li>row(默认值)</li>
<li>row-reverse 行反转</li>
<li>column 列排布</li>
<li>column-reverse 列反转</li>
</ul>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>flex-wrap 决定了 flex container 是一行还是多行</p>
<ul>
<li>nowrap 默认 单行</li>
<li>wrap 多行</li>
<li>wrap-reverse 多行而且 cross start 和 cross end 反转</li>
</ul>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow 是 flex-direction 和 flex-wrap 的简写</p>
<ul>
<li>任何顺序，而且两个可以随便省略</li>
</ul>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>justify-content 决定了 flex items 在 main axis 上的排列方式</p>
<ul>
<li>flex-start 默认值 与 main start 对齐</li>
<li>flex-end 与 main end 对齐</li>
<li>center 居中对齐</li>
<li>space-between<ul>
<li>flex items 之间距离相等</li>
<li>与 main start ，main end 两端对齐</li>
</ul>
</li>
<li>space-evenly<ul>
<li>flex items 之间距离相等</li>
<li>flex item 与 main start，main end 之间的距离 等于 flex item 之间的距离</li>
</ul>
</li>
<li>space-around<ul>
<li>flex items 之间距离相等</li>
<li>flex item 与 main start，main end 之间的距离 等于 flex item 之间的距离的一半</li>
</ul>
</li>
</ul>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>align-items 用于控制交叉轴上的排布方式</p>
<ul>
<li>normal 在弹性布局中和 stretch 一样</li>
<li>stretch 当 flex item 在 cross axis 方向上的 size 为 auto 时 会自动拉伸填充 flex container</li>
<li>flex-start(默认)：与 cross start 对齐</li>
<li>flex-end：与 cross end 对齐</li>
<li>center 居中对齐</li>
<li>baseline 基线对齐</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>align-content 决定了多行的 flex items 在 cross axis 上的对齐方式，用法和 justify-content 类似</p>
<ul>
<li>stretch（默认）：与 align-items 的很相似</li>
<li>flex-start：与 cross start 对齐</li>
<li>flex-end：与 cross end 对齐</li>
<li>center 居中对齐</li>
<li>space-between</li>
<li>space-around</li>
<li>space-evenly</li>
</ul>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>order 决定了元素的顺序</p>
<ul>
<li>默认是 0</li>
<li>可以设置任意整数，值越小排在越前面</li>
</ul>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>flex items 可以通过 align-self 属性来覆盖 flex container 容器设置的 align-items</p>
<ul>
<li>auto(默认):遵循容器设置的值</li>
<li>其余的值和 align-items 一样</li>
</ul>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>flex-grow 决定了 flex items 是如何拉伸的</p>
<ul>
<li>可以设置任意的非负的数字(正整数，正小数，0) 默认是 0 不成长</li>
<li>当 flex container 在 main axis 上有剩余的 size 时，flex-grow 才能生效，如果所有 flex item 的 flex-grow 属性总和 sum 超过了 1，那么每个 flex items 扩展的 size 为</li>
</ul>
<p><code>flex container的剩余size*flex-grow/sum</code></p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>flex-shrink 决定了 flex items 如何缩小</p>
<ul>
<li>可以设置任意的非负的数字(正整数，正小数，0) 默认是 1 可以被压缩</li>
<li>当 flex items 在 main axis 上超过了 flex container 的 size flex-shrink 才会生效</li>
</ul>
<p>如果所有的 flex items 的总和超过 1，每个 flex items 它收缩的 size 为</p>
<p><code>flex items超出的container的size*收缩比例/所有flex items的flex-shrink的之和</code></p>
<p>flex items 收缩后 最终展现出来的宽度不能小于 min-width</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>用来设置 flex items 在 main axis 方向上的 base size</p>
<ul>
<li>auto(默认值) 、具体的宽度数值</li>
</ul>
<p>决定 flex items 最终的宽度的影响因素有多个,优先级从高到低</p>
<ul>
<li>max-width\min-width\max-height\min-height</li>
<li>flex-basis</li>
<li>width&#x2F;height</li>
<li>内容本身的 size</li>
</ul>
<h3 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h3><p>是 flex-grow、flex-shrink、flex-basis 的缩写属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span> =</span><br><span class="line">  <span class="attribute">none</span> |</span><br><span class="line">  <span class="selector-attr">[ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span></span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex"></a></p>
<p>flex:1<br>grow 为 1 shrink 为 0 basis 默认</p>
<h3 id="flex-布局-solution"><a href="#flex-布局-solution" class="headerlink" title="flex 布局 solution"></a>flex 布局 solution</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* height: 500px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &gt; <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-color: #fff; */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加i的个数 是需要额外补充上去的元素个数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/itemRandomColor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 18 CSS补充知识</title>
    <url>/2021/03/20/17%20css%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="URL-地址"><a href="#URL-地址" class="headerlink" title="URL 地址"></a>URL 地址</h2><span id="more"></span>

<h3 id="认识-url"><a href="#认识-url" class="headerlink" title="认识 url"></a>认识 url</h3><ul>
<li>url 统一资源定位符(Uniform Resource Locator)</li>
<li>url 无非就是给定的独特资源在 web 上的地址<ul>
<li>每个有效的 url 都指向一个唯一的资源</li>
<li>这个资源可以是一个 html 页面，一个 css 文档，一副图像…</li>
</ul>
</li>
</ul>
<h3 id="URL-的格式"><a href="#URL-的格式" class="headerlink" title="URL 的格式"></a>URL 的格式</h3><ul>
<li>url 的标准格式如下:<ul>
<li><code>[协议类型]://[服务器地址]:[端口号]/[文件路径][文件名]?[查询]#[片段ID]</code></li>
<li><code>https://john.deo@www.example.com:123/forum/question/?tag=network&amp;news#top</code></li>
</ul>
</li>
</ul>
<h3 id="URI-的区别"><a href="#URI-的区别" class="headerlink" title="URI 的区别"></a>URI 的区别</h3><ul>
<li>URI:Uniform Resource Identifier 统一资源<strong>标识符</strong>，用于标识<strong>web 技术使用的逻辑或者物理资源</strong></li>
<li>URI 在某一个规则下能把一个资源独一无二的识别出来</li>
<li>URL 是 URI 的一个子集</li>
</ul>
<blockquote>
<p><strong>Locators are also identifiers</strong>,so every URL is also a URI,but there are URIs which are not URLs.</p>
</blockquote>
<h3 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h3><p><img src="/assets/2023-03-20-10-33-03.png" alt="2023-03-20-10-33-03.png"></p>
<h3 id="input-元素的扩展内容"><a href="#input-元素的扩展内容" class="headerlink" title="input 元素的扩展内容"></a>input 元素的扩展内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- autofocus自动聚焦 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;的防晒好大风&quot;</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- single  multiple支持多选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- input的type值还有非常多的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;1000&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>placeholder 也是 html 新增的<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input">mdn</a></p>
<h3 id="全局属性data"><a href="#全局属性data" class="headerlink" title="全局属性data-*"></a>全局属性<code>data-*</code></h3><ul>
<li>在 html5 中，新增的一种全局属性的格式<code>data-*</code>,用于自定义属性<ul>
<li>data 设置的属性可以在 js 中的 dom 操作通过<strong>dataset</strong>拿到</li>
<li>通常用于 html 和 js 数据之间的传递</li>
</ul>
</li>
<li>在小程序中，就是通过<code>data-*</code>来传递数据的，所以必须掌握</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;box&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">age</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-name</span>=<span class="string">&quot;jack&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-age</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-gender</span>=<span class="string">&quot;female&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">dataset</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="css-常见的函数扩展"><a href="#css-常见的函数扩展" class="headerlink" title="css 常见的函数扩展"></a>css 常见的函数扩展</h2><ul>
<li>在前面我们已经使用过了很多个 css 的函数<ul>
<li>比如 rgb&#x2F;rgba&#x2F;translate&#x2F;rotate&#x2F;scale&#x2F;…</li>
<li>css 函数通常可以帮助我们更加灵活的来编写样式的值</li>
</ul>
</li>
<li>var&#x2F;calc&#x2F;blur</li>
</ul>
<h3 id="css-函数-var"><a href="#css-函数-var" class="headerlink" title="css 函数 -var"></a>css 函数 -var</h3><ul>
<li>css 中可以自定义属性<ul>
<li>属性名需要以两个减号(–)开始</li>
<li>属性值可以是任何有效的 css 值</li>
</ul>
</li>
<li>我们可以通过 var 函数来使用</li>
<li>推荐将自定义属性定义在 html 中，往往使用<code>:root</code>选择器</li>
</ul>
<h3 id="css-函数-calc"><a href="#css-函数-calc" class="headerlink" title="css 函数 - calc"></a>css 函数 - calc</h3><ul>
<li>calc（）函数允许在声明 css 值的时候执行一些计算<ul>
<li>计算支持加减乘除</li>
<li><code>+</code> 和 <code>-</code> 运算符两边必须有空白字符</li>
<li>通常用来设置一些元素的尺寸或者位置</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css-函数-blur"><a href="#css-函数-blur" class="headerlink" title="css 函数 - blur"></a>css 函数 - blur</h3><ul>
<li>blur()函数将高斯模糊应用于输出图片或者元素<ul>
<li>blur(radius)</li>
<li>radius，模糊半径，值越大越模糊</li>
</ul>
</li>
<li>通常会和其他属性一起使用<ul>
<li>filter:应用于元素</li>
<li>backdrop-filter:为元素的后面添加模糊&#x2F;其他效果</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* backdrop-filter: blur(10px); */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=242767209,2541342896&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>媒体查询的使用方式有三种</p>
<ul>
<li><p>方式 1:通过@media 和@import 使用不同的 css 规则(常用)<br><code> &lt;style&gt; /* import是可以结合媒体查询来使用的 */ @import url(./demo.css) (max-width: 800px); &lt;/style&gt;</code></p>
</li>
<li><p>方式 2:使用 media 属性为<style>,<link>,<source>和其他 html 元素指定特定的媒体类型<br><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-width:800px)&quot; href=&quot;./demo.css&quot; /&gt;</code></p>
</li>
<li><p>方式 3:使用 Window.matchMedia()和 MediaQueryList.addListener()方法来测试和监听媒体的状态</p>
</li>
<li><p>最常用的就是通过@media 来设置不同的 css 规则，必须掌握</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="媒体查询-媒体类型（Media-types）"><a href="#媒体查询-媒体类型（Media-types）" class="headerlink" title="媒体查询-媒体类型（Media types）"></a>媒体查询-媒体类型（Media types）</h3><ul>
<li>all 所有设备</li>
<li>print 打印预览模式下</li>
<li>screen 屏幕</li>
<li>speech 语音合成器</li>
</ul>
<h3 id="媒体查询-逻辑操作符-logical-operators"><a href="#媒体查询-逻辑操作符-logical-operators" class="headerlink" title="媒体查询- 逻辑操作符(logical operators)"></a>媒体查询- 逻辑操作符(logical operators)</h3><ul>
<li>and：和，都要满足</li>
<li>not：取反</li>
<li>only：只有</li>
<li>,:多个</li>
</ul>
<p>例子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 屏幕宽度大于500 小于700时 红色背景 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">500px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">700px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>练习：</p>
<blockquote>
<p>不要拿到手就做!!!</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">      320-375 font-size:15px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      375-414 18</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      414-480 21</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      大于480 24</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* @media (min-width: 320px) and (max-width: 375px) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .box &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">          font-size: 15px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      @media (min-width: 375px) and (max-width: 414px) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .box &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">          font-size: 18px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      @media (min-width: 414px) and (max-width: 480px) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .box &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">          font-size: 21px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      @media (min-width: 480px) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .box &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">          font-size: 24px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      &#125; */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="css-常见单位"><a href="#css-常见单位" class="headerlink" title="css 常见单位"></a>css 常见单位</h2><p>px 是一个长度单位，css 还有很多的长度单位</p>
<h3 id="绝对单位-Absolute-length-Units"><a href="#绝对单位-Absolute-length-Units" class="headerlink" title="绝对单位(Absolute length Units)"></a>绝对单位(Absolute length Units)</h3><ul>
<li>与其他任何东西都无关，通常被认为总是相同的大小</li>
<li>这些值大多数在用于打印时比用于屏幕输出时更加有用</li>
<li>唯一一个比较常用的就是 px(像素)</li>
</ul>
<h3 id="相对单位-Relative-length-Units"><a href="#相对单位-Relative-length-Units" class="headerlink" title="相对单位(Relative length Units)"></a>相对单位(Relative length Units)</h3><ul>
<li>相对长度单位相对于一些其他的东西</li>
<li>比如父元素的字体大小，或者视图端口的大小</li>
<li>经过一些仔细的规划，可以使得文本或者其他元素的大小与页面上的其他内容相对应</li>
</ul>
<ol>
<li>em:相对于父元素的字体大小</li>
<li>rem:相对于 html(root)的字体大小</li>
<li>vw&#x2F;vh:视口宽度&#x2F;高度的百分比</li>
</ol>
<h2 id="理解-pixel-DPR-PPI"><a href="#理解-pixel-DPR-PPI" class="headerlink" title="理解 pixel DPR PPI"></a>理解 pixel DPR PPI</h2><h3 id="当我们在聊-pixel，到底在聊什么？"><a href="#当我们在聊-pixel，到底在聊什么？" class="headerlink" title="当我们在聊 pixel，到底在聊什么？"></a>当我们在聊 pixel，到底在聊什么？</h3><ul>
<li>像素是影响图片显示的基本单位</li>
<li>pix 是英文单词 picture 的缩写，加上 element 元素得到的 pixel</li>
<li>有些时候又称为 pel</li>
</ul>
<h3 id="像素的不同分类"><a href="#像素的不同分类" class="headerlink" title="像素的不同分类"></a>像素的不同分类</h3><ol>
<li>设备像素(物理像素)<ul>
<li>是指显示器上面的真实像素，每个像素的大小是屏幕固有属性，屏幕出厂以后就不会改变了</li>
<li>我们购买手机或者显示器的时候，提到的设备分辨率就是设备的像素大小</li>
<li>比如 iphone 14 pro <strong>2556 x 1179 像素分辨率</strong> 指的就是设备像素</li>
</ul>
</li>
<li>设备独立像素(逻辑像素)<ul>
<li>如果面向开发者我们使用设备像素显示一个 100px 的宽度，那么不同的屏幕上显示效果会不一样。</li>
<li>开发者针对不同的屏幕很难进行较好的适配，编写程序必须了解用户的分辨率来进行开发</li>
<li>所以在设备像素上，操作系统为开发者进行了抽象，提供了逻辑像素的概念</li>
</ul>
</li>
<li>css 像素<ul>
<li>pixel 他默认情况下等同于设备独立像素</li>
</ul>
</li>
</ol>
<p><code>screen.height``screen.width</code></p>
<h2 id="DPR、PPI、DPI"><a href="#DPR、PPI、DPI" class="headerlink" title="DPR、PPI、DPI"></a>DPR、PPI、DPI</h2><h3 id="DPR-device-pixel-ratio"><a href="#DPR-device-pixel-ratio" class="headerlink" title="DPR device pixel ratio"></a>DPR device pixel ratio</h3><p>在 iphone4 的 retina 屏，<strong>一个逻辑像素的长度</strong>相当于<strong>两个物理像素</strong>，这个比例称为设备像素比<br><code>window.devicePixelRatio</code></p>
<p>PPI DPI 每英寸像素</p>
<h2 id="居中-熟练"><a href="#居中-熟练" class="headerlink" title="居中(熟练)"></a>居中(熟练)</h2><ol>
<li>flex</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>flex 给子项设置</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>绝对定位+translate</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>table-cell</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置元素在垂直方向上的对齐方式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>grid 设置</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>grid 给子设置</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>给容器加伪元素<br>适合文字居中</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>四个方向的定位为 0 配合 auto</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>什么是移动端适配？<br>什么是 viewport？<br>移动端适配的方案？</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World!我的第一篇blog</title>
    <url>/2021/03/20/b01%20%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog&amp;%E5%BB%BA%E7%AB%99%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>今天肝了一天总算把一个博客的基本框架支棱起来了，目前还需要修改一些网站的样式：</p>
<ol>
<li>选择网站的主题色，采用6:3:1的方法选择</li>
<li>为网站选择一个logo，准备尝试一下下ai设计</li>
<li>添加背景图</li>
<li>掌握md语法输出文章</li>
</ol>
<h2 id="总结一下建站的心得"><a href="#总结一下建站的心得" class="headerlink" title="总结一下建站的心得"></a>总结一下建站的心得</h2><ol>
<li>总花费：8元</li>
<li>耗时6个钟<span id="more"></span></li>
</ol>
<p>我选择的教程是知乎上<strong>枫叶</strong>大神的教程，<br><a href="https://zhuanlan.zhihu.com/p/102592286">枫叶大佬的知乎文章</a>共分为8个章节，下面我根据章节来总结下遇到的坑。</p>
<h3 id="第一节：注册github"><a href="#第一节：注册github" class="headerlink" title="第一节：注册github"></a>第一节：注册github</h3><p>这一节并不难，只需要一个魔法上网连接到github（有时候可以裸连），然后就按照教程一步步走即可。</p>
<h3 id="第二节：安装git"><a href="#第二节：安装git" class="headerlink" title="第二节：安装git"></a>第二节：安装git</h3><p>按教程的一步步走，建议在非系统盘中安装</p>
<h3 id="第三节：绑定github仓库"><a href="#第三节：绑定github仓库" class="headerlink" title="第三节：绑定github仓库"></a>第三节：绑定github仓库</h3><p>绑定github命令，建议使用下面的办法</p>
<ol>
<li><p>本地在非系统盘中新建文件夹用于克隆远程仓库，新建完成后右键，点击git bash here,然后输入以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个命令的作用是克隆github上远程的仓库下来</p>
</blockquote>
</li>
<li><p>克隆下来后打开vscode,左边工作区添加刚刚克隆的文件夹至资源区，然后新建文件测试能否传回到仓库里。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">&lt;!-- 把当前仓库的所有内容添加到提交队列 --&gt;</span><br><span class="line">   </span><br><span class="line">git commit -m &#x27;你的备注&#x27;</span><br><span class="line">&lt;!-- 这个是将刚刚的队列提交到缓存区，可以修改&#x27;你的备注&#x27;为你想说的话作为提交时的备注 --&gt;</span><br><span class="line">   </span><br><span class="line">git push</span><br><span class="line">&lt;!-- 开始提交！ --&gt;</span><br></pre></td></tr></table></figure>
<p>首次提交会<strong>弹出github的登录页面</strong>，按照链接的教程登录一下即可。成功后在远程仓库就可以看到你刚刚上传的测试文件了。</p>
</li>
</ol>
<h3 id="第四节：域名的购买"><a href="#第四节：域名的购买" class="headerlink" title="第四节：域名的购买"></a>第四节：域名的购买</h3><ul>
<li>推荐使用阿里云，域名比较便宜，如果有钱的话可以使用.com域名，没有的话选择便宜的即可，按照教程上传<strong>身份证</strong>和<strong>相关信息</strong>审核，大约两个半小时可以审核完成。</li>
<li>域名选择尽量选择规范的好记的域名，方便他人访问你的博客。</li>
</ul>
<h3 id="第五节：下载node-js以及hexo"><a href="#第五节：下载node-js以及hexo" class="headerlink" title="第五节：下载node.js以及hexo"></a>第五节：下载node.js以及hexo</h3><p>这里有提到这种类型的博客采用的是hexo框架搭建的，目前我刚刚接触，还不是很熟悉。</p>
<ul>
<li>首先需要注意的是：</li>
<li><strong>github已经将主分支名字改成main，而不是原来的master</strong>，如果你没有改的话，将会新建一个master分支来部署，则会直接导致后面的步骤失败！！</li>
<li>补救方法：去github上把master分支删掉，重新正确跑一次代码即可。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: github.com/fengye97/fen #你的仓库地址</span><br><span class="line">branch: main #在做到这一步的时候,记得把master改成main</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第六节：解析域名"><a href="#第六节：解析域名" class="headerlink" title="第六节：解析域名"></a>第六节：解析域名</h3><p>根据教程走，如果你的域名已经正确绑定，但是提示ip地址不对，或者dns错误，可以尝试以下方法：</p>
<blockquote>
<p>“可以试试在解析中多加几条记录 A @ 185.199.108.153 和 A @ 185.199.109.153 和 A @ 185.199.110.153 和 A @ 185.199.111.153 这就相当于把所有可能的都加上了，因为我的github上的IP老是在这几个里面变来变去。如果还不行的，就把这篇文章做的全部删除，删除域名解析，先看一下上一篇文章的最后的结果能不能展现出来，如果可以就再把这篇的做一遍，还是不行的话就等一会就好了”<br>—来自知乎@来搞笑的</p>
</blockquote>
<h3 id="第七节：样式修改，写博文等等"><a href="#第七节：样式修改，写博文等等" class="headerlink" title="第七节：样式修改，写博文等等"></a>第七节：样式修改，写博文等等</h3><p>大佬的教程中没有提到如何写博文，我的目录：D:\02-blog\hexo\source_posts<br>就是在里面新增md文件，添加完后按hexo“三部曲”同步到github上。</p>
<ul>
<li>后续的样式更新如果遇到问题，我会再更新博客文章来记录。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客编写</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发学习笔记 02 html基本标签</title>
    <url>/2021/02/20/01%20html%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="html-基本标签"><a href="#html-基本标签" class="headerlink" title="html 基本标签"></a>html 基本标签</h2><span id="more"></span>

<h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>总共有 6 级标题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p>段落标签是一个块级标签，前后添加了换行符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本标签-span"><a href="#文本标签-span" class="headerlink" title="文本标签 span"></a>文本标签 span</h3><p>文本标签是行内标签，他不会独占一行，而且会和其他的行内标签共行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是行内的一段文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是行内另的一段文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="换行标签-br"><a href="#换行标签-br" class="headerlink" title="换行标签 br"></a>换行标签 br</h3><p>在需要换行的地方添加 br 标签即可换行<br>换行标签是一个单标签</p>
<ul>
<li>双标签:由一个开始标签和一个结束标签组成 比如<code>&lt;p&gt;&lt;/p&gt;</code></li>
<li>单标签:只有一个 <code>&lt;br/&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分割线-hr"><a href="#分割线-hr" class="headerlink" title="分割线 hr"></a>分割线 hr</h3><p>分割上下文</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>在网页中插入图片用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>src 图片的地址</li>
<li>alt 图片加载失败显示的文字</li>
<li>width 图片的宽度</li>
<li>height 图片的高度</li>
<li>title 鼠标悬停时，显示的文字内容</li>
<li>相对地址:相对于文件所在的位置进行引入资源的路径，对当前文件所在位置非常敏感</li>
<li>绝对地址:不管文件在哪里，地址不变，图片始终能够正常引用</li>
</ul>
<h4 id="路径特殊符号"><a href="#路径特殊符号" class="headerlink" title="路径特殊符号"></a>路径特殊符号</h4><ul>
<li>.&#x2F; 代表当前目录</li>
<li>..&#x2F; 上一层目录</li>
<li>..&#x2F;..&#x2F; 上上一层目录</li>
</ul>
<h3 id="容器标签-div"><a href="#容器标签-div" class="headerlink" title="容器标签 div"></a>容器标签 div</h3><p>主要作用是组合其他 html 元素，他在语意上不代表任何特定的类型，但是他可以将某些内容按照需求来分组.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="超链接标签-a"><a href="#超链接标签-a" class="headerlink" title="超链接标签 a"></a>超链接标签 a</h3><p><code> &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;点我去百度&lt;/a&gt;</code><br>常用属性</p>
<ul>
<li>href 超链接指向的地址，也可以是某个锚点</li>
<li>target 超链接的打开方式<ul>
<li><code>_self</code> 默认值(缺省值)当前页面打开</li>
<li><code>_blank</code> 在新标签页中打开</li>
</ul>
</li>
</ul>
<h4 id="a-标签的应用-锚点跳转"><a href="#a-标签的应用-锚点跳转" class="headerlink" title="a 标签的应用 锚点跳转"></a>a 标签的应用 锚点跳转</h4><p>有两种方式可以实现返回页面最上部，使用name或者id属性</p>
<ul>
<li>利用元素的 id</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tag&quot;</span>&gt;</span>点我秒杀<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- p&#123;$&#125;*100 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>0元秒杀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一步:在需要跳转的标签中插入 id<br>第二步:在 a 中 href 填上对应的 id 即可 不要忘记加<code>#</code></p>
<ul>
<li>利用 a 标签的 name 属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;fly&quot;</span>&gt;</span>终点🏁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- p&#123;$&#125;*30 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#fly&quot;</span>&gt;</span>芜湖🛫️<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 普通文本 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- b只是加粗文本，strong强调内容的重要性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      i显示该文本的斜体 </span></span><br><span class="line"><span class="comment">        em强行给他斜体</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜了<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">H <span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">2 <span class="tag">&lt;<span class="name">sup</span>&gt;</span>5<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p>在 html 中，有一些字符是已经预留好的，由于 html 标签是由<code>&lt;&gt;</code>包裹起来的，所以当内容存在这些符号时,浏览器可能误认为他们是标签。为了正确的显示这些字符，就采用了实体字符</p>
<p><a href="https://www.runoob.com/html/html-entities.html">字体字符</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 错误的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1+1&gt;1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正确的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1+1 <span class="symbol">&amp;gt;</span> 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表分为 有序列表，无序列表，自定义列表</p>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ol&gt;li&#123;$&#125;*3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span> <span class="attr">start</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span> <span class="attr">reversed</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有序列表的属性</p>
<ul>
<li>type 指定标号的类型<ul>
<li>1 数字(默认)</li>
<li>a 小写字母编号</li>
<li>A 大写字母编号</li>
<li>i 小写罗马数字编号</li>
<li>I 大写罗马数字编号</li>
</ul>
</li>
<li>start 指定列表的起始编号</li>
<li>reversed 列表是否倒叙，写上就是倒叙</li>
</ul>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- li&#123;第$项&#125;*3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;disc&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>type 用于设置列表头部的样式</p>
<ul>
<li>circle 空心圆</li>
<li>square 实心方块</li>
<li>disc 实心圆</li>
</ul>
<h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>我是术语<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>我是术语的具体描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>windows<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>windows是一个操作系统<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="列表小练习"><a href="#列表小练习" class="headerlink" title="列表小练习"></a>列表小练习</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    windows11</span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    windows6</span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        windows4</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    windows2</span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>windows1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
